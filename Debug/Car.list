
Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800b9f4  0800b9f4  0001b9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be7c  0800be7c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800be7c  0800be7c  0001be7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be84  0800be84  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be84  0800be84  0001be84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be88  0800be88  0001be88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800be8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002014  20000064  0800bef0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002078  0800bef0  00022078  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029760  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056ba  00000000  00000000  00049831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024e0  00000000  00000000  0004eef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c5d  00000000  00000000  000513d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f08  00000000  00000000  0005302d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000264c1  00000000  00000000  00059f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cde4b  00000000  00000000  000803f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009ee4  00000000  00000000  0014e244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00158128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b9dc 	.word	0x0800b9dc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	0800b9dc 	.word	0x0800b9dc

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b970 	b.w	8000478 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	460f      	mov	r7, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14a      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d965      	bls.n	8000292 <__udivmoddi4+0xe2>
 80001c6:	fab2 f382 	clz	r3, r2
 80001ca:	b143      	cbz	r3, 80001de <__udivmoddi4+0x2e>
 80001cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d0:	f1c3 0220 	rsb	r2, r3, #32
 80001d4:	409f      	lsls	r7, r3
 80001d6:	fa20 f202 	lsr.w	r2, r0, r2
 80001da:	4317      	orrs	r7, r2
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001e2:	fa1f f58c 	uxth.w	r5, ip
 80001e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80001ea:	0c22      	lsrs	r2, r4, #16
 80001ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f4:	fb01 f005 	mul.w	r0, r1, r5
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x62>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 37ff 	add.w	r7, r1, #4294967295
 8000204:	f080 811b 	bcs.w	800043e <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8118 	bls.w	800043e <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	b2a4      	uxth	r4, r4
 8000216:	fbb2 f0fe 	udiv	r0, r2, lr
 800021a:	fb0e 2210 	mls	r2, lr, r0, r2
 800021e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000222:	fb00 f505 	mul.w	r5, r0, r5
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x90>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8106 	bcs.w	8000442 <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8103 	bls.w	8000442 <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	1b64      	subs	r4, r4, r5
 8000246:	2100      	movs	r1, #0
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa2>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xbc>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ec 	beq.w	8000438 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d149      	bne.n	8000308 <__udivmoddi4+0x158>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xce>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f7 	bhi.w	800046c <__udivmoddi4+0x2bc>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4617      	mov	r7, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa2>
 800028c:	e9c6 4700 	strd	r4, r7, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa2>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xe6>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808f 	bne.w	80003be <__udivmoddi4+0x20e>
 80002a0:	1a8a      	subs	r2, r1, r2
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b0:	fb07 2015 	mls	r0, r7, r5, r2
 80002b4:	0c22      	lsrs	r2, r4, #16
 80002b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ba:	fb0e f005 	mul.w	r0, lr, r5
 80002be:	4290      	cmp	r0, r2
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c2:	eb1c 0202 	adds.w	r2, ip, r2
 80002c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4290      	cmp	r0, r2
 80002ce:	f200 80ca 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 80002d2:	4645      	mov	r5, r8
 80002d4:	1a12      	subs	r2, r2, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002dc:	fb07 2210 	mls	r2, r7, r0, r2
 80002e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x14e>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x14c>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80ba 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002fc:	4610      	mov	r0, r2
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000306:	e79f      	b.n	8000248 <__udivmoddi4+0x98>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa05 f401 	lsl.w	r4, r5, r1
 800031a:	fa20 f307 	lsr.w	r3, r0, r7
 800031e:	40fd      	lsrs	r5, r7
 8000320:	4323      	orrs	r3, r4
 8000322:	fa00 f901 	lsl.w	r9, r0, r1
 8000326:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000332:	0c1c      	lsrs	r4, r3, #16
 8000334:	fb00 5518 	mls	r5, r0, r8, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb08 f50e 	mul.w	r5, r8, lr
 8000340:	42a5      	cmp	r5, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8087 	bcs.w	8000462 <__udivmoddi4+0x2b2>
 8000354:	42a5      	cmp	r5, r4
 8000356:	f240 8084 	bls.w	8000462 <__udivmoddi4+0x2b2>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4464      	add	r4, ip
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	b29d      	uxth	r5, r3
 8000364:	fbb4 f3f0 	udiv	r3, r4, r0
 8000368:	fb00 4413 	mls	r4, r0, r3, r4
 800036c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000370:	fb03 fe0e 	mul.w	lr, r3, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000380:	d26b      	bcs.n	800045a <__udivmoddi4+0x2aa>
 8000382:	45a6      	cmp	lr, r4
 8000384:	d969      	bls.n	800045a <__udivmoddi4+0x2aa>
 8000386:	3b02      	subs	r3, #2
 8000388:	4464      	add	r4, ip
 800038a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038e:	fba0 8302 	umull	r8, r3, r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	429c      	cmp	r4, r3
 8000398:	46c6      	mov	lr, r8
 800039a:	461d      	mov	r5, r3
 800039c:	d355      	bcc.n	800044a <__udivmoddi4+0x29a>
 800039e:	d052      	beq.n	8000446 <__udivmoddi4+0x296>
 80003a0:	b156      	cbz	r6, 80003b8 <__udivmoddi4+0x208>
 80003a2:	ebb9 030e 	subs.w	r3, r9, lr
 80003a6:	eb64 0405 	sbc.w	r4, r4, r5
 80003aa:	fa04 f707 	lsl.w	r7, r4, r7
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	40cc      	lsrs	r4, r1
 80003b2:	431f      	orrs	r7, r3
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1c3 0120 	rsb	r1, r3, #32
 80003c2:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c6:	fa20 f201 	lsr.w	r2, r0, r1
 80003ca:	fa25 f101 	lsr.w	r1, r5, r1
 80003ce:	409d      	lsls	r5, r3
 80003d0:	432a      	orrs	r2, r5
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1510 	mls	r5, r7, r0, r1
 80003e2:	0c11      	lsrs	r1, r2, #16
 80003e4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e8:	fb00 f50e 	mul.w	r5, r0, lr
 80003ec:	428d      	cmp	r5, r1
 80003ee:	fa04 f403 	lsl.w	r4, r4, r3
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x256>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d22f      	bcs.n	800045e <__udivmoddi4+0x2ae>
 80003fe:	428d      	cmp	r5, r1
 8000400:	d92d      	bls.n	800045e <__udivmoddi4+0x2ae>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	1b49      	subs	r1, r1, r5
 8000408:	b292      	uxth	r2, r2
 800040a:	fbb1 f5f7 	udiv	r5, r1, r7
 800040e:	fb07 1115 	mls	r1, r7, r5, r1
 8000412:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000416:	fb05 f10e 	mul.w	r1, r5, lr
 800041a:	4291      	cmp	r1, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x280>
 800041e:	eb1c 0202 	adds.w	r2, ip, r2
 8000422:	f105 38ff 	add.w	r8, r5, #4294967295
 8000426:	d216      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 8000428:	4291      	cmp	r1, r2
 800042a:	d914      	bls.n	8000456 <__udivmoddi4+0x2a6>
 800042c:	3d02      	subs	r5, #2
 800042e:	4462      	add	r2, ip
 8000430:	1a52      	subs	r2, r2, r1
 8000432:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000436:	e739      	b.n	80002ac <__udivmoddi4+0xfc>
 8000438:	4631      	mov	r1, r6
 800043a:	4630      	mov	r0, r6
 800043c:	e709      	b.n	8000252 <__udivmoddi4+0xa2>
 800043e:	4639      	mov	r1, r7
 8000440:	e6e7      	b.n	8000212 <__udivmoddi4+0x62>
 8000442:	4610      	mov	r0, r2
 8000444:	e6fc      	b.n	8000240 <__udivmoddi4+0x90>
 8000446:	45c1      	cmp	r9, r8
 8000448:	d2aa      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 800044a:	ebb8 0e02 	subs.w	lr, r8, r2
 800044e:	eb63 050c 	sbc.w	r5, r3, ip
 8000452:	3801      	subs	r0, #1
 8000454:	e7a4      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000456:	4645      	mov	r5, r8
 8000458:	e7ea      	b.n	8000430 <__udivmoddi4+0x280>
 800045a:	4603      	mov	r3, r0
 800045c:	e795      	b.n	800038a <__udivmoddi4+0x1da>
 800045e:	4640      	mov	r0, r8
 8000460:	e7d1      	b.n	8000406 <__udivmoddi4+0x256>
 8000462:	46d0      	mov	r8, sl
 8000464:	e77c      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000466:	3d02      	subs	r5, #2
 8000468:	4462      	add	r2, ip
 800046a:	e733      	b.n	80002d4 <__udivmoddi4+0x124>
 800046c:	4608      	mov	r0, r1
 800046e:	e70b      	b.n	8000288 <__udivmoddi4+0xd8>
 8000470:	4464      	add	r4, ip
 8000472:	3802      	subs	r0, #2
 8000474:	e743      	b.n	80002fe <__udivmoddi4+0x14e>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fc5c 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f84e 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f902 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8b4 	bl	8000654 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f004 fbf2 	bl	8004cd4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of TransmitQueue */
  TransmitQueueHandle = osMessageQueueNew (32, sizeof(uint16_t), &TransmitQueue_attributes);
 80004f0:	4a15      	ldr	r2, [pc, #84]	; (8000548 <main+0x70>)
 80004f2:	2102      	movs	r1, #2
 80004f4:	2020      	movs	r0, #32
 80004f6:	f004 fd29 	bl	8004f4c <osMessageQueueNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a13      	ldr	r2, [pc, #76]	; (800054c <main+0x74>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <main+0x78>)
 8000502:	2100      	movs	r1, #0
 8000504:	4813      	ldr	r0, [pc, #76]	; (8000554 <main+0x7c>)
 8000506:	f004 fc4d 	bl	8004da4 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a12      	ldr	r2, [pc, #72]	; (8000558 <main+0x80>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTask */
  TransmitTaskHandle = osThreadNew(StartTransmitTask, NULL, &TransmitTask_attributes);
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <main+0x84>)
 8000512:	2100      	movs	r1, #0
 8000514:	4812      	ldr	r0, [pc, #72]	; (8000560 <main+0x88>)
 8000516:	f004 fc45 	bl	8004da4 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <main+0x8c>)
 800051e:	6013      	str	r3, [r2, #0]

  /* creation of ReceiveTask */
  ReceiveTaskHandle = osThreadNew(StartReceiveTask, NULL, &ReceiveTask_attributes);
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <main+0x90>)
 8000522:	2100      	movs	r1, #0
 8000524:	4811      	ldr	r0, [pc, #68]	; (800056c <main+0x94>)
 8000526:	f004 fc3d 	bl	8004da4 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <main+0x98>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of GetInputTask */
  GetInputTaskHandle = osThreadNew(StartGetInputTask, NULL, &GetInputTask_attributes);
 8000530:	4a10      	ldr	r2, [pc, #64]	; (8000574 <main+0x9c>)
 8000532:	2100      	movs	r1, #0
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <main+0xa0>)
 8000536:	f004 fc35 	bl	8004da4 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <main+0xa4>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f004 fbfa 	bl	8004d38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x6c>
 8000546:	bf00      	nop
 8000548:	0800bb2c 	.word	0x0800bb2c
 800054c:	20000130 	.word	0x20000130
 8000550:	0800ba9c 	.word	0x0800ba9c
 8000554:	08000875 	.word	0x08000875
 8000558:	20000120 	.word	0x20000120
 800055c:	0800bac0 	.word	0x0800bac0
 8000560:	08000889 	.word	0x08000889
 8000564:	20000124 	.word	0x20000124
 8000568:	0800bae4 	.word	0x0800bae4
 800056c:	080008c1 	.word	0x080008c1
 8000570:	20000128 	.word	0x20000128
 8000574:	0800bb08 	.word	0x0800bb08
 8000578:	080008d5 	.word	0x080008d5
 800057c:	2000012c 	.word	0x2000012c

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b09a      	sub	sp, #104	; 0x68
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2248      	movs	r2, #72	; 0x48
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f00b f936 	bl	800b800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a6:	f000 ff53 	bl	8001450 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f7ff ff66 	bl	800047c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <SystemClock_Config+0xac>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005b8:	4a1c      	ldr	r2, [pc, #112]	; (800062c <SystemClock_Config+0xac>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <SystemClock_Config+0xac>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005cc:	2324      	movs	r3, #36	; 0x24
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d0:	2381      	movs	r3, #129	; 0x81
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005d8:	2300      	movs	r3, #0
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005dc:	23b0      	movs	r3, #176	; 0xb0
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fa03 	bl	80019f4 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005f4:	f000 f985 	bl	8000902 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005f8:	234f      	movs	r3, #79	; 0x4f
 80005fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2102      	movs	r1, #2
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fd6f 	bl	80020f8 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000620:	f000 f96f 	bl	8000902 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3768      	adds	r7, #104	; 0x68
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58000400 	.word	0x58000400

08000630 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_SUBGHZ_Init+0x20>)
 8000636:	2208      	movs	r2, #8
 8000638:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_SUBGHZ_Init+0x20>)
 800063c:	f002 fb18 	bl	8002c70 <HAL_SUBGHZ_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000646:	f000 f95c 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000080 	.word	0x20000080

08000654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 800065a:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <MX_USART2_UART_Init+0x94>)
 800065c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 800069e:	f003 f995 	bl	80039cc <HAL_UART_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006a8:	f000 f92b 	bl	8000902 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	480d      	ldr	r0, [pc, #52]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 80006b0:	f004 fa42 	bl	8004b38 <HAL_UARTEx_SetTxFifoThreshold>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006ba:	f000 f922 	bl	8000902 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 80006c2:	f004 fa77 	bl	8004bb4 <HAL_UARTEx_SetRxFifoThreshold>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006cc:	f000 f919 	bl	8000902 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_USART2_UART_Init+0x90>)
 80006d2:	f004 f9f9 	bl	8004ac8 <HAL_UARTEx_DisableFifoMode>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006dc:	f000 f911 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fed0 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2002      	movs	r0, #2
 8000708:	f7ff fecd 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	2004      	movs	r0, #4
 800070e:	f7ff feca 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000718:	4832      	ldr	r0, [pc, #200]	; (80007e4 <MX_GPIO_Init+0xf8>)
 800071a:	f000 fe69 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2138      	movs	r1, #56	; 0x38
 8000722:	4831      	ldr	r0, [pc, #196]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000724:	f000 fe64 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000728:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 800072c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	2302      	movs	r3, #2
 8000738:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4829      	ldr	r0, [pc, #164]	; (80007e4 <MX_GPIO_Init+0xf8>)
 8000740:	f000 fcf6 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000744:	2338      	movs	r3, #56	; 0x38
 8000746:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4823      	ldr	r0, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xfc>)
 800075a:	f000 fce9 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000762:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000768:	2301      	movs	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f000 fcdc 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000782:	2301      	movs	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4817      	ldr	r0, [pc, #92]	; (80007e8 <MX_GPIO_Init+0xfc>)
 800078c:	f000 fcd0 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000790:	2302      	movs	r3, #2
 8000792:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000798:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079a:	2301      	movs	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f000 fcc3 	bl	8001130 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2105      	movs	r1, #5
 80007ae:	2006      	movs	r0, #6
 80007b0:	f000 fbd9 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007b4:	2006      	movs	r0, #6
 80007b6:	f000 fbf0 	bl	8000f9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2105      	movs	r1, #5
 80007be:	2007      	movs	r0, #7
 80007c0:	f000 fbd1 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007c4:	2007      	movs	r0, #7
 80007c6:	f000 fbe8 	bl	8000f9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2105      	movs	r1, #5
 80007ce:	2016      	movs	r0, #22
 80007d0:	f000 fbc9 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007d4:	2016      	movs	r0, #22
 80007d6:	f000 fbe0 	bl	8000f9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	48000400 	.word	0x48000400
 80007e8:	48000800 	.word	0x48000800

080007ec <MX_SubGHz_Phy_Init>:

/* USER CODE BEGIN 4 */
void MX_SubGHz_Phy_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80007f0:	f000 fa04 	bl	8000bfc <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 80007f4:	f00a fbc2 	bl	800af7c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_GPIO_EXTI_Callback>:

  return ch;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d002      	beq.n	8000812 <HAL_GPIO_EXTI_Callback+0x16>
 800080c:	2b02      	cmp	r3, #2
 800080e:	d011      	beq.n	8000834 <HAL_GPIO_EXTI_Callback+0x38>
			osMessageQueuePut(TransmitQueueHandle, &new_message, 100, 0U);
			//printf("Adding: %s\n\r",new_message);
			break;
		}

	}
 8000810:	e021      	b.n	8000856 <HAL_GPIO_EXTI_Callback+0x5a>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	4811      	ldr	r0, [pc, #68]	; (8000860 <HAL_GPIO_EXTI_Callback+0x64>)
 800081a:	f000 fde9 	bl	80013f0 <HAL_GPIO_WritePin>
			new_message = "1";
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_GPIO_EXTI_Callback+0x68>)
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000822:	601a      	str	r2, [r3, #0]
			osMessageQueuePut(TransmitQueueHandle, &new_message, 100, 0U);
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_GPIO_EXTI_Callback+0x70>)
 8000826:	6818      	ldr	r0, [r3, #0]
 8000828:	2300      	movs	r3, #0
 800082a:	2264      	movs	r2, #100	; 0x64
 800082c:	490d      	ldr	r1, [pc, #52]	; (8000864 <HAL_GPIO_EXTI_Callback+0x68>)
 800082e:	f004 fc13 	bl	8005058 <osMessageQueuePut>
			break;
 8000832:	e010      	b.n	8000856 <HAL_GPIO_EXTI_Callback+0x5a>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <HAL_GPIO_EXTI_Callback+0x64>)
 800083c:	f000 fdd8 	bl	80013f0 <HAL_GPIO_WritePin>
			new_message = "0";
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_GPIO_EXTI_Callback+0x68>)
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <HAL_GPIO_EXTI_Callback+0x74>)
 8000844:	601a      	str	r2, [r3, #0]
			osMessageQueuePut(TransmitQueueHandle, &new_message, 100, 0U);
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_GPIO_EXTI_Callback+0x70>)
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	2300      	movs	r3, #0
 800084c:	2264      	movs	r2, #100	; 0x64
 800084e:	4905      	ldr	r1, [pc, #20]	; (8000864 <HAL_GPIO_EXTI_Callback+0x68>)
 8000850:	f004 fc02 	bl	8005058 <osMessageQueuePut>
			break;
 8000854:	bf00      	nop
	}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	48000400 	.word	0x48000400
 8000864:	20000134 	.word	0x20000134
 8000868:	0800ba3c 	.word	0x0800ba3c
 800086c:	20000130 	.word	0x20000130
 8000870:	0800ba40 	.word	0x0800ba40

08000874 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* init code for SubGHz_Phy */
  MX_SubGHz_Phy_Init();
 800087c:	f7ff ffb6 	bl	80007ec <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//Radio.Send("Hello");
    osDelay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f004 fb35 	bl	8004ef0 <osDelay>
 8000886:	e7fb      	b.n	8000880 <StartDefaultTask+0xc>

08000888 <StartTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitTask */
void StartTransmitTask(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitTask */
	char* message;
	uint8_t msg_prio =100;
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(TransmitQueueHandle, &message, &msg_prio, (uint32_t) 1) == osOK)
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <StartTransmitTask+0x34>)
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	f107 020b 	add.w	r2, r7, #11
 800089c:	f107 010c 	add.w	r1, r7, #12
 80008a0:	2301      	movs	r3, #1
 80008a2:	f004 fc4d 	bl	8005140 <osMessageQueueGet>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d103      	bne.n	80008b4 <StartTransmitTask+0x2c>
	  {
		  //printf("Transmitting: %s\n\r",message);
		  Transmit(message);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00a fc72 	bl	800b198 <Transmit>
	  }
    osDelay(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f004 fb1b 	bl	8004ef0 <osDelay>
	  if (osMessageQueueGet(TransmitQueueHandle, &message, &msg_prio, (uint32_t) 1) == osOK)
 80008ba:	e7eb      	b.n	8000894 <StartTransmitTask+0xc>
 80008bc:	20000130 	.word	0x20000130

080008c0 <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
  /* Infinite loop */
  for(;;)
  {
	Handler();
 80008c8:	f00a fc2c 	bl	800b124 <Handler>
    osDelay(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f004 fb0f 	bl	8004ef0 <osDelay>
  {
 80008d2:	e7f9      	b.n	80008c8 <StartReceiveTask+0x8>

080008d4 <StartGetInputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetInputTask */
void StartGetInputTask(void *argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetInputTask */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(100);
 80008dc:	2064      	movs	r0, #100	; 0x64
 80008de:	f004 fb07 	bl	8004ef0 <osDelay>
 80008e2:	e7fb      	b.n	80008dc <StartGetInputTask+0x8>

080008e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f4:	d101      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f6:	f000 fa6f 	bl	8000dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000906:	b672      	cpsid	i
}
 8000908:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090a:	e7fe      	b.n	800090a <Error_Handler+0x8>

0800090c <LL_AHB2_GRP1_EnableClock>:
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000918:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800091a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4313      	orrs	r3, r2
 8000922:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000928:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000930:	68fb      	ldr	r3, [r7, #12]
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000948:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800094a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000958:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4013      	ands	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000960:	68fb      	ldr	r3, [r7, #12]
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000978:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800097a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4313      	orrs	r3, r2
 8000982:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000988:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000990:	68fb      	ldr	r3, [r7, #12]
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	210f      	movs	r1, #15
 80009a4:	f06f 0001 	mvn.w	r0, #1
 80009a8:	f000 fadd 	bl	8000f66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff ffd7 	bl	800096c <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2105      	movs	r1, #5
 80009c2:	2032      	movs	r0, #50	; 0x32
 80009c4:	f000 facf 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80009c8:	2032      	movs	r0, #50	; 0x32
 80009ca:	f000 fae6 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b096      	sub	sp, #88	; 0x58
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2238      	movs	r2, #56	; 0x38
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f00a ff01 	bl	800b800 <memset>
  if(huart->Instance==USART2)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <HAL_UART_MspInit+0x98>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d12e      	bne.n	8000a66 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a0c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a10:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 ff76 	bl	8002908 <HAL_RCCEx_PeriphCLKConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a22:	f7ff ff6e 	bl	8000902 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a26:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a2a:	f7ff ff87 	bl	800093c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff ff6c 	bl	800090c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000a34:	230c      	movs	r3, #12
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a44:	2307      	movs	r3, #7
 8000a46:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 fb6d 	bl	8001130 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2105      	movs	r1, #5
 8000a5a:	2025      	movs	r0, #37	; 0x25
 8000a5c:	f000 fa83 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a60:	2025      	movs	r0, #37	; 0x25
 8000a62:	f000 fa9a 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3758      	adds	r7, #88	; 0x58
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400

08000a74 <LL_APB1_GRP1_EnableClock>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a98:	68fb      	ldr	r3, [r7, #12]
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08e      	sub	sp, #56	; 0x38
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff ffda 	bl	8000a74 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac0:	f107 020c 	add.w	r2, r7, #12
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fd2e 	bl	800252c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad0:	f001 fd08 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8000ad4:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <HAL_InitTick+0xbc>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	0c9b      	lsrs	r3, r3, #18
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <HAL_InitTick+0xc0>)
 8000ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_InitTick+0xc0>)
 8000aee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_InitTick+0xc0>)
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_InitTick+0xc0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_InitTick+0xc0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8000b06:	4817      	ldr	r0, [pc, #92]	; (8000b64 <HAL_InitTick+0xc0>)
 8000b08:	f002 fcd2 	bl	80034b0 <HAL_TIM_Base_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d11b      	bne.n	8000b52 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b1a:	4812      	ldr	r0, [pc, #72]	; (8000b64 <HAL_InitTick+0xc0>)
 8000b1c:	f002 fd28 	bl	8003570 <HAL_TIM_Base_Start_IT>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000b26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d111      	bne.n	8000b52 <HAL_InitTick+0xae>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b2e:	201b      	movs	r0, #27
 8000b30:	f000 fa33 	bl	8000f9a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b0f      	cmp	r3, #15
 8000b38:	d808      	bhi.n	8000b4c <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	201b      	movs	r0, #27
 8000b40:	f000 fa11 	bl	8000f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_InitTick+0xc4>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	e002      	b.n	8000b52 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8000b52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3738      	adds	r7, #56	; 0x38
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	20000138 	.word	0x20000138
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 fc40 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f000 fc39 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000bb6:	2040      	movs	r0, #64	; 0x40
 8000bb8:	f000 fc32 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM2_IRQHandler+0x10>)
 8000bc6:	f002 fd1f 	bl	8003608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000138 	.word	0x20000138

08000bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <USART2_IRQHandler+0x10>)
 8000bda:	f002 ff47 	bl	8003a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000008c 	.word	0x2000008c

08000be8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000bee:	f002 fac1 	bl	8003174 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000080 	.word	0x20000080

08000bfc <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_GetTick+0x24>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000c1a:	f000 f85c 	bl	8000cd6 <TIMER_IF_GetTimerValue>
 8000c1e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000184 	.word	0x20000184

08000c30 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f879 	bl	8000d32 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <TIMER_IF_SetTimerContext+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000188 	.word	0x20000188

08000cac <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <TIMER_IF_GetTimerContext+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000188 	.word	0x20000188

08000cc0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8000cca:	687b      	ldr	r3, [r7, #4]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8000cf6:	687b      	ldr	r3, [r7, #4]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b085      	sub	sp, #20
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d48:	f7ff ff7e 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d72:	f00a fda9 	bl	800b8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff fbaf 	bl	80004d8 <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   r0, =_estack
 8000d7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d88:	0800be8c 	.word	0x0800be8c
  ldr r2, =_sbss
 8000d8c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d90:	20002078 	.word	0x20002078

08000d94 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 f8d4 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000da8:	f001 fb88 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <HAL_Init+0x3c>)
 8000db0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db2:	200f      	movs	r0, #15
 8000db4:	f7ff fe76 	bl	8000aa4 <HAL_InitTick>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	71fb      	strb	r3, [r7, #7]
 8000dc2:	e001      	b.n	8000dc8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc4:	f7ff fdea 	bl	800099c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x20>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_IncTick+0x20>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20000008 	.word	0x20000008
 8000df8:	2000018c 	.word	0x2000018c

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4906      	ldr	r1, [pc, #24]	; (8000e94 <__NVIC_EnableIRQ+0x34>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff4f 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff66 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ffb4 	bl	8000eec <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff83 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff59 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e04f      	b.n	8001068 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d008      	beq.n	8000fe6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e040      	b.n	8001068 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 020e 	bic.w	r2, r2, #14
 8000ff4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f003 021c 	and.w	r2, r3, #28
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001032:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00c      	beq.n	8001056 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800104a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001054:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d005      	beq.n	8001096 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e047      	b.n	8001126 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 020e 	bic.w	r2, r2, #14
 80010a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f003 021c 	and.w	r2, r3, #28
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00c      	beq.n	8001106 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001104:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	4798      	blx	r3
    }
  }
  return status;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e140      	b.n	80013c2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8132 	beq.w	80013bc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <HAL_GPIO_Init+0x40>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 0201 	and.w	r2, r3, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d017      	beq.n	800120e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	6939      	ldr	r1, [r7, #16]
 800125e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0203 	and.w	r2, r3, #3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 808c 	beq.w	80013bc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012a4:	4a4e      	ldr	r2, [pc, #312]	; (80013e0 <HAL_GPIO_Init+0x2b0>)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	2207      	movs	r2, #7
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ce:	d00d      	beq.n	80012ec <HAL_GPIO_Init+0x1bc>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a44      	ldr	r2, [pc, #272]	; (80013e4 <HAL_GPIO_Init+0x2b4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x1b8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a43      	ldr	r2, [pc, #268]	; (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d101      	bne.n	80012e4 <HAL_GPIO_Init+0x1b4>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e004      	b.n	80012ee <HAL_GPIO_Init+0x1be>
 80012e4:	2307      	movs	r3, #7
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x1be>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_GPIO_Init+0x1be>
 80012ec:	2300      	movs	r3, #0
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	f002 0203 	and.w	r2, r2, #3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4093      	lsls	r3, r2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012fe:	4938      	ldr	r1, [pc, #224]	; (80013e0 <HAL_GPIO_Init+0x2b0>)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001330:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001336:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 8001362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001366:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001386:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 8001390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001394:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f47f aeb7 	bne.w	8001140 <HAL_GPIO_Init+0x10>
  }
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40010000 	.word	0x40010000
 80013e4:	48000400 	.word	0x48000400
 80013e8:	48000800 	.word	0x48000800
 80013ec:	58000800 	.word	0x58000800

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800140c:	e002      	b.n	8001414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
	...

08001420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f9dc 	bl	80007fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	58000800 	.word	0x58000800

08001450 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_PWR_EnableBkUpAccess+0x18>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	58000400 	.word	0x58000400

0800146c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_PWREx_GetVoltageRange+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	58000400 	.word	0x58000400

08001484 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001494:	d101      	bne.n	800149a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	58000400 	.word	0x58000400

080014a8 <LL_RCC_HSE_EnableTcxo>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <LL_RCC_HSE_DisableTcxo>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80014e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014f2:	d101      	bne.n	80014f8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <LL_RCC_HSE_Enable>:
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <LL_RCC_HSE_Disable>:
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <LL_RCC_HSE_IsReady>:
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800154c:	d101      	bne.n	8001552 <LL_RCC_HSE_IsReady+0x18>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_RCC_HSE_IsReady+0x1a>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <LL_RCC_HSI_Enable>:
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <LL_RCC_HSI_Disable>:
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <LL_RCC_HSI_IsReady>:
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a6:	d101      	bne.n	80015ac <LL_RCC_HSI_IsReady+0x18>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <LL_RCC_HSI_IsReady+0x1a>
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	061b      	lsls	r3, r3, #24
 80015cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d101      	bne.n	80015f6 <LL_RCC_LSE_IsReady+0x18>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <LL_RCC_LSE_IsReady+0x1a>
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b02      	cmp	r3, #2
 8001652:	d101      	bne.n	8001658 <LL_RCC_LSI_IsReady+0x18>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <LL_RCC_LSI_IsReady+0x1a>
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d101      	bne.n	80016b0 <LL_RCC_MSI_IsReady+0x16>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <LL_RCC_MSI_IsReady+0x18>
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d101      	bne.n	80016d0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80016de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80016f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f023 0203 	bic.w	r2, r3, #3
 8001742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 030c 	and.w	r3, r3, #12
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4313      	orrs	r3, r2
 8001786:	608b      	str	r3, [r1, #8]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800179a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017cc:	f023 020f 	bic.w	r2, r3, #15
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d8:	4313      	orrs	r3, r2
 80017da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001852:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800187e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800189e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018da:	d101      	bne.n	80018e0 <LL_RCC_PLL_IsReady+0x18>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <LL_RCC_PLL_IsReady+0x1a>
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 0303 	and.w	r3, r3, #3
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001956:	d101      	bne.n	800195c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800197a:	d101      	bne.n	8001980 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001992:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199e:	d101      	bne.n	80019a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019c0:	d101      	bne.n	80019c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019e2:	d101      	bne.n	80019e8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e36f      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a06:	f7ff fea6 	bl	8001756 <LL_RCC_GetSysClkSource>
 8001a0a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a0c:	f7ff ff8f 	bl	800192e <LL_RCC_PLL_GetMainSource>
 8001a10:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80c4 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3e>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	2b0c      	cmp	r3, #12
 8001a2a:	d176      	bne.n	8001b1a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d173      	bne.n	8001b1a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e353      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x68>
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5a:	e006      	b.n	8001a6a <HAL_RCC_OscConfig+0x76>
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d222      	bcs.n	8001ab4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fda2 	bl	80025bc <RCC_SetFlashLatencyFromMSIRange>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e331      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fe2b 	bl	8001708 <LL_RCC_MSI_SetCalibTrimming>
 8001ab2:	e021      	b.n	8001af8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001abe:	f043 0308 	orr.w	r3, r3, #8
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fe12 	bl	8001708 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fd67 	bl	80025bc <RCC_SetFlashLatencyFromMSIRange>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e2f6      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001af8:	f000 fce0 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4aa7      	ldr	r2, [pc, #668]	; (8001d9c <HAL_RCC_OscConfig+0x3a8>)
 8001b00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001b02:	4ba7      	ldr	r3, [pc, #668]	; (8001da0 <HAL_RCC_OscConfig+0x3ac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe ffcc 	bl	8000aa4 <HAL_InitTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001b10:	7cfb      	ldrb	r3, [r7, #19]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d047      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001b16:	7cfb      	ldrb	r3, [r7, #19]
 8001b18:	e2e5      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d02c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b22:	f7ff fd9e 	bl	8001662 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b26:	f7ff f86f 	bl	8000c08 <HAL_GetTick>
 8001b2a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f86b 	bl	8000c08 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e2d2      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b40:	f7ff fdab 	bl	800169a <LL_RCC_MSI_IsReady>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f1      	beq.n	8001b2e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fdc7 	bl	8001708 <LL_RCC_MSI_SetCalibTrimming>
 8001b7a:	e015      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b7c:	f7ff fd7f 	bl	800167e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f842 	bl	8000c08 <HAL_GetTick>
 8001b84:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b88:	f7ff f83e 	bl	8000c08 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e2a5      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b9a:	f7ff fd7e 	bl	800169a <LL_RCC_MSI_IsReady>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f1      	bne.n	8001b88 <HAL_RCC_OscConfig+0x194>
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ba6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d058      	beq.n	8001c66 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1d2>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d108      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d105      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d14b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e289      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x204>
 8001bf2:	f7ff fc86 	bl	8001502 <LL_RCC_HSE_Enable>
 8001bf6:	e00d      	b.n	8001c14 <HAL_RCC_OscConfig+0x220>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001c00:	d104      	bne.n	8001c0c <HAL_RCC_OscConfig+0x218>
 8001c02:	f7ff fc51 	bl	80014a8 <LL_RCC_HSE_EnableTcxo>
 8001c06:	f7ff fc7c 	bl	8001502 <LL_RCC_HSE_Enable>
 8001c0a:	e003      	b.n	8001c14 <HAL_RCC_OscConfig+0x220>
 8001c0c:	f7ff fc87 	bl	800151e <LL_RCC_HSE_Disable>
 8001c10:	f7ff fc58 	bl	80014c4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d012      	beq.n	8001c42 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe fff4 	bl	8000c08 <HAL_GetTick>
 8001c20:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7fe fff0 	bl	8000c08 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e257      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c36:	f7ff fc80 	bl	800153a <LL_RCC_HSE_IsReady>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f1      	beq.n	8001c24 <HAL_RCC_OscConfig+0x230>
 8001c40:	e011      	b.n	8001c66 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7fe ffe1 	bl	8000c08 <HAL_GetTick>
 8001c46:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4a:	f7fe ffdd 	bl	8000c08 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e244      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c5c:	f7ff fc6d 	bl	800153a <LL_RCC_HSE_IsReady>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f1      	bne.n	8001c4a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d046      	beq.n	8001d00 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x290>
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d10e      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d10b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e22a      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fc8e 	bl	80015b6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c9a:	e031      	b.n	8001d00 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d019      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca4:	f7ff fc5a 	bl	800155c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7fe ffae 	bl	8000c08 <HAL_GetTick>
 8001cac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7fe ffaa 	bl	8000c08 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e211      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001cc2:	f7ff fc67 	bl	8001594 <LL_RCC_HSI_IsReady>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f1      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fc70 	bl	80015b6 <LL_RCC_HSI_SetCalibTrimming>
 8001cd6:	e013      	b.n	8001d00 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd8:	f7ff fc4e 	bl	8001578 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ff94 	bl	8000c08 <HAL_GetTick>
 8001ce0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7fe ff90 	bl	8000c08 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1f7      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001cf6:	f7ff fc4d 	bl	8001594 <LL_RCC_HSI_IsReady>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f1      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d06e      	beq.n	8001dea <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d056      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d031      	beq.n	8001d90 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e1d0      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d013      	beq.n	8001d76 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001d4e:	f7ff fc67 	bl	8001620 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d52:	f7fe ff59 	bl	8000c08 <HAL_GetTick>
 8001d56:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5a:	f7fe ff55 	bl	8000c08 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b11      	cmp	r3, #17
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1bc      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001d6c:	f7ff fc68 	bl	8001640 <LL_RCC_LSI_IsReady>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f1      	bne.n	8001d5a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7e:	f023 0210 	bic.w	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d90:	f7ff fc36 	bl	8001600 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7fe ff38 	bl	8000c08 <HAL_GetTick>
 8001d98:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001d9a:	e00c      	b.n	8001db6 <HAL_RCC_OscConfig+0x3c2>
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da4:	f7fe ff30 	bl	8000c08 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b11      	cmp	r3, #17
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e197      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001db6:	f7ff fc43 	bl	8001640 <LL_RCC_LSI_IsReady>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f1      	beq.n	8001da4 <HAL_RCC_OscConfig+0x3b0>
 8001dc0:	e013      	b.n	8001dea <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc2:	f7ff fc2d 	bl	8001620 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7fe ff1f 	bl	8000c08 <HAL_GetTick>
 8001dca:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dce:	f7fe ff1b 	bl	8000c08 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b11      	cmp	r3, #17
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e182      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001de0:	f7ff fc2e 	bl	8001640 <LL_RCC_LSI_IsReady>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f1      	bne.n	8001dce <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80d8 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001df8:	f7ff fb44 	bl	8001484 <LL_PWR_IsEnabledBkUpAccess>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d113      	bne.n	8001e2a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001e02:	f7ff fb25 	bl	8001450 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7fe feff 	bl	8000c08 <HAL_GetTick>
 8001e0a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7fe fefb 	bl	8000c08 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e162      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e20:	f7ff fb30 	bl	8001484 <LL_PWR_IsEnabledBkUpAccess>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f1      	beq.n	8001e0e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d07b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b85      	cmp	r3, #133	; 0x85
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7fe fed7 	bl	8000c08 <HAL_GetTick>
 8001e5a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe fec9 	bl	8000c08 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e12e      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e88:	f7ff fba9 	bl	80015de <LL_RCC_LSE_IsReady>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ef      	beq.n	8001e72 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b81      	cmp	r3, #129	; 0x81
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b85      	cmp	r3, #133	; 0x85
 8001ea0:	d121      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe feb1 	bl	8000c08 <HAL_GetTick>
 8001ea6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe fea3 	bl	8000c08 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e108      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ec      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001ee4:	e060      	b.n	8001fa8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7fe fe8f 	bl	8000c08 <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7fe fe81 	bl	8000c08 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0e6      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ec      	bne.n	8001f02 <HAL_RCC_OscConfig+0x50e>
 8001f28:	e03e      	b.n	8001fa8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7fe fe6d 	bl	8000c08 <HAL_GetTick>
 8001f2e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fe5f 	bl	8000c08 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0c4      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ec      	bne.n	8001f46 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7fe fe4c 	bl	8000c08 <HAL_GetTick>
 8001f70:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7fe fe3e 	bl	8000c08 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0a3      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f9e:	f7ff fb1e 	bl	80015de <LL_RCC_LSE_IsReady>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1ef      	bne.n	8001f88 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8099 	beq.w	80020e4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d06c      	beq.n	8002092 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d14b      	bne.n	8002058 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc0:	f7ff fc74 	bl	80018ac <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fe20 	bl	8000c08 <HAL_GetTick>
 8001fc8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7fe fe1c 	bl	8000c08 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b0a      	cmp	r3, #10
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e083      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001fde:	f7ff fc73 	bl	80018c8 <LL_RCC_PLL_IsReady>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f1      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <HAL_RCC_OscConfig+0x6fc>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002000:	0212      	lsls	r2, r2, #8
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002008:	4311      	orrs	r1, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800200e:	4311      	orrs	r1, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002014:	430a      	orrs	r2, r1
 8002016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201a:	4313      	orrs	r3, r2
 800201c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800201e:	f7ff fc37 	bl	8001890 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002030:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe fde9 	bl	8000c08 <HAL_GetTick>
 8002036:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe fde5 	bl	8000c08 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b0a      	cmp	r3, #10
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e04c      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800204c:	f7ff fc3c 	bl	80018c8 <LL_RCC_PLL_IsReady>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f1      	beq.n	800203a <HAL_RCC_OscConfig+0x646>
 8002056:	e045      	b.n	80020e4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002058:	f7ff fc28 	bl	80018ac <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7fe fdd4 	bl	8000c08 <HAL_GetTick>
 8002060:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7fe fdd0 	bl	8000c08 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b0a      	cmp	r3, #10
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e037      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002076:	f7ff fc27 	bl	80018c8 <LL_RCC_PLL_IsReady>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f1      	bne.n	8002064 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_OscConfig+0x700>)
 800208c:	4013      	ands	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
 8002090:	e028      	b.n	80020e4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e023      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d115      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	429a      	cmp	r2, r3
 80020c0:	d10e      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d106      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	11c1808c 	.word	0x11c1808c
 80020f4:	eefefffc 	.word	0xeefefffc

080020f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e12c      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b98      	ldr	r3, [pc, #608]	; (8002370 <HAL_RCC_ClockConfig+0x278>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d91b      	bls.n	8002152 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b95      	ldr	r3, [pc, #596]	; (8002370 <HAL_RCC_ClockConfig+0x278>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4993      	ldr	r1, [pc, #588]	; (8002370 <HAL_RCC_ClockConfig+0x278>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800212a:	f7fe fd6d 	bl	8000c08 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002130:	e008      	b.n	8002144 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002132:	f7fe fd69 	bl	8000c08 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e110      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002144:	4b8a      	ldr	r3, [pc, #552]	; (8002370 <HAL_RCC_ClockConfig+0x278>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d1ef      	bne.n	8002132 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fb02 	bl	800176c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002168:	f7fe fd4e 	bl	8000c08 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002170:	f7fe fd4a 	bl	8000c08 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0f1      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002182:	f7ff fbdf 	bl	8001944 <LL_RCC_IsActiveFlag_HPRE>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f1      	beq.n	8002170 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	d016      	beq.n	80021c6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff faf8 	bl	8001792 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021a2:	f7fe fd31 	bl	8000c08 <HAL_GetTick>
 80021a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021aa:	f7fe fd2d 	bl	8000c08 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0d4      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80021bc:	f7ff fbd3 	bl	8001966 <LL_RCC_IsActiveFlag_C2HPRE>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f1      	beq.n	80021aa <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff faf0 	bl	80017bc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fd14 	bl	8000c08 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021e4:	f7fe fd10 	bl	8000c08 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0b7      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80021f6:	f7ff fbc8 	bl	800198a <LL_RCC_IsActiveFlag_SHDHPRE>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f1      	beq.n	80021e4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d016      	beq.n	800223a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fae9 	bl	80017e8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002216:	f7fe fcf7 	bl	8000c08 <HAL_GetTick>
 800221a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800221e:	f7fe fcf3 	bl	8000c08 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e09a      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002230:	f7ff fbbd 	bl	80019ae <LL_RCC_IsActiveFlag_PPRE1>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f1      	beq.n	800221e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d017      	beq.n	8002276 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fade 	bl	800180e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002252:	f7fe fcd9 	bl	8000c08 <HAL_GetTick>
 8002256:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800225a:	f7fe fcd5 	bl	8000c08 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e07c      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800226c:	f7ff fbb0 	bl	80019d0 <LL_RCC_IsActiveFlag_PPRE2>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f1      	beq.n	800225a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d043      	beq.n	800230a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d106      	bne.n	8002298 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800228a:	f7ff f956 	bl	800153a <LL_RCC_HSE_IsReady>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11e      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e066      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d106      	bne.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80022a0:	f7ff fb12 	bl	80018c8 <LL_RCC_PLL_IsReady>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d113      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e05b      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80022b6:	f7ff f9f0 	bl	800169a <LL_RCC_MSI_IsReady>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d108      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e050      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80022c4:	f7ff f966 	bl	8001594 <LL_RCC_HSI_IsReady>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e049      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fa2a 	bl	8001730 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7fe fc94 	bl	8000c08 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7fe fc90 	bl	8000c08 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e035      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	f7ff fa2c 	bl	8001756 <LL_RCC_GetSysClkSource>
 80022fe:	4602      	mov	r2, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	429a      	cmp	r2, r3
 8002308:	d1ec      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_ClockConfig+0x278>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d21b      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_RCC_ClockConfig+0x278>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 0207 	bic.w	r2, r3, #7
 8002320:	4913      	ldr	r1, [pc, #76]	; (8002370 <HAL_RCC_ClockConfig+0x278>)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002328:	f7fe fc6e 	bl	8000c08 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	e008      	b.n	8002342 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002330:	f7fe fc6a 	bl	8000c08 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e011      	b.n	8002366 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_ClockConfig+0x278>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d1ef      	bne.n	8002330 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002350:	f000 f8b4 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002354:	4603      	mov	r3, r0
 8002356:	4a07      	ldr	r2, [pc, #28]	; (8002374 <HAL_RCC_ClockConfig+0x27c>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_RCC_ClockConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fba0 	bl	8000aa4 <HAL_InitTick>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	58004000 	.word	0x58004000
 8002374:	20000000 	.word	0x20000000
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238a:	f7ff f9e4 	bl	8001756 <LL_RCC_GetSysClkSource>
 800238e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002390:	f7ff facd 	bl	800192e <LL_RCC_PLL_GetMainSource>
 8002394:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x2c>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d139      	bne.n	8002416 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d136      	bne.n	8002416 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80023a8:	f7ff f987 	bl	80016ba <LL_RCC_MSI_IsEnabledRangeSelect>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d115      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x62>
 80023b2:	f7ff f982 	bl	80016ba <LL_RCC_MSI_IsEnabledRangeSelect>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x4e>
 80023bc:	f7ff f98d 	bl	80016da <LL_RCC_MSI_GetRange>
 80023c0:	4603      	mov	r3, r0
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	e005      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x5a>
 80023ca:	f7ff f991 	bl	80016f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80023ce:	4603      	mov	r3, r0
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	4a36      	ldr	r2, [pc, #216]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x134>)
 80023d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023dc:	e014      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x8c>
 80023de:	f7ff f96c 	bl	80016ba <LL_RCC_MSI_IsEnabledRangeSelect>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x7a>
 80023e8:	f7ff f977 	bl	80016da <LL_RCC_MSI_GetRange>
 80023ec:	4603      	mov	r3, r0
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	e005      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x86>
 80023f6:	f7ff f97b 	bl	80016f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80023fa:	4603      	mov	r3, r0
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d115      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002414:	e012      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d102      	bne.n	8002422 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800241c:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e00c      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d109      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002428:	f7ff f85a 	bl	80014e0 <LL_RCC_HSE_IsEnabledDiv2>
 800242c:	4603      	mov	r3, r0
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e001      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800243a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243c:	f7ff f98b 	bl	8001756 <LL_RCC_GetSysClkSource>
 8002440:	4603      	mov	r3, r0
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d12f      	bne.n	80024a6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002446:	f7ff fa72 	bl	800192e <LL_RCC_PLL_GetMainSource>
 800244a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d003      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0xde>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d003      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0xe4>
 8002458:	e00d      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800245c:	60fb      	str	r3, [r7, #12]
        break;
 800245e:	e00d      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002460:	f7ff f83e 	bl	80014e0 <LL_RCC_HSE_IsEnabledDiv2>
 8002464:	4603      	mov	r3, r0
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800246c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800246e:	e005      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002472:	60fb      	str	r3, [r7, #12]
        break;
 8002474:	e002      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	60fb      	str	r3, [r7, #12]
        break;
 800247a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800247c:	f7ff fa35 	bl	80018ea <LL_RCC_PLL_GetN>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	fb03 f402 	mul.w	r4, r3, r2
 8002488:	f7ff fa46 	bl	8001918 <LL_RCC_PLL_GetDivider>
 800248c:	4603      	mov	r3, r0
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	3301      	adds	r3, #1
 8002492:	fbb4 f4f3 	udiv	r4, r4, r3
 8002496:	f7ff fa34 	bl	8001902 <LL_RCC_PLL_GetR>
 800249a:	4603      	mov	r3, r0
 800249c:	0f5b      	lsrs	r3, r3, #29
 800249e:	3301      	adds	r3, #1
 80024a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80024a4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80024a6:	697b      	ldr	r3, [r7, #20]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	0800bba4 	.word	0x0800bba4
 80024b4:	00f42400 	.word	0x00f42400
 80024b8:	01e84800 	.word	0x01e84800

080024bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b598      	push	{r3, r4, r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80024c0:	f7ff ff5c 	bl	800237c <HAL_RCC_GetSysClockFreq>
 80024c4:	4604      	mov	r4, r0
 80024c6:	f7ff f9b5 	bl	8001834 <LL_RCC_GetAHBPrescaler>
 80024ca:	4603      	mov	r3, r0
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a03      	ldr	r2, [pc, #12]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd98      	pop	{r3, r4, r7, pc}
 80024e0:	0800bb44 	.word	0x0800bb44

080024e4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b598      	push	{r3, r4, r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80024e8:	f7ff ffe8 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024ec:	4604      	mov	r4, r0
 80024ee:	f7ff f9b9 	bl	8001864 <LL_RCC_GetAPB1Prescaler>
 80024f2:	4603      	mov	r3, r0
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	4a03      	ldr	r2, [pc, #12]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd98      	pop	{r3, r4, r7, pc}
 8002504:	0800bb84 	.word	0x0800bb84

08002508 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002508:	b598      	push	{r3, r4, r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800250c:	f7ff ffd6 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002510:	4604      	mov	r4, r0
 8002512:	f7ff f9b2 	bl	800187a <LL_RCC_GetAPB2Prescaler>
 8002516:	4603      	mov	r3, r0
 8002518:	0adb      	lsrs	r3, r3, #11
 800251a:	4a03      	ldr	r2, [pc, #12]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x20>)
 800251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002520:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd98      	pop	{r3, r4, r7, pc}
 8002528:	0800bb84 	.word	0x0800bb84

0800252c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d038      	beq.n	80025ae <HAL_RCC_GetClockConfig+0x82>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d035      	beq.n	80025ae <HAL_RCC_GetClockConfig+0x82>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	224f      	movs	r2, #79	; 0x4f
 8002546:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8002554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800258c:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	b2da      	uxtb	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetClockConfig+0x8c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0207 	and.w	r2, r3, #7
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	601a      	str	r2, [r3, #0]
  }
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	58004000 	.word	0x58004000

080025bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	4a10      	ldr	r2, [pc, #64]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80025d4:	f7ff f939 	bl	800184a <LL_RCC_GetAHB3Prescaler>
 80025d8:	4603      	mov	r3, r0
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4a09      	ldr	r2, [pc, #36]	; (8002618 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	0c9c      	lsrs	r4, r3, #18
 80025f8:	f7fe ff38 	bl	800146c <HAL_PWREx_GetVoltageRange>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4619      	mov	r1, r3
 8002600:	4620      	mov	r0, r4
 8002602:	f000 f80b 	bl	800261c <RCC_SetFlashLatency>
 8002606:	4603      	mov	r3, r0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	bd90      	pop	{r4, r7, pc}
 8002610:	0800bba4 	.word	0x0800bba4
 8002614:	0800bb44 	.word	0x0800bb44
 8002618:	431bde83 	.word	0x431bde83

0800261c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08e      	sub	sp, #56	; 0x38
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002626:	4a3a      	ldr	r2, [pc, #232]	; (8002710 <RCC_SetFlashLatency+0xf4>)
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002630:	6018      	str	r0, [r3, #0]
 8002632:	3304      	adds	r3, #4
 8002634:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002636:	4a37      	ldr	r2, [pc, #220]	; (8002714 <RCC_SetFlashLatency+0xf8>)
 8002638:	f107 0318 	add.w	r3, r7, #24
 800263c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002640:	6018      	str	r0, [r3, #0]
 8002642:	3304      	adds	r3, #4
 8002644:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002646:	4a34      	ldr	r2, [pc, #208]	; (8002718 <RCC_SetFlashLatency+0xfc>)
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	ca07      	ldmia	r2, {r0, r1, r2}
 800264e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265c:	d11b      	bne.n	8002696 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800265e:	2300      	movs	r3, #0
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
 8002662:	e014      	b.n	800268e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	3338      	adds	r3, #56	; 0x38
 800266a:	443b      	add	r3, r7
 800266c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002670:	461a      	mov	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4293      	cmp	r3, r2
 8002676:	d807      	bhi.n	8002688 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	3338      	adds	r3, #56	; 0x38
 800267e:	443b      	add	r3, r7
 8002680:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002686:	e021      	b.n	80026cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	3301      	adds	r3, #1
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	2b02      	cmp	r3, #2
 8002692:	d9e7      	bls.n	8002664 <RCC_SetFlashLatency+0x48>
 8002694:	e01a      	b.n	80026cc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002696:	2300      	movs	r3, #0
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269a:	e014      	b.n	80026c6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	3338      	adds	r3, #56	; 0x38
 80026a2:	443b      	add	r3, r7
 80026a4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80026a8:	461a      	mov	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d807      	bhi.n	80026c0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	3338      	adds	r3, #56	; 0x38
 80026b6:	443b      	add	r3, r7
 80026b8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026be:	e005      	b.n	80026cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	3301      	adds	r3, #1
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d9e7      	bls.n	800269c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <RCC_SetFlashLatency+0x100>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 0207 	bic.w	r2, r3, #7
 80026d4:	4911      	ldr	r1, [pc, #68]	; (800271c <RCC_SetFlashLatency+0x100>)
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026dc:	f7fe fa94 	bl	8000c08 <HAL_GetTick>
 80026e0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026e2:	e008      	b.n	80026f6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026e4:	f7fe fa90 	bl	8000c08 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e007      	b.n	8002706 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <RCC_SetFlashLatency+0x100>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002700:	429a      	cmp	r2, r3
 8002702:	d1ef      	bne.n	80026e4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3738      	adds	r7, #56	; 0x38
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	0800ba44 	.word	0x0800ba44
 8002714:	0800ba4c 	.word	0x0800ba4c
 8002718:	0800ba54 	.word	0x0800ba54
 800271c:	58004000 	.word	0x58004000

08002720 <LL_RCC_LSE_IsReady>:
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d101      	bne.n	8002738 <LL_RCC_LSE_IsReady+0x18>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <LL_RCC_LSE_IsReady+0x1a>
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <LL_RCC_SetUSARTClockSource>:
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	43db      	mvns	r3, r3
 8002758:	401a      	ands	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	b29b      	uxth	r3, r3
 800275e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <LL_RCC_SetI2SClockSource>:
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <LL_RCC_SetLPUARTClockSource>:
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <LL_RCC_SetI2CClockSource>:
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027de:	43db      	mvns	r3, r3
 80027e0:	401a      	ands	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <LL_RCC_SetLPTIMClockSource>:
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	43db      	mvns	r3, r3
 8002816:	401a      	ands	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <LL_RCC_SetRNGClockSource>:
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <LL_RCC_SetADCClockSource>:
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800286e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <LL_RCC_SetRTCClockSource>:
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <LL_RCC_GetRTCClockSource>:
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_ForceBackupDomainReset>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
	...

08002908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002914:	2300      	movs	r3, #0
 8002916:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002918:	2300      	movs	r3, #0
 800291a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d058      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002928:	f7fe fd92 	bl	8001450 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800292c:	f7fe f96c 	bl	8000c08 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002932:	e009      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe f968 	bl	8000c08 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d902      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	74fb      	strb	r3, [r7, #19]
        break;
 8002946:	e006      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002948:	4b7b      	ldr	r3, [pc, #492]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002954:	d1ee      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d13c      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800295c:	f7ff ffa7 	bl	80028ae <LL_RCC_GetRTCClockSource>
 8002960:	4602      	mov	r2, r0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002966:	429a      	cmp	r2, r3
 8002968:	d00f      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002976:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002978:	f7ff ffa5 	bl	80028c6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800297c:	f7ff ffb3 	bl	80028e6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d014      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe f938 	bl	8000c08 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800299a:	e00b      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fe f934 	bl	8000c08 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d902      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	74fb      	strb	r3, [r7, #19]
            break;
 80029b2:	e004      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80029b4:	f7ff feb4 	bl	8002720 <LL_RCC_LSE_IsReady>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d1ee      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff5b 	bl	8002884 <LL_RCC_SetRTCClockSource>
 80029ce:	e004      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
 80029d4:	e001      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fea9 	bl	8002742 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fe9e 	bl	8002742 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fec0 	bl	800279c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fee6 	bl	80027fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fedb 	bl	80027fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fed0 	bl	80027fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fea9 	bl	80027c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fe9e 	bl	80027c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fe93 	bl	80027c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d011      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fe5e 	bl	8002772 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ace:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fea5 	bl	8002830 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d011      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fea3 	bl	800285a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002b2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	58000400 	.word	0x58000400

08002b3c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b4c:	4904      	ldr	r1, [pc, #16]	; (8002b60 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	58000400 	.word	0x58000400

08002b64 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	58000400 	.word	0x58000400

08002b84 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002b90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	58000400 	.word	0x58000400

08002ba4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bae:	619a      	str	r2, [r3, #24]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	58000400 	.word	0x58000400

08002bbc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d101      	bne.n	8002bd0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	58000400 	.word	0x58000400

08002be0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d101      	bne.n	8002bf4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	58000400 	.word	0x58000400

08002c04 <LL_RCC_RF_DisableReset>:
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <LL_RCC_IsRFUnderReset>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c38:	d101      	bne.n	8002c3e <LL_RCC_IsRFUnderReset+0x1a>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_RCC_IsRFUnderReset+0x1c>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <LL_EXTI_EnableIT_32_63+0x24>)
 8002c52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c56:	4905      	ldr	r1, [pc, #20]	; (8002c6c <LL_EXTI_EnableIT_32_63+0x24>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	58000800 	.word	0x58000800

08002c70 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
    return status;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	e052      	b.n	8002d2c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	799b      	ldrb	r3, [r3, #6]
 8002c8e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002c90:	7bbb      	ldrb	r3, [r7, #14]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_SUBGHZ_Init+0x2c>
 8002c96:	7bbb      	ldrb	r3, [r7, #14]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d109      	bne.n	8002cb0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd fe84 	bl	80009b0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002ca8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002cac:	f7ff ffcc 	bl	8002c48 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d126      	bne.n	8002d04 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002cbc:	f7ff ffa2 	bl	8002c04 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <HAL_SUBGHZ_Init+0xc4>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	0cdb      	lsrs	r3, r3, #19
 8002cce:	2264      	movs	r2, #100	; 0x64
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	609a      	str	r2, [r3, #8]
        break;
 8002ce6:	e007      	b.n	8002cf8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002cee:	f7ff ff99 	bl	8002c24 <LL_RCC_IsRFUnderReset>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ee      	bne.n	8002cd6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002cf8:	f7ff ff34 	bl	8002b64 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002cfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d00:	f7ff ff1c 	bl	8002b3c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002d04:	f7ff ff4e 	bl	8002ba4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 faac 	bl	8003270 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	719a      	strb	r2, [r3, #6]

  return status;
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	460b      	mov	r3, r1
 8002d46:	817b      	strh	r3, [r7, #10]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	799b      	ldrb	r3, [r3, #6]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d14a      	bne.n	8002dec <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	795b      	ldrb	r3, [r3, #5]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e045      	b.n	8002dee <HAL_SUBGHZ_WriteRegisters+0xb6>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fb4c 	bl	800340c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002d74:	f7ff ff06 	bl	8002b84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8002d78:	210d      	movs	r1, #13
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa98 	bl	80032b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002d80:	897b      	ldrh	r3, [r7, #10]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	4619      	mov	r1, r3
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fa90 	bl	80032b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002d90:	897b      	ldrh	r3, [r7, #10]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	4619      	mov	r1, r3
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fa8a 	bl	80032b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	82bb      	strh	r3, [r7, #20]
 8002da0:	e00a      	b.n	8002db8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002da2:	8abb      	ldrh	r3, [r7, #20]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4619      	mov	r1, r3
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fa7f 	bl	80032b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002db2:	8abb      	ldrh	r3, [r7, #20]
 8002db4:	3301      	adds	r3, #1
 8002db6:	82bb      	strh	r3, [r7, #20]
 8002db8:	8aba      	ldrh	r2, [r7, #20]
 8002dba:	893b      	ldrh	r3, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d3f0      	bcc.n	8002da2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002dc0:	f7ff fed0 	bl	8002b64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fb45 	bl	8003454 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
 8002dd6:	e001      	b.n	8002ddc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	715a      	strb	r2, [r3, #5]

    return status;
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	e000      	b.n	8002dee <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b088      	sub	sp, #32
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	461a      	mov	r2, r3
 8002e02:	460b      	mov	r3, r1
 8002e04:	817b      	strh	r3, [r7, #10]
 8002e06:	4613      	mov	r3, r2
 8002e08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	799b      	ldrb	r3, [r3, #6]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d14a      	bne.n	8002eae <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	795b      	ldrb	r3, [r3, #5]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e045      	b.n	8002eb0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 faee 	bl	800340c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002e30:	f7ff fea8 	bl	8002b84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8002e34:	211d      	movs	r1, #29
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fa3a 	bl	80032b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002e3c:	897b      	ldrh	r3, [r7, #10]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fa32 	bl	80032b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002e4c:	897b      	ldrh	r3, [r7, #10]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fa2c 	bl	80032b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8002e58:	2100      	movs	r1, #0
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fa28 	bl	80032b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	82fb      	strh	r3, [r7, #22]
 8002e64:	e009      	b.n	8002e7a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002e66:	69b9      	ldr	r1, [r7, #24]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fa77 	bl	800335c <SUBGHZSPI_Receive>
      pData++;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002e74:	8afb      	ldrh	r3, [r7, #22]
 8002e76:	3301      	adds	r3, #1
 8002e78:	82fb      	strh	r3, [r7, #22]
 8002e7a:	8afa      	ldrh	r2, [r7, #22]
 8002e7c:	893b      	ldrh	r3, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d3f1      	bcc.n	8002e66 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002e82:	f7ff fe6f 	bl	8002b64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fae4 	bl	8003454 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e001      	b.n	8002e9e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	715a      	strb	r2, [r3, #5]

    return status;
 8002eaa:	7ffb      	ldrb	r3, [r7, #31]
 8002eac:	e000      	b.n	8002eb0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	72fb      	strb	r3, [r7, #11]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	799b      	ldrb	r3, [r3, #6]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d14a      	bne.n	8002f6c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	795b      	ldrb	r3, [r3, #5]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e045      	b.n	8002f6e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fa8f 	bl	800340c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002eee:	7afb      	ldrb	r3, [r7, #11]
 8002ef0:	2b84      	cmp	r3, #132	; 0x84
 8002ef2:	d002      	beq.n	8002efa <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002ef4:	7afb      	ldrb	r3, [r7, #11]
 8002ef6:	2b94      	cmp	r3, #148	; 0x94
 8002ef8:	d103      	bne.n	8002f02 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	711a      	strb	r2, [r3, #4]
 8002f00:	e002      	b.n	8002f08 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002f08:	f7ff fe3c 	bl	8002b84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002f0c:	7afb      	ldrb	r3, [r7, #11]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f9cd 	bl	80032b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	82bb      	strh	r3, [r7, #20]
 8002f1a:	e00a      	b.n	8002f32 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002f1c:	8abb      	ldrh	r3, [r7, #20]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f9c2 	bl	80032b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002f2c:	8abb      	ldrh	r3, [r7, #20]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	82bb      	strh	r3, [r7, #20]
 8002f32:	8aba      	ldrh	r2, [r7, #20]
 8002f34:	893b      	ldrh	r3, [r7, #8]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3f0      	bcc.n	8002f1c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002f3a:	f7ff fe13 	bl	8002b64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
 8002f40:	2b84      	cmp	r3, #132	; 0x84
 8002f42:	d002      	beq.n	8002f4a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fa85 	bl	8003454 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
 8002f56:	e001      	b.n	8002f5c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	715a      	strb	r2, [r3, #5]

    return status;
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	e000      	b.n	8002f6e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b088      	sub	sp, #32
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	461a      	mov	r2, r3
 8002f82:	460b      	mov	r3, r1
 8002f84:	72fb      	strb	r3, [r7, #11]
 8002f86:	4613      	mov	r3, r2
 8002f88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	799b      	ldrb	r3, [r3, #6]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d13d      	bne.n	8003014 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	795b      	ldrb	r3, [r3, #5]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e038      	b.n	8003016 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fa2e 	bl	800340c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002fb0:	f7ff fde8 	bl	8002b84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002fb4:	7afb      	ldrb	r3, [r7, #11]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f979 	bl	80032b0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f975 	bl	80032b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	82fb      	strh	r3, [r7, #22]
 8002fca:	e009      	b.n	8002fe0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002fcc:	69b9      	ldr	r1, [r7, #24]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f9c4 	bl	800335c <SUBGHZSPI_Receive>
      pData++;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002fda:	8afb      	ldrh	r3, [r7, #22]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	82fb      	strh	r3, [r7, #22]
 8002fe0:	8afa      	ldrh	r2, [r7, #22]
 8002fe2:	893b      	ldrh	r3, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d3f1      	bcc.n	8002fcc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002fe8:	f7ff fdbc 	bl	8002b64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fa31 	bl	8003454 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e001      	b.n	8003004 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	715a      	strb	r2, [r3, #5]

    return status;
 8003010:	7ffb      	ldrb	r3, [r7, #31]
 8003012:	e000      	b.n	8003016 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	461a      	mov	r2, r3
 800302a:	460b      	mov	r3, r1
 800302c:	72fb      	strb	r3, [r7, #11]
 800302e:	4613      	mov	r3, r2
 8003030:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	799b      	ldrb	r3, [r3, #6]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d13e      	bne.n	80030ba <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	795b      	ldrb	r3, [r3, #5]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003044:	2302      	movs	r3, #2
 8003046:	e039      	b.n	80030bc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f9dc 	bl	800340c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003054:	f7ff fd96 	bl	8002b84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003058:	210e      	movs	r1, #14
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f928 	bl	80032b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	4619      	mov	r1, r3
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f923 	bl	80032b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800306a:	2300      	movs	r3, #0
 800306c:	82bb      	strh	r3, [r7, #20]
 800306e:	e00a      	b.n	8003086 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003070:	8abb      	ldrh	r3, [r7, #20]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f918 	bl	80032b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003080:	8abb      	ldrh	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	82bb      	strh	r3, [r7, #20]
 8003086:	8aba      	ldrh	r2, [r7, #20]
 8003088:	893b      	ldrh	r3, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	d3f0      	bcc.n	8003070 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800308e:	f7ff fd69 	bl	8002b64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f9de 	bl	8003454 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
 80030a4:	e001      	b.n	80030aa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	715a      	strb	r2, [r3, #5]

    return status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	e000      	b.n	80030bc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
  }
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	461a      	mov	r2, r3
 80030d0:	460b      	mov	r3, r1
 80030d2:	72fb      	strb	r3, [r7, #11]
 80030d4:	4613      	mov	r3, r2
 80030d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	799b      	ldrb	r3, [r3, #6]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d141      	bne.n	800316a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	795b      	ldrb	r3, [r3, #5]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e03c      	b.n	800316c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f987 	bl	800340c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80030fe:	f7ff fd41 	bl	8002b84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003102:	211e      	movs	r1, #30
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f8d3 	bl	80032b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	4619      	mov	r1, r3
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f8ce 	bl	80032b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003114:	2100      	movs	r1, #0
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f8ca 	bl	80032b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	82fb      	strh	r3, [r7, #22]
 8003120:	e009      	b.n	8003136 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f919 	bl	800335c <SUBGHZSPI_Receive>
      pData++;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	3301      	adds	r3, #1
 800312e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003130:	8afb      	ldrh	r3, [r7, #22]
 8003132:	3301      	adds	r3, #1
 8003134:	82fb      	strh	r3, [r7, #22]
 8003136:	8afa      	ldrh	r2, [r7, #22]
 8003138:	893b      	ldrh	r3, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	d3f1      	bcc.n	8003122 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800313e:	f7ff fd11 	bl	8002b64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f986 	bl	8003454 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e001      	b.n	800315a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	715a      	strb	r2, [r3, #5]

    return status;
 8003166:	7ffb      	ldrb	r3, [r7, #31]
 8003168:	e000      	b.n	800316c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800317c:	2300      	movs	r3, #0
 800317e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003180:	f107 020c 	add.w	r2, r7, #12
 8003184:	2302      	movs	r3, #2
 8003186:	2112      	movs	r1, #18
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff fef4 	bl	8002f76 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800318e:	7b3b      	ldrb	r3, [r7, #12]
 8003190:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	b21a      	sxth	r2, r3
 8003198:	7b7b      	ldrb	r3, [r7, #13]
 800319a:	b21b      	sxth	r3, r3
 800319c:	4313      	orrs	r3, r2
 800319e:	b21b      	sxth	r3, r3
 80031a0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80031a2:	f107 020c 	add.w	r2, r7, #12
 80031a6:	2302      	movs	r3, #2
 80031a8:	2102      	movs	r1, #2
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fe84 	bl	8002eb8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80031b0:	89fb      	ldrh	r3, [r7, #14]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f007 fd02 	bl	800abc4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80031c0:	89fb      	ldrh	r3, [r7, #14]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f007 fd08 	bl	800abe0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80031d0:	89fb      	ldrh	r3, [r7, #14]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f007 fd58 	bl	800ac90 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80031e0:	89fb      	ldrh	r3, [r7, #14]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f007 fd5e 	bl	800acac <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80031f0:	89fb      	ldrh	r3, [r7, #14]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f007 fd64 	bl	800acc8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f007 fd32 	bl	800ac74 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003210:	89fb      	ldrh	r3, [r7, #14]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f007 fcee 	bl	800abfc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003220:	89fb      	ldrh	r3, [r7, #14]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800322a:	89fb      	ldrh	r3, [r7, #14]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003234:	2101      	movs	r1, #1
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f007 fcee 	bl	800ac18 <HAL_SUBGHZ_CADStatusCallback>
 800323c:	e003      	b.n	8003246 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800323e:	2100      	movs	r1, #0
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f007 fce9 	bl	800ac18 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003246:	89fb      	ldrh	r3, [r7, #14]
 8003248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f007 fcff 	bl	800ac54 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003256:	89fb      	ldrh	r3, [r7, #14]
 8003258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f007 fd3f 	bl	800ace4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <SUBGHZSPI_Init+0x3c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <SUBGHZSPI_Init+0x3c>)
 800327e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003282:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003284:	4a09      	ldr	r2, [pc, #36]	; (80032ac <SUBGHZSPI_Init+0x3c>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800328c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <SUBGHZSPI_Init+0x3c>)
 8003290:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003294:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SUBGHZSPI_Init+0x3c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a04      	ldr	r2, [pc, #16]	; (80032ac <SUBGHZSPI_Init+0x3c>)
 800329c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a0:	6013      	str	r3, [r2, #0]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	58010000 	.word	0x58010000

080032b0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80032c0:	4b23      	ldr	r3, [pc, #140]	; (8003350 <SUBGHZSPI_Transmit+0xa0>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	0cdb      	lsrs	r3, r3, #19
 80032ce:	2264      	movs	r2, #100	; 0x64
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	609a      	str	r2, [r3, #8]
      break;
 80032e6:	e008      	b.n	80032fa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <SUBGHZSPI_Transmit+0xa4>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d1ed      	bne.n	80032d6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <SUBGHZSPI_Transmit+0xa8>)
 80032fc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <SUBGHZSPI_Transmit+0xa0>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	0cdb      	lsrs	r3, r3, #19
 8003312:	2264      	movs	r2, #100	; 0x64
 8003314:	fb02 f303 	mul.w	r3, r2, r3
 8003318:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	609a      	str	r2, [r3, #8]
      break;
 800332a:	e008      	b.n	800333e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3b01      	subs	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <SUBGHZSPI_Transmit+0xa4>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d1ed      	bne.n	800331a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <SUBGHZSPI_Transmit+0xa4>)
 8003340:	68db      	ldr	r3, [r3, #12]

  return status;
 8003342:	7dfb      	ldrb	r3, [r7, #23]
}
 8003344:	4618      	mov	r0, r3
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000000 	.word	0x20000000
 8003354:	58010000 	.word	0x58010000
 8003358:	5801000c 	.word	0x5801000c

0800335c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800336a:	4b25      	ldr	r3, [pc, #148]	; (8003400 <SUBGHZSPI_Receive+0xa4>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	0cdb      	lsrs	r3, r3, #19
 8003378:	2264      	movs	r2, #100	; 0x64
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	609a      	str	r2, [r3, #8]
      break;
 8003390:	e008      	b.n	80033a4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3b01      	subs	r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <SUBGHZSPI_Receive+0xa8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d1ed      	bne.n	8003380 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <SUBGHZSPI_Receive+0xac>)
 80033a6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	22ff      	movs	r2, #255	; 0xff
 80033ac:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <SUBGHZSPI_Receive+0xa4>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	0cdb      	lsrs	r3, r3, #19
 80033bc:	2264      	movs	r2, #100	; 0x64
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	609a      	str	r2, [r3, #8]
      break;
 80033d4:	e008      	b.n	80033e8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3b01      	subs	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <SUBGHZSPI_Receive+0xa8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d1ed      	bne.n	80033c4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <SUBGHZSPI_Receive+0xa8>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	701a      	strb	r2, [r3, #0]

  return status;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000000 	.word	0x20000000
 8003404:	58010000 	.word	0x58010000
 8003408:	5801000c 	.word	0x5801000c

0800340c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	791b      	ldrb	r3, [r3, #4]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d111      	bne.n	8003440 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <SUBGHZ_CheckDeviceReady+0x44>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800342c:	f7ff fbaa 	bl	8002b84 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3b01      	subs	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f9      	bne.n	8003430 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800343c:	f7ff fb92 	bl	8002b64 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f807 	bl	8003454 <SUBGHZ_WaitOnBusy>
 8003446:	4603      	mov	r3, r0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000000 	.word	0x20000000

08003454 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <SUBGHZ_WaitOnBusy+0x58>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	0d1b      	lsrs	r3, r3, #20
 800346e:	2264      	movs	r2, #100	; 0x64
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003476:	f7ff fbb3 	bl	8002be0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800347a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	609a      	str	r2, [r3, #8]
      break;
 800348c:	e009      	b.n	80034a2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b01      	subs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003494:	f7ff fb92 	bl	8002bbc <LL_PWR_IsActiveFlag_RFBUSYS>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d0e9      	beq.n	8003476 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000000 	.word	0x20000000

080034b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e049      	b.n	8003556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f841 	bl	800355e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f000 f9ce 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d001      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e036      	b.n	80035f6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a16      	ldr	r2, [pc, #88]	; (8003600 <HAL_TIM_Base_Start_IT+0x90>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x44>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b2:	d115      	bne.n	80035e0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_TIM_Base_Start_IT+0x94>)
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d015      	beq.n	80035f2 <HAL_TIM_Base_Start_IT+0x82>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d011      	beq.n	80035f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035de:	e008      	b.n	80035f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e000      	b.n	80035f4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	40012c00 	.word	0x40012c00
 8003604:	00010007 	.word	0x00010007

08003608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b02      	cmp	r3, #2
 800361c:	d122      	bne.n	8003664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b02      	cmp	r3, #2
 800362a:	d11b      	bne.n	8003664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0202 	mvn.w	r2, #2
 8003634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f904 	bl	8003858 <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8f7 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f906 	bl	800386a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0204 	mvn.w	r2, #4
 8003688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8da 	bl	8003858 <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8cd 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8dc 	bl	800386a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0208 	mvn.w	r2, #8
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2204      	movs	r2, #4
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8b0 	bl	8003858 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8a3 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f8b2 	bl	800386a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b10      	cmp	r3, #16
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b10      	cmp	r3, #16
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0210 	mvn.w	r2, #16
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2208      	movs	r2, #8
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f886 	bl	8003858 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f879 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f888 	bl	800386a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d10e      	bne.n	800378c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0201 	mvn.w	r2, #1
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd f8ac 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d10e      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b80      	cmp	r3, #128	; 0x80
 80037a6:	d107      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8d7 	bl	8003966 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c6:	d10e      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d107      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8c9 	bl	8003978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d10e      	bne.n	8003812 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d107      	bne.n	8003812 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800380a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f835 	bl	800387c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b20      	cmp	r3, #32
 800381e:	d10e      	bne.n	800383e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b20      	cmp	r3, #32
 800382c:	d107      	bne.n	800383e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0220 	mvn.w	r2, #32
 8003836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f88b 	bl	8003954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
	...

08003890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a29      	ldr	r2, [pc, #164]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x20>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a20      	ldr	r2, [pc, #128]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0x52>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0x52>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <TIM_Base_SetConfig+0xbc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0x52>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <TIM_Base_SetConfig+0xb8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <TIM_Base_SetConfig+0xa0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <TIM_Base_SetConfig+0xbc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_Base_SetConfig+0xa0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a09      	ldr	r2, [pc, #36]	; (8003950 <TIM_Base_SetConfig+0xc0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	615a      	str	r2, [r3, #20]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40014400 	.word	0x40014400
 8003950:	40014800 	.word	0x40014800

08003954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <LL_RCC_GetUSARTClockSource>:
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003996:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	401a      	ands	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	4313      	orrs	r3, r2
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <LL_RCC_GetLPUARTClockSource>:
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4013      	ands	r3, r2
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e042      	b.n	8003a64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fc fff1 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2224      	movs	r2, #36	; 0x24
 80039fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb6e 	bl	80040f0 <UART_SetConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e022      	b.n	8003a64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fdd6 	bl	80045d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fe5c 	bl	800471a <UART_CheckIdleState>
 8003a62:	4603      	mov	r3, r0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b0ba      	sub	sp, #232	; 0xe8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a96:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d015      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 82e3 	beq.w	800409c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
      }
      return;
 8003ade:	e2dd      	b.n	800409c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8123 	beq.w	8003d30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003aea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003aee:	4b8d      	ldr	r3, [pc, #564]	; (8003d24 <HAL_UART_IRQHandler+0x2b8>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003af6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003afa:	4b8b      	ldr	r3, [pc, #556]	; (8003d28 <HAL_UART_IRQHandler+0x2bc>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8116 	beq.w	8003d30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d011      	beq.n	8003b34 <HAL_UART_IRQHandler+0xc8>
 8003b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d011      	beq.n	8003b64 <HAL_UART_IRQHandler+0xf8>
 8003b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2202      	movs	r2, #2
 8003b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f043 0204 	orr.w	r2, r3, #4
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d011      	beq.n	8003b94 <HAL_UART_IRQHandler+0x128>
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2204      	movs	r2, #4
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f043 0202 	orr.w	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d017      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003bac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003bb0:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <HAL_UART_IRQHandler+0x2b8>)
 8003bb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f043 0208 	orr.w	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d012      	beq.n	8003c02 <HAL_UART_IRQHandler+0x196>
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00c      	beq.n	8003c02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8249 	beq.w	80040a0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d005      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d054      	beq.n	8003d10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fe6d 	bl	8004946 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d146      	bne.n	8003d08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d9      	bne.n	8003c7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d017      	beq.n	8003d00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_UART_IRQHandler+0x2c0>)
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd f9c6 	bl	8001072 <HAL_DMA_Abort_IT>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d019      	beq.n	8003d20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfe:	e00f      	b.n	8003d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f9e0 	bl	80040c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d06:	e00b      	b.n	8003d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f9dc 	bl	80040c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0e:	e007      	b.n	8003d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f9d8 	bl	80040c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003d1e:	e1bf      	b.n	80040a0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	bf00      	nop
    return;
 8003d22:	e1bd      	b.n	80040a0 <HAL_UART_IRQHandler+0x634>
 8003d24:	10000001 	.word	0x10000001
 8003d28:	04000120 	.word	0x04000120
 8003d2c:	08004a11 	.word	0x08004a11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f040 8153 	bne.w	8003fe0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 814c 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8145 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	f040 80bb 	bne.w	8003ee4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 818f 	beq.w	80040a4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d90:	429a      	cmp	r2, r3
 8003d92:	f080 8187 	bcs.w	80040a4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 8087 	bne.w	8003ec2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003de2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1da      	bne.n	8003db4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3308      	adds	r3, #8
 8003e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e1      	bne.n	8003dfe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e3      	bne.n	8003e3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e90:	f023 0310 	bic.w	r3, r3, #16
 8003e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ea4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e4      	bne.n	8003e80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd f87a 	bl	8000fb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8fb 	bl	80040d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ee2:	e0df      	b.n	80040a4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80d1 	beq.w	80040a8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003f06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80cc 	beq.w	80040a8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f32:	647b      	str	r3, [r7, #68]	; 0x44
 8003f34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e4      	bne.n	8003f10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	623b      	str	r3, [r7, #32]
   return(result);
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e1      	bne.n	8003f46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0310 	bic.w	r3, r3, #16
 8003faa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e4      	bne.n	8003f96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f87d 	bl	80040d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fde:	e063      	b.n	80040a8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00e      	beq.n	800400a <HAL_UART_IRQHandler+0x59e>
 8003fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fd45 	bl	8004a92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004008:	e051      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d014      	beq.n	8004040 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004032:	2b00      	cmp	r3, #0
 8004034:	d03a      	beq.n	80040ac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
    }
    return;
 800403e:	e035      	b.n	80040ac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_UART_IRQHandler+0x5f4>
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fcef 	bl	8004a3c <UART_EndTransmit_IT>
    return;
 800405e:	e026      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d009      	beq.n	8004080 <HAL_UART_IRQHandler+0x614>
 800406c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fd1c 	bl	8004ab6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800407e:	e016      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <HAL_UART_IRQHandler+0x642>
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004090:	2b00      	cmp	r3, #0
 8004092:	da0c      	bge.n	80040ae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fd05 	bl	8004aa4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800409a:	e008      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
      return;
 800409c:	bf00      	nop
 800409e:	e006      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
    return;
 80040a0:	bf00      	nop
 80040a2:	e004      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
      return;
 80040a4:	bf00      	nop
 80040a6:	e002      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
      return;
 80040a8:	bf00      	nop
 80040aa:	e000      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
    return;
 80040ac:	bf00      	nop
  }
}
 80040ae:	37e8      	adds	r7, #232	; 0xe8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
	...

080040f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f4:	b08c      	sub	sp, #48	; 0x30
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	431a      	orrs	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	431a      	orrs	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4313      	orrs	r3, r2
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b94      	ldr	r3, [pc, #592]	; (8004370 <UART_SetConfig+0x280>)
 8004120:	4013      	ands	r3, r2
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004128:	430b      	orrs	r3, r1
 800412a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a89      	ldr	r2, [pc, #548]	; (8004374 <UART_SetConfig+0x284>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004158:	4313      	orrs	r3, r2
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004166:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004170:	430b      	orrs	r3, r1
 8004172:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	f023 010f 	bic.w	r1, r3, #15
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a7a      	ldr	r2, [pc, #488]	; (8004378 <UART_SetConfig+0x288>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d127      	bne.n	80041e4 <UART_SetConfig+0xf4>
 8004194:	2003      	movs	r0, #3
 8004196:	f7ff fbf8 	bl	800398a <LL_RCC_GetUSARTClockSource>
 800419a:	4603      	mov	r3, r0
 800419c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d81b      	bhi.n	80041dc <UART_SetConfig+0xec>
 80041a4:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0xbc>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041bd 	.word	0x080041bd
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041d5 	.word	0x080041d5
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c2:	e080      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80041c4:	2302      	movs	r3, #2
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ca:	e07c      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d2:	e078      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80041d4:	2308      	movs	r3, #8
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041da:	e074      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80041dc:	2310      	movs	r3, #16
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e2:	e070      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a64      	ldr	r2, [pc, #400]	; (800437c <UART_SetConfig+0x28c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d138      	bne.n	8004260 <UART_SetConfig+0x170>
 80041ee:	200c      	movs	r0, #12
 80041f0:	f7ff fbcb 	bl	800398a <LL_RCC_GetUSARTClockSource>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d82c      	bhi.n	8004258 <UART_SetConfig+0x168>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <UART_SetConfig+0x114>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004239 	.word	0x08004239
 8004208:	08004259 	.word	0x08004259
 800420c:	08004259 	.word	0x08004259
 8004210:	08004259 	.word	0x08004259
 8004214:	08004249 	.word	0x08004249
 8004218:	08004259 	.word	0x08004259
 800421c:	08004259 	.word	0x08004259
 8004220:	08004259 	.word	0x08004259
 8004224:	08004241 	.word	0x08004241
 8004228:	08004259 	.word	0x08004259
 800422c:	08004259 	.word	0x08004259
 8004230:	08004259 	.word	0x08004259
 8004234:	08004251 	.word	0x08004251
 8004238:	2300      	movs	r3, #0
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423e:	e042      	b.n	80042c6 <UART_SetConfig+0x1d6>
 8004240:	2302      	movs	r3, #2
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004246:	e03e      	b.n	80042c6 <UART_SetConfig+0x1d6>
 8004248:	2304      	movs	r3, #4
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424e:	e03a      	b.n	80042c6 <UART_SetConfig+0x1d6>
 8004250:	2308      	movs	r3, #8
 8004252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004256:	e036      	b.n	80042c6 <UART_SetConfig+0x1d6>
 8004258:	2310      	movs	r3, #16
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425e:	e032      	b.n	80042c6 <UART_SetConfig+0x1d6>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a43      	ldr	r2, [pc, #268]	; (8004374 <UART_SetConfig+0x284>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12a      	bne.n	80042c0 <UART_SetConfig+0x1d0>
 800426a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800426e:	f7ff fb9e 	bl	80039ae <LL_RCC_GetLPUARTClockSource>
 8004272:	4603      	mov	r3, r0
 8004274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004278:	d01a      	beq.n	80042b0 <UART_SetConfig+0x1c0>
 800427a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800427e:	d81b      	bhi.n	80042b8 <UART_SetConfig+0x1c8>
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004284:	d00c      	beq.n	80042a0 <UART_SetConfig+0x1b0>
 8004286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428a:	d815      	bhi.n	80042b8 <UART_SetConfig+0x1c8>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <UART_SetConfig+0x1a8>
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004294:	d008      	beq.n	80042a8 <UART_SetConfig+0x1b8>
 8004296:	e00f      	b.n	80042b8 <UART_SetConfig+0x1c8>
 8004298:	2300      	movs	r3, #0
 800429a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800429e:	e012      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80042a0:	2302      	movs	r3, #2
 80042a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042a6:	e00e      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ae:	e00a      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042b6:	e006      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042be:	e002      	b.n	80042c6 <UART_SetConfig+0x1d6>
 80042c0:	2310      	movs	r3, #16
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <UART_SetConfig+0x284>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	f040 80a4 	bne.w	800441a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d823      	bhi.n	8004322 <UART_SetConfig+0x232>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0x1f0>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004305 	.word	0x08004305
 80042e4:	08004323 	.word	0x08004323
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	08004323 	.word	0x08004323
 80042f0:	08004313 	.word	0x08004313
 80042f4:	08004323 	.word	0x08004323
 80042f8:	08004323 	.word	0x08004323
 80042fc:	08004323 	.word	0x08004323
 8004300:	0800431b 	.word	0x0800431b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe f8ee 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8004308:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800430a:	e010      	b.n	800432e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800430c:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <UART_SetConfig+0x290>)
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004310:	e00d      	b.n	800432e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004312:	f7fe f833 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8004316:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004318:	e009      	b.n	800432e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004320:	e005      	b.n	800432e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800432c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8137 	beq.w	80045a4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	4a12      	ldr	r2, [pc, #72]	; (8004384 <UART_SetConfig+0x294>)
 800433c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004340:	461a      	mov	r2, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	fbb3 f3f2 	udiv	r3, r3, r2
 8004348:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4413      	add	r3, r2
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	429a      	cmp	r2, r3
 8004358:	d305      	bcc.n	8004366 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	429a      	cmp	r2, r3
 8004364:	d910      	bls.n	8004388 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800436c:	e11a      	b.n	80045a4 <UART_SetConfig+0x4b4>
 800436e:	bf00      	nop
 8004370:	cfff69f3 	.word	0xcfff69f3
 8004374:	40008000 	.word	0x40008000
 8004378:	40013800 	.word	0x40013800
 800437c:	40004400 	.word	0x40004400
 8004380:	00f42400 	.word	0x00f42400
 8004384:	0800bc10 	.word	0x0800bc10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	2200      	movs	r2, #0
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	60fa      	str	r2, [r7, #12]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	4a8e      	ldr	r2, [pc, #568]	; (80045d0 <UART_SetConfig+0x4e0>)
 8004396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800439a:	b29b      	uxth	r3, r3
 800439c:	2200      	movs	r2, #0
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043aa:	f7fb fee9 	bl	8000180 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	020b      	lsls	r3, r1, #8
 80043c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043c4:	0202      	lsls	r2, r0, #8
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	6849      	ldr	r1, [r1, #4]
 80043ca:	0849      	lsrs	r1, r1, #1
 80043cc:	2000      	movs	r0, #0
 80043ce:	460c      	mov	r4, r1
 80043d0:	4605      	mov	r5, r0
 80043d2:	eb12 0804 	adds.w	r8, r2, r4
 80043d6:	eb43 0905 	adc.w	r9, r3, r5
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	469a      	mov	sl, r3
 80043e2:	4693      	mov	fp, r2
 80043e4:	4652      	mov	r2, sl
 80043e6:	465b      	mov	r3, fp
 80043e8:	4640      	mov	r0, r8
 80043ea:	4649      	mov	r1, r9
 80043ec:	f7fb fec8 	bl	8000180 <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4613      	mov	r3, r2
 80043f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043fe:	d308      	bcc.n	8004412 <UART_SetConfig+0x322>
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004406:	d204      	bcs.n	8004412 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	60da      	str	r2, [r3, #12]
 8004410:	e0c8      	b.n	80045a4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004418:	e0c4      	b.n	80045a4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004422:	d167      	bne.n	80044f4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004428:	2b08      	cmp	r3, #8
 800442a:	d828      	bhi.n	800447e <UART_SetConfig+0x38e>
 800442c:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <UART_SetConfig+0x344>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004459 	.word	0x08004459
 8004438:	08004461 	.word	0x08004461
 800443c:	08004469 	.word	0x08004469
 8004440:	0800447f 	.word	0x0800447f
 8004444:	0800446f 	.word	0x0800446f
 8004448:	0800447f 	.word	0x0800447f
 800444c:	0800447f 	.word	0x0800447f
 8004450:	0800447f 	.word	0x0800447f
 8004454:	08004477 	.word	0x08004477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004458:	f7fe f844 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 800445c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800445e:	e014      	b.n	800448a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004460:	f7fe f852 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8004464:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004466:	e010      	b.n	800448a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004468:	4b5a      	ldr	r3, [pc, #360]	; (80045d4 <UART_SetConfig+0x4e4>)
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800446c:	e00d      	b.n	800448a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446e:	f7fd ff85 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8004472:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004474:	e009      	b.n	800448a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800447c:	e005      	b.n	800448a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8089 	beq.w	80045a4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	4a4e      	ldr	r2, [pc, #312]	; (80045d0 <UART_SetConfig+0x4e0>)
 8004498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800449c:	461a      	mov	r2, r3
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044a4:	005a      	lsls	r2, r3, #1
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	441a      	add	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	d916      	bls.n	80044ec <UART_SetConfig+0x3fc>
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c4:	d212      	bcs.n	80044ec <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f023 030f 	bic.w	r3, r3, #15
 80044ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	b29a      	uxth	r2, r3
 80044dc:	8bfb      	ldrh	r3, [r7, #30]
 80044de:	4313      	orrs	r3, r2
 80044e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	8bfa      	ldrh	r2, [r7, #30]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	e05b      	b.n	80045a4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044f2:	e057      	b.n	80045a4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d828      	bhi.n	800454e <UART_SetConfig+0x45e>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0x414>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004529 	.word	0x08004529
 8004508:	08004531 	.word	0x08004531
 800450c:	08004539 	.word	0x08004539
 8004510:	0800454f 	.word	0x0800454f
 8004514:	0800453f 	.word	0x0800453f
 8004518:	0800454f 	.word	0x0800454f
 800451c:	0800454f 	.word	0x0800454f
 8004520:	0800454f 	.word	0x0800454f
 8004524:	08004547 	.word	0x08004547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7fd ffdc 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 800452c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800452e:	e014      	b.n	800455a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004530:	f7fd ffea 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8004534:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004536:	e010      	b.n	800455a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004538:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <UART_SetConfig+0x4e4>)
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800453c:	e00d      	b.n	800455a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453e:	f7fd ff1d 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8004542:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004544:	e009      	b.n	800455a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800454c:	e005      	b.n	800455a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004558:	bf00      	nop
    }

    if (pclk != 0U)
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d021      	beq.n	80045a4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <UART_SetConfig+0x4e0>)
 8004566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800456a:	461a      	mov	r2, r3
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	441a      	add	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	d909      	bls.n	800459e <UART_SetConfig+0x4ae>
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004590:	d205      	bcs.n	800459e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	b29a      	uxth	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60da      	str	r2, [r3, #12]
 800459c:	e002      	b.n	80045a4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80045c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3730      	adds	r7, #48	; 0x30
 80045c8:	46bd      	mov	sp, r7
 80045ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ce:	bf00      	nop
 80045d0:	0800bc10 	.word	0x0800bc10
 80045d4:	00f42400 	.word	0x00f42400

080045d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01a      	beq.n	80046ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d6:	d10a      	bne.n	80046ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b086      	sub	sp, #24
 800471e:	af02      	add	r7, sp, #8
 8004720:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800472a:	f7fc fa6d 	bl	8000c08 <HAL_GetTick>
 800472e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b08      	cmp	r3, #8
 800473c:	d10e      	bne.n	800475c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800473e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f832 	bl	80047b6 <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e028      	b.n	80047ae <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d10e      	bne.n	8004788 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800476a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f81c 	bl	80047b6 <UART_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e012      	b.n	80047ae <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b09c      	sub	sp, #112	; 0x70
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c6:	e0a9      	b.n	800491c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	f000 80a5 	beq.w	800491c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d2:	f7fc fa19 	bl	8000c08 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80047e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d140      	bne.n	800486a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047fc:	667b      	str	r3, [r7, #100]	; 0x64
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004808:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800480c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e6      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3308      	adds	r3, #8
 8004820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	663b      	str	r3, [r7, #96]	; 0x60
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800483a:	64ba      	str	r2, [r7, #72]	; 0x48
 800483c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e5      	bne.n	800481a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e069      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d051      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004886:	d149      	bne.n	800491c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004890:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
 80048b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e6      	bne.n	8004892 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	613b      	str	r3, [r7, #16]
   return(result);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	66bb      	str	r3, [r7, #104]	; 0x68
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048e4:	623a      	str	r2, [r7, #32]
 80048e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	69f9      	ldr	r1, [r7, #28]
 80048ea:	6a3a      	ldr	r2, [r7, #32]
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e5      	bne.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e010      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69da      	ldr	r2, [r3, #28]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	429a      	cmp	r2, r3
 8004938:	f43f af46 	beq.w	80047c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3770      	adds	r7, #112	; 0x70
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004946:	b480      	push	{r7}
 8004948:	b095      	sub	sp, #84	; 0x54
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496c:	643b      	str	r3, [r7, #64]	; 0x40
 800496e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e6      	bne.n	800494e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e3      	bne.n	8004980 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d118      	bne.n	80049f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6979      	ldr	r1, [r7, #20]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	613b      	str	r3, [r7, #16]
   return(result);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e6      	bne.n	80049c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004a06:	bf00      	nop
 8004a08:	3754      	adds	r7, #84	; 0x54
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff fb49 	bl	80040c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6979      	ldr	r1, [r7, #20]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e6      	bne.n	8004a44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fb15 	bl	80040b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8a:	bf00      	nop
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_UARTEx_DisableFifoMode+0x16>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e027      	b.n	8004b2e <HAL_UARTEx_DisableFifoMode+0x66>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2224      	movs	r2, #36	; 0x24
 8004aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr

08004b38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e02d      	b.n	8004bac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f84f 	bl	8004c30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e02d      	b.n	8004c28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2224      	movs	r2, #36	; 0x24
 8004bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f811 	bl	8004c30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d108      	bne.n	8004c52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c50:	e031      	b.n	8004cb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c52:	2308      	movs	r3, #8
 8004c54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c56:	2308      	movs	r3, #8
 8004c58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	0e5b      	lsrs	r3, r3, #25
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	0f5b      	lsrs	r3, r3, #29
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c7a:	7bbb      	ldrb	r3, [r7, #14]
 8004c7c:	7b3a      	ldrb	r2, [r7, #12]
 8004c7e:	4910      	ldr	r1, [pc, #64]	; (8004cc0 <UARTEx_SetNbDataToProcess+0x90>)
 8004c80:	5c8a      	ldrb	r2, [r1, r2]
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c86:	7b3a      	ldrb	r2, [r7, #12]
 8004c88:	490e      	ldr	r1, [pc, #56]	; (8004cc4 <UARTEx_SetNbDataToProcess+0x94>)
 8004c8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	7b7a      	ldrb	r2, [r7, #13]
 8004c9c:	4908      	ldr	r1, [pc, #32]	; (8004cc0 <UARTEx_SetNbDataToProcess+0x90>)
 8004c9e:	5c8a      	ldrb	r2, [r1, r2]
 8004ca0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ca4:	7b7a      	ldrb	r2, [r7, #13]
 8004ca6:	4907      	ldr	r1, [pc, #28]	; (8004cc4 <UARTEx_SetNbDataToProcess+0x94>)
 8004ca8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004caa:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr
 8004cc0:	0800bc28 	.word	0x0800bc28
 8004cc4:	0800bc30 	.word	0x0800bc30

08004cc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004ccc:	bf00      	nop
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cda:	f3ef 8305 	mrs	r3, IPSR
 8004cde:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cea:	607b      	str	r3, [r7, #4]
  return(result);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <osKernelInitialize+0x3a>
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <osKernelInitialize+0x60>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d103      	bne.n	8004d0e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004d06:	f06f 0305 	mvn.w	r3, #5
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e00c      	b.n	8004d28 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <osKernelInitialize+0x60>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <osKernelInitialize+0x60>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e002      	b.n	8004d28 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d28:	68fb      	ldr	r3, [r7, #12]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	20000190 	.word	0x20000190

08004d38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d3e:	f3ef 8305 	mrs	r3, IPSR
 8004d42:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4e:	607b      	str	r3, [r7, #4]
  return(result);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d105      	bne.n	8004d62 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d56:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <osKernelStart+0x3a>
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <osKernelStart+0x68>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d103      	bne.n	8004d72 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004d6a:	f06f 0305 	mvn.w	r3, #5
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e010      	b.n	8004d94 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <osKernelStart+0x68>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d109      	bne.n	8004d8e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d7a:	f7ff ffa5 	bl	8004cc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <osKernelStart+0x68>)
 8004d80:	2202      	movs	r2, #2
 8004d82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d84:	f001 fac2 	bl	800630c <vTaskStartScheduler>
      stat = osOK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	e002      	b.n	8004d94 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d94:	68fb      	ldr	r3, [r7, #12]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000190 	.word	0x20000190

08004da4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b090      	sub	sp, #64	; 0x40
 8004da8:	af04      	add	r7, sp, #16
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db4:	f3ef 8305 	mrs	r3, IPSR
 8004db8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004dba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 808f 	bne.w	8004ee0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d105      	bne.n	8004dda <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dce:	f3ef 8311 	mrs	r3, BASEPRI
 8004dd2:	617b      	str	r3, [r7, #20]
  return(result);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <osThreadNew+0x3e>
 8004dda:	4b44      	ldr	r3, [pc, #272]	; (8004eec <osThreadNew+0x148>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d07e      	beq.n	8004ee0 <osThreadNew+0x13c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d07b      	beq.n	8004ee0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004dec:	2318      	movs	r3, #24
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004df4:	f04f 33ff 	mov.w	r3, #4294967295
 8004df8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d045      	beq.n	8004e8c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <osThreadNew+0x6a>
        name = attr->name;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <osThreadNew+0x90>
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	2b38      	cmp	r3, #56	; 0x38
 8004e26:	d805      	bhi.n	8004e34 <osThreadNew+0x90>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <osThreadNew+0x94>
        return (NULL);
 8004e34:	2300      	movs	r3, #0
 8004e36:	e054      	b.n	8004ee2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	089b      	lsrs	r3, r3, #2
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <osThreadNew+0xca>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2ba7      	cmp	r3, #167	; 0xa7
 8004e56:	d90a      	bls.n	8004e6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <osThreadNew+0xca>
        mem = 1;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	623b      	str	r3, [r7, #32]
 8004e6c:	e010      	b.n	8004e90 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10c      	bne.n	8004e90 <osThreadNew+0xec>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d108      	bne.n	8004e90 <osThreadNew+0xec>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d104      	bne.n	8004e90 <osThreadNew+0xec>
          mem = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	623b      	str	r3, [r7, #32]
 8004e8a:	e001      	b.n	8004e90 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d110      	bne.n	8004eb8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e9e:	9202      	str	r2, [sp, #8]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f001 f841 	bl	8005f34 <xTaskCreateStatic>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	e013      	b.n	8004ee0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d110      	bne.n	8004ee0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	f107 0310 	add.w	r3, r7, #16
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f001 f88c 	bl	8005fee <xTaskCreate>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d001      	beq.n	8004ee0 <osThreadNew+0x13c>
          hTask = NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ee0:	693b      	ldr	r3, [r7, #16]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3730      	adds	r7, #48	; 0x30
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000190 	.word	0x20000190

08004ef0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ef8:	f3ef 8305 	mrs	r3, IPSR
 8004efc:	613b      	str	r3, [r7, #16]
  return(result);
 8004efe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10f      	bne.n	8004f24 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f04:	f3ef 8310 	mrs	r3, PRIMASK
 8004f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d105      	bne.n	8004f1c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f10:	f3ef 8311 	mrs	r3, BASEPRI
 8004f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <osDelay+0x3c>
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <osDelay+0x58>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d103      	bne.n	8004f2c <osDelay+0x3c>
    stat = osErrorISR;
 8004f24:	f06f 0305 	mvn.w	r3, #5
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e007      	b.n	8004f3c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 f9b4 	bl	80062a4 <vTaskDelay>
    }
  }

  return (stat);
 8004f3c:	697b      	ldr	r3, [r7, #20]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000190 	.word	0x20000190

08004f4c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08c      	sub	sp, #48	; 0x30
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f5c:	f3ef 8305 	mrs	r3, IPSR
 8004f60:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f62:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d16f      	bne.n	8005048 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f68:	f3ef 8310 	mrs	r3, PRIMASK
 8004f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f74:	f3ef 8311 	mrs	r3, BASEPRI
 8004f78:	613b      	str	r3, [r7, #16]
  return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <osMessageQueueNew+0x3c>
 8004f80:	4b34      	ldr	r3, [pc, #208]	; (8005054 <osMessageQueueNew+0x108>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d05f      	beq.n	8005048 <osMessageQueueNew+0xfc>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d05c      	beq.n	8005048 <osMessageQueueNew+0xfc>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d059      	beq.n	8005048 <osMessageQueueNew+0xfc>
    mem = -1;
 8004f94:	f04f 33ff 	mov.w	r3, #4294967295
 8004f98:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d029      	beq.n	8004ff4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d012      	beq.n	8004fce <osMessageQueueNew+0x82>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b4f      	cmp	r3, #79	; 0x4f
 8004fae:	d90e      	bls.n	8004fce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	695a      	ldr	r2, [r3, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d302      	bcc.n	8004fce <osMessageQueueNew+0x82>
        mem = 1;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	e014      	b.n	8004ff8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d110      	bne.n	8004ff8 <osMessageQueueNew+0xac>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10c      	bne.n	8004ff8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d104      	bne.n	8004ff8 <osMessageQueueNew+0xac>
          mem = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	e001      	b.n	8004ff8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d10b      	bne.n	8005016 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2100      	movs	r1, #0
 8005008:	9100      	str	r1, [sp, #0]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fa53 	bl	80054b8 <xQueueGenericCreateStatic>
 8005012:	6278      	str	r0, [r7, #36]	; 0x24
 8005014:	e008      	b.n	8005028 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d105      	bne.n	8005028 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800501c:	2200      	movs	r2, #0
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fac1 	bl	80055a8 <xQueueGenericCreate>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00c      	beq.n	8005048 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <osMessageQueueNew+0xf0>
        name = attr->name;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	e001      	b.n	8005040 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005040:	69f9      	ldr	r1, [r7, #28]
 8005042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005044:	f000 ff1a 	bl	8005e7c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800504a:	4618      	mov	r0, r3
 800504c:	3728      	adds	r7, #40	; 0x28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000190 	.word	0x20000190

08005058 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005070:	f3ef 8305 	mrs	r3, IPSR
 8005074:	61fb      	str	r3, [r7, #28]
  return(result);
 8005076:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10f      	bne.n	800509c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507c:	f3ef 8310 	mrs	r3, PRIMASK
 8005080:	61bb      	str	r3, [r7, #24]
  return(result);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005088:	f3ef 8311 	mrs	r3, BASEPRI
 800508c:	617b      	str	r3, [r7, #20]
  return(result);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d02c      	beq.n	80050ee <osMessageQueuePut+0x96>
 8005094:	4b28      	ldr	r3, [pc, #160]	; (8005138 <osMessageQueuePut+0xe0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d128      	bne.n	80050ee <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <osMessageQueuePut+0x56>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <osMessageQueuePut+0x56>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80050ae:	f06f 0303 	mvn.w	r3, #3
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050b4:	e039      	b.n	800512a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80050ba:	f107 0210 	add.w	r2, r7, #16
 80050be:	2300      	movs	r3, #0
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	6a38      	ldr	r0, [r7, #32]
 80050c4:	f000 fbd2 	bl	800586c <xQueueGenericSendFromISR>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d003      	beq.n	80050d6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80050ce:	f06f 0302 	mvn.w	r3, #2
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050d4:	e029      	b.n	800512a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d026      	beq.n	800512a <osMessageQueuePut+0xd2>
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <osMessageQueuePut+0xe4>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050ec:	e01d      	b.n	800512a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <osMessageQueuePut+0xa2>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80050fa:	f06f 0303 	mvn.w	r3, #3
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	e014      	b.n	800512c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005102:	2300      	movs	r3, #0
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	6a38      	ldr	r0, [r7, #32]
 800510a:	f000 fab1 	bl	8005670 <xQueueGenericSend>
 800510e:	4603      	mov	r3, r0
 8005110:	2b01      	cmp	r3, #1
 8005112:	d00b      	beq.n	800512c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800511a:	f06f 0301 	mvn.w	r3, #1
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
 8005120:	e004      	b.n	800512c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005122:	f06f 0302 	mvn.w	r3, #2
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
 8005128:	e000      	b.n	800512c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800512a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800512e:	4618      	mov	r0, r3
 8005130:	3728      	adds	r7, #40	; 0x28
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000190 	.word	0x20000190
 800513c:	e000ed04 	.word	0xe000ed04

08005140 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005156:	f3ef 8305 	mrs	r3, IPSR
 800515a:	61fb      	str	r3, [r7, #28]
  return(result);
 800515c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10f      	bne.n	8005182 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005162:	f3ef 8310 	mrs	r3, PRIMASK
 8005166:	61bb      	str	r3, [r7, #24]
  return(result);
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d105      	bne.n	800517a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800516e:	f3ef 8311 	mrs	r3, BASEPRI
 8005172:	617b      	str	r3, [r7, #20]
  return(result);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d02c      	beq.n	80051d4 <osMessageQueueGet+0x94>
 800517a:	4b28      	ldr	r3, [pc, #160]	; (800521c <osMessageQueueGet+0xdc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d128      	bne.n	80051d4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <osMessageQueueGet+0x54>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <osMessageQueueGet+0x54>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005194:	f06f 0303 	mvn.w	r3, #3
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800519a:	e038      	b.n	800520e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80051a0:	f107 0310 	add.w	r3, r7, #16
 80051a4:	461a      	mov	r2, r3
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	6a38      	ldr	r0, [r7, #32]
 80051aa:	f000 fcd7 	bl	8005b5c <xQueueReceiveFromISR>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d003      	beq.n	80051bc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80051b4:	f06f 0302 	mvn.w	r3, #2
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051ba:	e028      	b.n	800520e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d025      	beq.n	800520e <osMessageQueueGet+0xce>
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <osMessageQueueGet+0xe0>)
 80051c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051d2:	e01c      	b.n	800520e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <osMessageQueueGet+0xa0>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80051e0:	f06f 0303 	mvn.w	r3, #3
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	e013      	b.n	8005210 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	6a38      	ldr	r0, [r7, #32]
 80051ee:	f000 fbd5 	bl	800599c <xQueueReceive>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d00b      	beq.n	8005210 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80051fe:	f06f 0301 	mvn.w	r3, #1
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
 8005204:	e004      	b.n	8005210 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005206:	f06f 0302 	mvn.w	r3, #2
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
 800520c:	e000      	b.n	8005210 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800520e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005212:	4618      	mov	r0, r3
 8005214:	3728      	adds	r7, #40	; 0x28
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000190 	.word	0x20000190
 8005220:	e000ed04 	.word	0xe000ed04

08005224 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a06      	ldr	r2, [pc, #24]	; (800524c <vApplicationGetIdleTaskMemory+0x28>)
 8005234:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4a05      	ldr	r2, [pc, #20]	; (8005250 <vApplicationGetIdleTaskMemory+0x2c>)
 800523a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2280      	movs	r2, #128	; 0x80
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	20000194 	.word	0x20000194
 8005250:	2000023c 	.word	0x2000023c

08005254 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a07      	ldr	r2, [pc, #28]	; (8005280 <vApplicationGetTimerTaskMemory+0x2c>)
 8005264:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4a06      	ldr	r2, [pc, #24]	; (8005284 <vApplicationGetTimerTaskMemory+0x30>)
 800526a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2000043c 	.word	0x2000043c
 8005284:	200004e4 	.word	0x200004e4

08005288 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f103 0208 	add.w	r2, r3, #8
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f04f 32ff 	mov.w	r2, #4294967295
 80052a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f103 0208 	add.w	r2, r3, #8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f103 0208 	add.w	r2, r3, #8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr

080052c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d103      	bne.n	8005344 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e00c      	b.n	800535e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3308      	adds	r3, #8
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e002      	b.n	8005352 <vListInsert+0x2e>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d2f6      	bcs.n	800534c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6892      	ldr	r2, [r2, #8]
 80053aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6852      	ldr	r2, [r2, #4]
 80053b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d103      	bne.n	80053c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	1e5a      	subs	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
	...

080053e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005412:	f002 f8f3 	bl	80075fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	441a      	add	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	3b01      	subs	r3, #1
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	441a      	add	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	22ff      	movs	r2, #255	; 0xff
 8005456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	22ff      	movs	r2, #255	; 0xff
 800545e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d114      	bne.n	8005492 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01a      	beq.n	80054a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f001 f9e1 	bl	800683c <xTaskRemoveFromEventList>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <xQueueGenericReset+0xcc>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	e009      	b.n	80054a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3310      	adds	r3, #16
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fef6 	bl	8005288 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3324      	adds	r3, #36	; 0x24
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff fef1 	bl	8005288 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054a6:	f002 f8d9 	bl	800765c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054aa:	2301      	movs	r3, #1
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	e000ed04 	.word	0xe000ed04

080054b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08e      	sub	sp, #56	; 0x38
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <xQueueGenericCreateStatic+0x52>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <xQueueGenericCreateStatic+0x56>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericCreateStatic+0x58>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	623b      	str	r3, [r7, #32]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <xQueueGenericCreateStatic+0x7e>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <xQueueGenericCreateStatic+0x82>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <xQueueGenericCreateStatic+0x84>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	61fb      	str	r3, [r7, #28]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005556:	2350      	movs	r3, #80	; 0x50
 8005558:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b50      	cmp	r3, #80	; 0x50
 800555e:	d00a      	beq.n	8005576 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	61bb      	str	r3, [r7, #24]
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005576:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800558a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f845 	bl	8005628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3730      	adds	r7, #48	; 0x30
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	613b      	str	r3, [r7, #16]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	e004      	b.n	80055e8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
 80055e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	3350      	adds	r3, #80	; 0x50
 80055ec:	4618      	mov	r0, r3
 80055ee:	f002 f905 	bl	80077fc <pvPortMalloc>
 80055f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d011      	beq.n	800561e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	3350      	adds	r3, #80	; 0x50
 8005602:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800560c:	79fa      	ldrb	r2, [r7, #7]
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	4613      	mov	r3, r2
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f805 	bl	8005628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800561e:	69bb      	ldr	r3, [r7, #24]
	}
 8005620:	4618      	mov	r0, r3
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e002      	b.n	800564a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005656:	2101      	movs	r1, #1
 8005658:	69b8      	ldr	r0, [r7, #24]
 800565a:	f7ff fec5 	bl	80053e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	; 0x38
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800567e:	2300      	movs	r3, #0
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xQueueGenericSend+0x32>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <xQueueGenericSend+0x40>
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <xQueueGenericSend+0x44>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <xQueueGenericSend+0x46>
 80056b4:	2300      	movs	r3, #0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <xQueueGenericSend+0x60>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d103      	bne.n	80056de <xQueueGenericSend+0x6e>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <xQueueGenericSend+0x72>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueGenericSend+0x74>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueGenericSend+0x8e>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	623b      	str	r3, [r7, #32]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056fe:	f001 fa5f 	bl	8006bc0 <xTaskGetSchedulerState>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <xQueueGenericSend+0x9e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <xQueueGenericSend+0xa2>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueGenericSend+0xa4>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xQueueGenericSend+0xbe>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	61fb      	str	r3, [r7, #28]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800572e:	f001 ff65 	bl	80075fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <xQueueGenericSend+0xd4>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d129      	bne.n	8005798 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800574a:	f000 fa87 	bl	8005c5c <prvCopyDataToQueue>
 800574e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	d010      	beq.n	800577a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	3324      	adds	r3, #36	; 0x24
 800575c:	4618      	mov	r0, r3
 800575e:	f001 f86d 	bl	800683c <xTaskRemoveFromEventList>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005768:	4b3f      	ldr	r3, [pc, #252]	; (8005868 <xQueueGenericSend+0x1f8>)
 800576a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	e00a      	b.n	8005790 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005780:	4b39      	ldr	r3, [pc, #228]	; (8005868 <xQueueGenericSend+0x1f8>)
 8005782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005790:	f001 ff64 	bl	800765c <vPortExitCritical>
				return pdPASS;
 8005794:	2301      	movs	r3, #1
 8005796:	e063      	b.n	8005860 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800579e:	f001 ff5d 	bl	800765c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e05c      	b.n	8005860 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057ac:	f107 0314 	add.w	r3, r7, #20
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 f8a7 	bl	8006904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057ba:	f001 ff4f 	bl	800765c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057be:	f000 fe15 	bl	80063ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c2:	f001 ff1b 	bl	80075fc <vPortEnterCritical>
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d103      	bne.n	80057dc <xQueueGenericSend+0x16c>
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e2:	b25b      	sxtb	r3, r3
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d103      	bne.n	80057f2 <xQueueGenericSend+0x182>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f2:	f001 ff33 	bl	800765c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057f6:	1d3a      	adds	r2, r7, #4
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 f896 	bl	8006930 <xTaskCheckForTimeOut>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d124      	bne.n	8005854 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800580a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580c:	f000 fb1e 	bl	8005e4c <prvIsQueueFull>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	3310      	adds	r3, #16
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 ffbc 	bl	800679c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005826:	f000 faa9 	bl	8005d7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800582a:	f000 fded 	bl	8006408 <xTaskResumeAll>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	f47f af7c 	bne.w	800572e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <xQueueGenericSend+0x1f8>)
 8005838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	e772      	b.n	800572e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800584a:	f000 fa97 	bl	8005d7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800584e:	f000 fddb 	bl	8006408 <xTaskResumeAll>
 8005852:	e76c      	b.n	800572e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005856:	f000 fa91 	bl	8005d7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800585a:	f000 fdd5 	bl	8006408 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800585e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005860:	4618      	mov	r0, r3
 8005862:	3738      	adds	r7, #56	; 0x38
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08e      	sub	sp, #56	; 0x38
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <xQueueGenericSendFromISR+0x3c>
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <xQueueGenericSendFromISR+0x40>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <xQueueGenericSendFromISR+0x42>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	623b      	str	r3, [r7, #32]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d103      	bne.n	80058d6 <xQueueGenericSendFromISR+0x6a>
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <xQueueGenericSendFromISR+0x6e>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueGenericSendFromISR+0x70>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	61fb      	str	r3, [r7, #28]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058f6:	f001 ff43 	bl	8007780 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058fa:	f3ef 8211 	mrs	r2, BASEPRI
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	61ba      	str	r2, [r7, #24]
 8005910:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005912:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <xQueueGenericSendFromISR+0xbc>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d12c      	bne.n	8005982 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005938:	f000 f990 	bl	8005c5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800593c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005944:	d112      	bne.n	800596c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	3324      	adds	r3, #36	; 0x24
 8005952:	4618      	mov	r0, r3
 8005954:	f000 ff72 	bl	800683c <xTaskRemoveFromEventList>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00e      	beq.n	800597c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e007      	b.n	800597c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800596c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005970:	3301      	adds	r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	b25a      	sxtb	r2, r3
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800597c:	2301      	movs	r3, #1
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005980:	e001      	b.n	8005986 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005982:	2300      	movs	r3, #0
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005990:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005994:	4618      	mov	r0, r3
 8005996:	3738      	adds	r7, #56	; 0x38
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	; 0x30
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <xQueueReceive+0x30>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	623b      	str	r3, [r7, #32]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <xQueueReceive+0x3e>
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <xQueueReceive+0x42>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <xQueueReceive+0x44>
 80059de:	2300      	movs	r3, #0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <xQueueReceive+0x5e>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	61fb      	str	r3, [r7, #28]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059fa:	f001 f8e1 	bl	8006bc0 <xTaskGetSchedulerState>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d102      	bne.n	8005a0a <xQueueReceive+0x6e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <xQueueReceive+0x72>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <xQueueReceive+0x74>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xQueueReceive+0x8e>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	61bb      	str	r3, [r7, #24]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a2a:	f001 fde7 	bl	80075fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d01f      	beq.n	8005a7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a3e:	f000 f977 	bl	8005d30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	1e5a      	subs	r2, r3, #1
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00f      	beq.n	8005a72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	3310      	adds	r3, #16
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fef0 	bl	800683c <xTaskRemoveFromEventList>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a62:	4b3d      	ldr	r3, [pc, #244]	; (8005b58 <xQueueReceive+0x1bc>)
 8005a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a72:	f001 fdf3 	bl	800765c <vPortExitCritical>
				return pdPASS;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e069      	b.n	8005b4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d103      	bne.n	8005a88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a80:	f001 fdec 	bl	800765c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e062      	b.n	8005b4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a8e:	f107 0310 	add.w	r3, r7, #16
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 ff36 	bl	8006904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a9c:	f001 fdde 	bl	800765c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa0:	f000 fca4 	bl	80063ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa4:	f001 fdaa 	bl	80075fc <vPortEnterCritical>
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d103      	bne.n	8005abe <xQueueReceive+0x122>
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d103      	bne.n	8005ad4 <xQueueReceive+0x138>
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad4:	f001 fdc2 	bl	800765c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ad8:	1d3a      	adds	r2, r7, #4
 8005ada:	f107 0310 	add.w	r3, r7, #16
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 ff25 	bl	8006930 <xTaskCheckForTimeOut>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d123      	bne.n	8005b34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aee:	f000 f997 	bl	8005e20 <prvIsQueueEmpty>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d017      	beq.n	8005b28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	3324      	adds	r3, #36	; 0x24
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	4611      	mov	r1, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fe4b 	bl	800679c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b08:	f000 f938 	bl	8005d7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b0c:	f000 fc7c 	bl	8006408 <xTaskResumeAll>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d189      	bne.n	8005a2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <xQueueReceive+0x1bc>)
 8005b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	e780      	b.n	8005a2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2a:	f000 f927 	bl	8005d7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b2e:	f000 fc6b 	bl	8006408 <xTaskResumeAll>
 8005b32:	e77a      	b.n	8005a2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b36:	f000 f921 	bl	8005d7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b3a:	f000 fc65 	bl	8006408 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b40:	f000 f96e 	bl	8005e20 <prvIsQueueEmpty>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f43f af6f 	beq.w	8005a2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3730      	adds	r7, #48	; 0x30
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08e      	sub	sp, #56	; 0x38
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	623b      	str	r3, [r7, #32]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <xQueueReceiveFromISR+0x3a>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <xQueueReceiveFromISR+0x3e>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <xQueueReceiveFromISR+0x40>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	61fb      	str	r3, [r7, #28]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bb6:	f001 fde3 	bl	8007780 <vPortValidateInterruptPriority>
	__asm volatile
 8005bba:	f3ef 8211 	mrs	r2, BASEPRI
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	61ba      	str	r2, [r7, #24]
 8005bd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005bd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02f      	beq.n	8005c42 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bf0:	f000 f89e 	bl	8005d30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	1e5a      	subs	r2, r3, #1
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d112      	bne.n	8005c2c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d016      	beq.n	8005c3c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	3310      	adds	r3, #16
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fe12 	bl	800683c <xTaskRemoveFromEventList>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e007      	b.n	8005c3c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c30:	3301      	adds	r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	b25a      	sxtb	r2, r3
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c40:	e001      	b.n	8005c46 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f383 8811 	msr	BASEPRI, r3
}
 8005c50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3738      	adds	r7, #56	; 0x38
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10d      	bne.n	8005c96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d14d      	bne.n	8005d1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 ffb8 	bl	8006bfc <xTaskPriorityDisinherit>
 8005c8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	609a      	str	r2, [r3, #8]
 8005c94:	e043      	b.n	8005d1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d119      	bne.n	8005cd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6858      	ldr	r0, [r3, #4]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	f005 fe34 	bl	800b914 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	441a      	add	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d32b      	bcc.n	8005d1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	e026      	b.n	8005d1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68d8      	ldr	r0, [r3, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	f005 fe1a 	bl	800b914 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	425b      	negs	r3, r3
 8005cea:	441a      	add	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d207      	bcs.n	8005d0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	425b      	negs	r3, r3
 8005d06:	441a      	add	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d105      	bne.n	8005d1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d26:	697b      	ldr	r3, [r7, #20]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d018      	beq.n	8005d74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	441a      	add	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d303      	bcc.n	8005d64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68d9      	ldr	r1, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6838      	ldr	r0, [r7, #0]
 8005d70:	f005 fdd0 	bl	800b914 <memcpy>
	}
}
 8005d74:	bf00      	nop
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d84:	f001 fc3a 	bl	80075fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d90:	e011      	b.n	8005db6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d012      	beq.n	8005dc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3324      	adds	r3, #36	; 0x24
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fd4c 	bl	800683c <xTaskRemoveFromEventList>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005daa:	f000 fe23 	bl	80069f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	dce9      	bgt.n	8005d92 <prvUnlockQueue+0x16>
 8005dbe:	e000      	b.n	8005dc2 <prvUnlockQueue+0x46>
					break;
 8005dc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005dca:	f001 fc47 	bl	800765c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dce:	f001 fc15 	bl	80075fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dda:	e011      	b.n	8005e00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d012      	beq.n	8005e0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3310      	adds	r3, #16
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fd27 	bl	800683c <xTaskRemoveFromEventList>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005df4:	f000 fdfe 	bl	80069f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005df8:	7bbb      	ldrb	r3, [r7, #14]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	dce9      	bgt.n	8005ddc <prvUnlockQueue+0x60>
 8005e08:	e000      	b.n	8005e0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	22ff      	movs	r2, #255	; 0xff
 8005e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e14:	f001 fc22 	bl	800765c <vPortExitCritical>
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e28:	f001 fbe8 	bl	80075fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e34:	2301      	movs	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e001      	b.n	8005e3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e3e:	f001 fc0d 	bl	800765c <vPortExitCritical>

	return xReturn;
 8005e42:	68fb      	ldr	r3, [r7, #12]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e54:	f001 fbd2 	bl	80075fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d102      	bne.n	8005e6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	e001      	b.n	8005e6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e6e:	f001 fbf5 	bl	800765c <vPortExitCritical>

	return xReturn;
 8005e72:	68fb      	ldr	r3, [r7, #12]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e014      	b.n	8005eb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e8c:	4a0e      	ldr	r2, [pc, #56]	; (8005ec8 <vQueueAddToRegistry+0x4c>)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e98:	490b      	ldr	r1, [pc, #44]	; (8005ec8 <vQueueAddToRegistry+0x4c>)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ea2:	4a09      	ldr	r2, [pc, #36]	; (8005ec8 <vQueueAddToRegistry+0x4c>)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005eae:	e006      	b.n	8005ebe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b07      	cmp	r3, #7
 8005eba:	d9e7      	bls.n	8005e8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr
 8005ec8:	200008e4 	.word	0x200008e4

08005ecc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005edc:	f001 fb8e 	bl	80075fc <vPortEnterCritical>
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ee6:	b25b      	sxtb	r3, r3
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d103      	bne.n	8005ef6 <vQueueWaitForMessageRestricted+0x2a>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005efc:	b25b      	sxtb	r3, r3
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d103      	bne.n	8005f0c <vQueueWaitForMessageRestricted+0x40>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f0c:	f001 fba6 	bl	800765c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d106      	bne.n	8005f26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	3324      	adds	r3, #36	; 0x24
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fc5f 	bl	80067e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f26:	6978      	ldr	r0, [r7, #20]
 8005f28:	f7ff ff28 	bl	8005d7c <prvUnlockQueue>
	}
 8005f2c:	bf00      	nop
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08e      	sub	sp, #56	; 0x38
 8005f38:	af04      	add	r7, sp, #16
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	623b      	str	r3, [r7, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <xTaskCreateStatic+0x46>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	61fb      	str	r3, [r7, #28]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f7a:	23a8      	movs	r3, #168	; 0xa8
 8005f7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2ba8      	cmp	r3, #168	; 0xa8
 8005f82:	d00a      	beq.n	8005f9a <xTaskCreateStatic+0x66>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	61bb      	str	r3, [r7, #24]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01e      	beq.n	8005fe0 <xTaskCreateStatic+0xac>
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01b      	beq.n	8005fe0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9303      	str	r3, [sp, #12]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	9302      	str	r3, [sp, #8]
 8005fc2:	f107 0314 	add.w	r3, r7, #20
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f850 	bl	8006078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fda:	f000 f8f3 	bl	80061c4 <prvAddNewTaskToReadyList>
 8005fde:	e001      	b.n	8005fe4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fe4:	697b      	ldr	r3, [r7, #20]
	}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3728      	adds	r7, #40	; 0x28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b08c      	sub	sp, #48	; 0x30
 8005ff2:	af04      	add	r7, sp, #16
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	603b      	str	r3, [r7, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4618      	mov	r0, r3
 8006004:	f001 fbfa 	bl	80077fc <pvPortMalloc>
 8006008:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00e      	beq.n	800602e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006010:	20a8      	movs	r0, #168	; 0xa8
 8006012:	f001 fbf3 	bl	80077fc <pvPortMalloc>
 8006016:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
 8006024:	e005      	b.n	8006032 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006026:	6978      	ldr	r0, [r7, #20]
 8006028:	f001 fcac 	bl	8007984 <vPortFree>
 800602c:	e001      	b.n	8006032 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d017      	beq.n	8006068 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006040:	88fa      	ldrh	r2, [r7, #6]
 8006042:	2300      	movs	r3, #0
 8006044:	9303      	str	r3, [sp, #12]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	9302      	str	r3, [sp, #8]
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f80e 	bl	8006078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800605c:	69f8      	ldr	r0, [r7, #28]
 800605e:	f000 f8b1 	bl	80061c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006062:	2301      	movs	r3, #1
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	e002      	b.n	800606e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006068:	f04f 33ff 	mov.w	r3, #4294967295
 800606c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800606e:	69bb      	ldr	r3, [r7, #24]
	}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	461a      	mov	r2, r3
 8006090:	21a5      	movs	r1, #165	; 0xa5
 8006092:	f005 fbb5 	bl	800b800 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060a0:	3b01      	subs	r3, #1
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	f023 0307 	bic.w	r3, r3, #7
 80060ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	617b      	str	r3, [r7, #20]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01f      	beq.n	8006116 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060d6:	2300      	movs	r3, #0
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	e012      	b.n	8006102 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	7819      	ldrb	r1, [r3, #0]
 80060e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	3334      	adds	r3, #52	; 0x34
 80060ec:	460a      	mov	r2, r1
 80060ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4413      	add	r3, r2
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d006      	beq.n	800610a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	3301      	adds	r3, #1
 8006100:	61fb      	str	r3, [r7, #28]
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	2b0f      	cmp	r3, #15
 8006106:	d9e9      	bls.n	80060dc <prvInitialiseNewTask+0x64>
 8006108:	e000      	b.n	800610c <prvInitialiseNewTask+0x94>
			{
				break;
 800610a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006114:	e003      	b.n	800611e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	2b37      	cmp	r3, #55	; 0x37
 8006122:	d901      	bls.n	8006128 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006124:	2337      	movs	r3, #55	; 0x37
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800612c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006132:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	2200      	movs	r2, #0
 8006138:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	3304      	adds	r3, #4
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff f8c1 	bl	80052c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	3318      	adds	r3, #24
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff f8bc 	bl	80052c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006152:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006162:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	2200      	movs	r2, #0
 8006170:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	3354      	adds	r3, #84	; 0x54
 8006178:	224c      	movs	r2, #76	; 0x4c
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f005 fb3f 	bl	800b800 <memset>
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <prvInitialiseNewTask+0x140>)
 8006186:	659a      	str	r2, [r3, #88]	; 0x58
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	4a0c      	ldr	r2, [pc, #48]	; (80061bc <prvInitialiseNewTask+0x144>)
 800618c:	65da      	str	r2, [r3, #92]	; 0x5c
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	4a0b      	ldr	r2, [pc, #44]	; (80061c0 <prvInitialiseNewTask+0x148>)
 8006192:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	68f9      	ldr	r1, [r7, #12]
 8006198:	69b8      	ldr	r0, [r7, #24]
 800619a:	f001 f93d 	bl	8007418 <pxPortInitialiseStack>
 800619e:	4602      	mov	r2, r0
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b0:	bf00      	nop
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20001f38 	.word	0x20001f38
 80061bc:	20001fa0 	.word	0x20001fa0
 80061c0:	20002008 	.word	0x20002008

080061c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061cc:	f001 fa16 	bl	80075fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061d0:	4b2d      	ldr	r3, [pc, #180]	; (8006288 <prvAddNewTaskToReadyList+0xc4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	4a2c      	ldr	r2, [pc, #176]	; (8006288 <prvAddNewTaskToReadyList+0xc4>)
 80061d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061da:	4b2c      	ldr	r3, [pc, #176]	; (800628c <prvAddNewTaskToReadyList+0xc8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061e2:	4a2a      	ldr	r2, [pc, #168]	; (800628c <prvAddNewTaskToReadyList+0xc8>)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061e8:	4b27      	ldr	r3, [pc, #156]	; (8006288 <prvAddNewTaskToReadyList+0xc4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d110      	bne.n	8006212 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061f0:	f000 fc24 	bl	8006a3c <prvInitialiseTaskLists>
 80061f4:	e00d      	b.n	8006212 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061f6:	4b26      	ldr	r3, [pc, #152]	; (8006290 <prvAddNewTaskToReadyList+0xcc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061fe:	4b23      	ldr	r3, [pc, #140]	; (800628c <prvAddNewTaskToReadyList+0xc8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	429a      	cmp	r2, r3
 800620a:	d802      	bhi.n	8006212 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800620c:	4a1f      	ldr	r2, [pc, #124]	; (800628c <prvAddNewTaskToReadyList+0xc8>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006212:	4b20      	ldr	r3, [pc, #128]	; (8006294 <prvAddNewTaskToReadyList+0xd0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3301      	adds	r3, #1
 8006218:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <prvAddNewTaskToReadyList+0xd0>)
 800621a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800621c:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <prvAddNewTaskToReadyList+0xd0>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <prvAddNewTaskToReadyList+0xd4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d903      	bls.n	8006238 <prvAddNewTaskToReadyList+0x74>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	4a18      	ldr	r2, [pc, #96]	; (8006298 <prvAddNewTaskToReadyList+0xd4>)
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4a15      	ldr	r2, [pc, #84]	; (800629c <prvAddNewTaskToReadyList+0xd8>)
 8006246:	441a      	add	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f7ff f845 	bl	80052de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006254:	f001 fa02 	bl	800765c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006258:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <prvAddNewTaskToReadyList+0xcc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00e      	beq.n	800627e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006260:	4b0a      	ldr	r3, [pc, #40]	; (800628c <prvAddNewTaskToReadyList+0xc8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	429a      	cmp	r2, r3
 800626c:	d207      	bcs.n	800627e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <prvAddNewTaskToReadyList+0xdc>)
 8006270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800627e:	bf00      	nop
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000df8 	.word	0x20000df8
 800628c:	20000924 	.word	0x20000924
 8006290:	20000e04 	.word	0x20000e04
 8006294:	20000e14 	.word	0x20000e14
 8006298:	20000e00 	.word	0x20000e00
 800629c:	20000928 	.word	0x20000928
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d017      	beq.n	80062e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062b6:	4b13      	ldr	r3, [pc, #76]	; (8006304 <vTaskDelay+0x60>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <vTaskDelay+0x30>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	60bb      	str	r3, [r7, #8]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062d4:	f000 f88a 	bl	80063ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062d8:	2100      	movs	r1, #0
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fcfc 	bl	8006cd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062e0:	f000 f892 	bl	8006408 <xTaskResumeAll>
 80062e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <vTaskDelay+0x64>)
 80062ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20000e20 	.word	0x20000e20
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800631a:	463a      	mov	r2, r7
 800631c:	1d39      	adds	r1, r7, #4
 800631e:	f107 0308 	add.w	r3, r7, #8
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe ff7e 	bl	8005224 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	9202      	str	r2, [sp, #8]
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	2300      	movs	r3, #0
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2300      	movs	r3, #0
 8006338:	460a      	mov	r2, r1
 800633a:	4924      	ldr	r1, [pc, #144]	; (80063cc <vTaskStartScheduler+0xc0>)
 800633c:	4824      	ldr	r0, [pc, #144]	; (80063d0 <vTaskStartScheduler+0xc4>)
 800633e:	f7ff fdf9 	bl	8005f34 <xTaskCreateStatic>
 8006342:	4603      	mov	r3, r0
 8006344:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <vTaskStartScheduler+0xc8>)
 8006346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006348:	4b22      	ldr	r3, [pc, #136]	; (80063d4 <vTaskStartScheduler+0xc8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006350:	2301      	movs	r3, #1
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e001      	b.n	800635a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006356:	2300      	movs	r3, #0
 8006358:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d102      	bne.n	8006366 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006360:	f000 fd0e 	bl	8006d80 <xTimerCreateTimerTask>
 8006364:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d11b      	bne.n	80063a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	613b      	str	r3, [r7, #16]
}
 800637e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006380:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <vTaskStartScheduler+0xcc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3354      	adds	r3, #84	; 0x54
 8006386:	4a15      	ldr	r2, [pc, #84]	; (80063dc <vTaskStartScheduler+0xd0>)
 8006388:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800638a:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <vTaskStartScheduler+0xd4>)
 800638c:	f04f 32ff 	mov.w	r2, #4294967295
 8006390:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006392:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <vTaskStartScheduler+0xd8>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006398:	4b13      	ldr	r3, [pc, #76]	; (80063e8 <vTaskStartScheduler+0xdc>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800639e:	f001 f8bb 	bl	8007518 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063a2:	e00e      	b.n	80063c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d10a      	bne.n	80063c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60fb      	str	r3, [r7, #12]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <vTaskStartScheduler+0xb4>
}
 80063c2:	bf00      	nop
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	0800ba60 	.word	0x0800ba60
 80063d0:	08006a0d 	.word	0x08006a0d
 80063d4:	20000e1c 	.word	0x20000e1c
 80063d8:	20000924 	.word	0x20000924
 80063dc:	20000060 	.word	0x20000060
 80063e0:	20000e18 	.word	0x20000e18
 80063e4:	20000e04 	.word	0x20000e04
 80063e8:	20000dfc 	.word	0x20000dfc

080063ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80063f0:	4b04      	ldr	r3, [pc, #16]	; (8006404 <vTaskSuspendAll+0x18>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3301      	adds	r3, #1
 80063f6:	4a03      	ldr	r2, [pc, #12]	; (8006404 <vTaskSuspendAll+0x18>)
 80063f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80063fa:	bf00      	nop
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000e20 	.word	0x20000e20

08006408 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006412:	2300      	movs	r3, #0
 8006414:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006416:	4b42      	ldr	r3, [pc, #264]	; (8006520 <xTaskResumeAll+0x118>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <xTaskResumeAll+0x2c>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	603b      	str	r3, [r7, #0]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006434:	f001 f8e2 	bl	80075fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006438:	4b39      	ldr	r3, [pc, #228]	; (8006520 <xTaskResumeAll+0x118>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3b01      	subs	r3, #1
 800643e:	4a38      	ldr	r2, [pc, #224]	; (8006520 <xTaskResumeAll+0x118>)
 8006440:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006442:	4b37      	ldr	r3, [pc, #220]	; (8006520 <xTaskResumeAll+0x118>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d162      	bne.n	8006510 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800644a:	4b36      	ldr	r3, [pc, #216]	; (8006524 <xTaskResumeAll+0x11c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d05e      	beq.n	8006510 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006452:	e02f      	b.n	80064b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006454:	4b34      	ldr	r3, [pc, #208]	; (8006528 <xTaskResumeAll+0x120>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3318      	adds	r3, #24
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe ff97 	bl	8005394 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3304      	adds	r3, #4
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe ff92 	bl	8005394 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	4b2d      	ldr	r3, [pc, #180]	; (800652c <xTaskResumeAll+0x124>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d903      	bls.n	8006484 <xTaskResumeAll+0x7c>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	4a2a      	ldr	r2, [pc, #168]	; (800652c <xTaskResumeAll+0x124>)
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4a27      	ldr	r2, [pc, #156]	; (8006530 <xTaskResumeAll+0x128>)
 8006492:	441a      	add	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3304      	adds	r3, #4
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f7fe ff1f 	bl	80052de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a4:	4b23      	ldr	r3, [pc, #140]	; (8006534 <xTaskResumeAll+0x12c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d302      	bcc.n	80064b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064ae:	4b22      	ldr	r3, [pc, #136]	; (8006538 <xTaskResumeAll+0x130>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064b4:	4b1c      	ldr	r3, [pc, #112]	; (8006528 <xTaskResumeAll+0x120>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1cb      	bne.n	8006454 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064c2:	f000 fb5d 	bl	8006b80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064c6:	4b1d      	ldr	r3, [pc, #116]	; (800653c <xTaskResumeAll+0x134>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d010      	beq.n	80064f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064d2:	f000 f845 	bl	8006560 <xTaskIncrementTick>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064dc:	4b16      	ldr	r3, [pc, #88]	; (8006538 <xTaskResumeAll+0x130>)
 80064de:	2201      	movs	r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f1      	bne.n	80064d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <xTaskResumeAll+0x134>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064f4:	4b10      	ldr	r3, [pc, #64]	; (8006538 <xTaskResumeAll+0x130>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064fc:	2301      	movs	r3, #1
 80064fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <xTaskResumeAll+0x138>)
 8006502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006510:	f001 f8a4 	bl	800765c <vPortExitCritical>

	return xAlreadyYielded;
 8006514:	68bb      	ldr	r3, [r7, #8]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000e20 	.word	0x20000e20
 8006524:	20000df8 	.word	0x20000df8
 8006528:	20000db8 	.word	0x20000db8
 800652c:	20000e00 	.word	0x20000e00
 8006530:	20000928 	.word	0x20000928
 8006534:	20000924 	.word	0x20000924
 8006538:	20000e0c 	.word	0x20000e0c
 800653c:	20000e08 	.word	0x20000e08
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800654a:	4b04      	ldr	r3, [pc, #16]	; (800655c <xTaskGetTickCount+0x18>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006550:	687b      	ldr	r3, [r7, #4]
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	20000dfc 	.word	0x20000dfc

08006560 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800656a:	4b4f      	ldr	r3, [pc, #316]	; (80066a8 <xTaskIncrementTick+0x148>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 8089 	bne.w	8006686 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006574:	4b4d      	ldr	r3, [pc, #308]	; (80066ac <xTaskIncrementTick+0x14c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800657c:	4a4b      	ldr	r2, [pc, #300]	; (80066ac <xTaskIncrementTick+0x14c>)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d120      	bne.n	80065ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006588:	4b49      	ldr	r3, [pc, #292]	; (80066b0 <xTaskIncrementTick+0x150>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	603b      	str	r3, [r7, #0]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <xTaskIncrementTick+0x46>
 80065a8:	4b41      	ldr	r3, [pc, #260]	; (80066b0 <xTaskIncrementTick+0x150>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	4b41      	ldr	r3, [pc, #260]	; (80066b4 <xTaskIncrementTick+0x154>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a3f      	ldr	r2, [pc, #252]	; (80066b0 <xTaskIncrementTick+0x150>)
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	4a3f      	ldr	r2, [pc, #252]	; (80066b4 <xTaskIncrementTick+0x154>)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	4b3e      	ldr	r3, [pc, #248]	; (80066b8 <xTaskIncrementTick+0x158>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	4a3d      	ldr	r2, [pc, #244]	; (80066b8 <xTaskIncrementTick+0x158>)
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	f000 fadb 	bl	8006b80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065ca:	4b3c      	ldr	r3, [pc, #240]	; (80066bc <xTaskIncrementTick+0x15c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d349      	bcc.n	8006668 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065d4:	4b36      	ldr	r3, [pc, #216]	; (80066b0 <xTaskIncrementTick+0x150>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d104      	bne.n	80065e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065de:	4b37      	ldr	r3, [pc, #220]	; (80066bc <xTaskIncrementTick+0x15c>)
 80065e0:	f04f 32ff 	mov.w	r2, #4294967295
 80065e4:	601a      	str	r2, [r3, #0]
					break;
 80065e6:	e03f      	b.n	8006668 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e8:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <xTaskIncrementTick+0x150>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d203      	bcs.n	8006608 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006600:	4a2e      	ldr	r2, [pc, #184]	; (80066bc <xTaskIncrementTick+0x15c>)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006606:	e02f      	b.n	8006668 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	3304      	adds	r3, #4
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe fec1 	bl	8005394 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	3318      	adds	r3, #24
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe feb8 	bl	8005394 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006628:	4b25      	ldr	r3, [pc, #148]	; (80066c0 <xTaskIncrementTick+0x160>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d903      	bls.n	8006638 <xTaskIncrementTick+0xd8>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4a22      	ldr	r2, [pc, #136]	; (80066c0 <xTaskIncrementTick+0x160>)
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4a1f      	ldr	r2, [pc, #124]	; (80066c4 <xTaskIncrementTick+0x164>)
 8006646:	441a      	add	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	3304      	adds	r3, #4
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	f7fe fe45 	bl	80052de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006658:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <xTaskIncrementTick+0x168>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	429a      	cmp	r2, r3
 8006660:	d3b8      	bcc.n	80065d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006662:	2301      	movs	r3, #1
 8006664:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006666:	e7b5      	b.n	80065d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006668:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <xTaskIncrementTick+0x168>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666e:	4915      	ldr	r1, [pc, #84]	; (80066c4 <xTaskIncrementTick+0x164>)
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d907      	bls.n	8006690 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	e004      	b.n	8006690 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006686:	4b11      	ldr	r3, [pc, #68]	; (80066cc <xTaskIncrementTick+0x16c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3301      	adds	r3, #1
 800668c:	4a0f      	ldr	r2, [pc, #60]	; (80066cc <xTaskIncrementTick+0x16c>)
 800668e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006690:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <xTaskIncrementTick+0x170>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800669c:	697b      	ldr	r3, [r7, #20]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000e20 	.word	0x20000e20
 80066ac:	20000dfc 	.word	0x20000dfc
 80066b0:	20000db0 	.word	0x20000db0
 80066b4:	20000db4 	.word	0x20000db4
 80066b8:	20000e10 	.word	0x20000e10
 80066bc:	20000e18 	.word	0x20000e18
 80066c0:	20000e00 	.word	0x20000e00
 80066c4:	20000928 	.word	0x20000928
 80066c8:	20000924 	.word	0x20000924
 80066cc:	20000e08 	.word	0x20000e08
 80066d0:	20000e0c 	.word	0x20000e0c

080066d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066da:	4b2a      	ldr	r3, [pc, #168]	; (8006784 <vTaskSwitchContext+0xb0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066e2:	4b29      	ldr	r3, [pc, #164]	; (8006788 <vTaskSwitchContext+0xb4>)
 80066e4:	2201      	movs	r2, #1
 80066e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066e8:	e046      	b.n	8006778 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80066ea:	4b27      	ldr	r3, [pc, #156]	; (8006788 <vTaskSwitchContext+0xb4>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f0:	4b26      	ldr	r3, [pc, #152]	; (800678c <vTaskSwitchContext+0xb8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e010      	b.n	800671a <vTaskSwitchContext+0x46>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <vTaskSwitchContext+0x40>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	607b      	str	r3, [r7, #4]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <vTaskSwitchContext+0x3e>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3b01      	subs	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	491d      	ldr	r1, [pc, #116]	; (8006790 <vTaskSwitchContext+0xbc>)
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0e4      	beq.n	80066f8 <vTaskSwitchContext+0x24>
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4613      	mov	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4a15      	ldr	r2, [pc, #84]	; (8006790 <vTaskSwitchContext+0xbc>)
 800673a:	4413      	add	r3, r2
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	605a      	str	r2, [r3, #4]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	3308      	adds	r3, #8
 8006750:	429a      	cmp	r2, r3
 8006752:	d104      	bne.n	800675e <vTaskSwitchContext+0x8a>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4a0b      	ldr	r2, [pc, #44]	; (8006794 <vTaskSwitchContext+0xc0>)
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	4a08      	ldr	r2, [pc, #32]	; (800678c <vTaskSwitchContext+0xb8>)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800676e:	4b09      	ldr	r3, [pc, #36]	; (8006794 <vTaskSwitchContext+0xc0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3354      	adds	r3, #84	; 0x54
 8006774:	4a08      	ldr	r2, [pc, #32]	; (8006798 <vTaskSwitchContext+0xc4>)
 8006776:	6013      	str	r3, [r2, #0]
}
 8006778:	bf00      	nop
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000e20 	.word	0x20000e20
 8006788:	20000e0c 	.word	0x20000e0c
 800678c:	20000e00 	.word	0x20000e00
 8006790:	20000928 	.word	0x20000928
 8006794:	20000924 	.word	0x20000924
 8006798:	20000060 	.word	0x20000060

0800679c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	60fb      	str	r3, [r7, #12]
}
 80067be:	bf00      	nop
 80067c0:	e7fe      	b.n	80067c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <vTaskPlaceOnEventList+0x44>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3318      	adds	r3, #24
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fe fdaa 	bl	8005324 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067d0:	2101      	movs	r1, #1
 80067d2:	6838      	ldr	r0, [r7, #0]
 80067d4:	f000 fa80 	bl	8006cd8 <prvAddCurrentTaskToDelayedList>
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000924 	.word	0x20000924

080067e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	617b      	str	r3, [r7, #20]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <vTaskPlaceOnEventListRestricted+0x54>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3318      	adds	r3, #24
 8006812:	4619      	mov	r1, r3
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7fe fd62 	bl	80052de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006820:	f04f 33ff 	mov.w	r3, #4294967295
 8006824:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	68b8      	ldr	r0, [r7, #8]
 800682a:	f000 fa55 	bl	8006cd8 <prvAddCurrentTaskToDelayedList>
	}
 800682e:	bf00      	nop
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000924 	.word	0x20000924

0800683c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	60fb      	str	r3, [r7, #12]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	3318      	adds	r3, #24
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fd91 	bl	8005394 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006872:	4b1e      	ldr	r3, [pc, #120]	; (80068ec <xTaskRemoveFromEventList+0xb0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d11d      	bne.n	80068b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	3304      	adds	r3, #4
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe fd88 	bl	8005394 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4b19      	ldr	r3, [pc, #100]	; (80068f0 <xTaskRemoveFromEventList+0xb4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d903      	bls.n	8006898 <xTaskRemoveFromEventList+0x5c>
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <xTaskRemoveFromEventList+0xb4>)
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4a13      	ldr	r2, [pc, #76]	; (80068f4 <xTaskRemoveFromEventList+0xb8>)
 80068a6:	441a      	add	r2, r3
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fe fd15 	bl	80052de <vListInsertEnd>
 80068b4:	e005      	b.n	80068c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3318      	adds	r3, #24
 80068ba:	4619      	mov	r1, r3
 80068bc:	480e      	ldr	r0, [pc, #56]	; (80068f8 <xTaskRemoveFromEventList+0xbc>)
 80068be:	f7fe fd0e 	bl	80052de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c6:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <xTaskRemoveFromEventList+0xc0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d905      	bls.n	80068dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068d4:	4b0a      	ldr	r3, [pc, #40]	; (8006900 <xTaskRemoveFromEventList+0xc4>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	e001      	b.n	80068e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068e0:	697b      	ldr	r3, [r7, #20]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000e20 	.word	0x20000e20
 80068f0:	20000e00 	.word	0x20000e00
 80068f4:	20000928 	.word	0x20000928
 80068f8:	20000db8 	.word	0x20000db8
 80068fc:	20000924 	.word	0x20000924
 8006900:	20000e0c 	.word	0x20000e0c

08006904 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <vTaskInternalSetTimeOutState+0x24>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <vTaskInternalSetTimeOutState+0x28>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	605a      	str	r2, [r3, #4]
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000e10 	.word	0x20000e10
 800692c:	20000dfc 	.word	0x20000dfc

08006930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	613b      	str	r3, [r7, #16]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	60fb      	str	r3, [r7, #12]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006972:	f000 fe43 	bl	80075fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006976:	4b1d      	ldr	r3, [pc, #116]	; (80069ec <xTaskCheckForTimeOut+0xbc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698e:	d102      	bne.n	8006996 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	e023      	b.n	80069de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <xTaskCheckForTimeOut+0xc0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d007      	beq.n	80069b2 <xTaskCheckForTimeOut+0x82>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d302      	bcc.n	80069b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	61fb      	str	r3, [r7, #28]
 80069b0:	e015      	b.n	80069de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d20b      	bcs.n	80069d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	1ad2      	subs	r2, r2, r3
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ff9b 	bl	8006904 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	e004      	b.n	80069de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069da:	2301      	movs	r3, #1
 80069dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069de:	f000 fe3d 	bl	800765c <vPortExitCritical>

	return xReturn;
 80069e2:	69fb      	ldr	r3, [r7, #28]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3720      	adds	r7, #32
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000dfc 	.word	0x20000dfc
 80069f0:	20000e10 	.word	0x20000e10

080069f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069f8:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <vTaskMissedYield+0x14>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
}
 80069fe:	bf00      	nop
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20000e0c 	.word	0x20000e0c

08006a0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a14:	f000 f852 	bl	8006abc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <prvIdleTask+0x28>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d9f9      	bls.n	8006a14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <prvIdleTask+0x2c>)
 8006a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a30:	e7f0      	b.n	8006a14 <prvIdleTask+0x8>
 8006a32:	bf00      	nop
 8006a34:	20000928 	.word	0x20000928
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a42:	2300      	movs	r3, #0
 8006a44:	607b      	str	r3, [r7, #4]
 8006a46:	e00c      	b.n	8006a62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4a12      	ldr	r2, [pc, #72]	; (8006a9c <prvInitialiseTaskLists+0x60>)
 8006a54:	4413      	add	r3, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe fc16 	bl	8005288 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	607b      	str	r3, [r7, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b37      	cmp	r3, #55	; 0x37
 8006a66:	d9ef      	bls.n	8006a48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a68:	480d      	ldr	r0, [pc, #52]	; (8006aa0 <prvInitialiseTaskLists+0x64>)
 8006a6a:	f7fe fc0d 	bl	8005288 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a6e:	480d      	ldr	r0, [pc, #52]	; (8006aa4 <prvInitialiseTaskLists+0x68>)
 8006a70:	f7fe fc0a 	bl	8005288 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a74:	480c      	ldr	r0, [pc, #48]	; (8006aa8 <prvInitialiseTaskLists+0x6c>)
 8006a76:	f7fe fc07 	bl	8005288 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a7a:	480c      	ldr	r0, [pc, #48]	; (8006aac <prvInitialiseTaskLists+0x70>)
 8006a7c:	f7fe fc04 	bl	8005288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a80:	480b      	ldr	r0, [pc, #44]	; (8006ab0 <prvInitialiseTaskLists+0x74>)
 8006a82:	f7fe fc01 	bl	8005288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a86:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <prvInitialiseTaskLists+0x78>)
 8006a88:	4a05      	ldr	r2, [pc, #20]	; (8006aa0 <prvInitialiseTaskLists+0x64>)
 8006a8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <prvInitialiseTaskLists+0x7c>)
 8006a8e:	4a05      	ldr	r2, [pc, #20]	; (8006aa4 <prvInitialiseTaskLists+0x68>)
 8006a90:	601a      	str	r2, [r3, #0]
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000928 	.word	0x20000928
 8006aa0:	20000d88 	.word	0x20000d88
 8006aa4:	20000d9c 	.word	0x20000d9c
 8006aa8:	20000db8 	.word	0x20000db8
 8006aac:	20000dcc 	.word	0x20000dcc
 8006ab0:	20000de4 	.word	0x20000de4
 8006ab4:	20000db0 	.word	0x20000db0
 8006ab8:	20000db4 	.word	0x20000db4

08006abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ac2:	e019      	b.n	8006af8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ac4:	f000 fd9a 	bl	80075fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac8:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <prvCheckTasksWaitingTermination+0x50>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fe fc5d 	bl	8005394 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ada:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <prvCheckTasksWaitingTermination+0x54>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <prvCheckTasksWaitingTermination+0x54>)
 8006ae2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <prvCheckTasksWaitingTermination+0x58>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	4a0a      	ldr	r2, [pc, #40]	; (8006b14 <prvCheckTasksWaitingTermination+0x58>)
 8006aec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aee:	f000 fdb5 	bl	800765c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f810 	bl	8006b18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006af8:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <prvCheckTasksWaitingTermination+0x58>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e1      	bne.n	8006ac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000dcc 	.word	0x20000dcc
 8006b10:	20000df8 	.word	0x20000df8
 8006b14:	20000de0 	.word	0x20000de0

08006b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3354      	adds	r3, #84	; 0x54
 8006b24:	4618      	mov	r0, r3
 8006b26:	f004 fe73 	bl	800b810 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d108      	bne.n	8006b46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 ff23 	bl	8007984 <vPortFree>
				vPortFree( pxTCB );
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 ff20 	bl	8007984 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b44:	e018      	b.n	8006b78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d103      	bne.n	8006b58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 ff17 	bl	8007984 <vPortFree>
	}
 8006b56:	e00f      	b.n	8006b78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d00a      	beq.n	8006b78 <prvDeleteTCB+0x60>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	60fb      	str	r3, [r7, #12]
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <prvDeleteTCB+0x5e>
	}
 8006b78:	bf00      	nop
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b86:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <prvResetNextTaskUnblockTime+0x38>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d104      	bne.n	8006b9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b90:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <prvResetNextTaskUnblockTime+0x3c>)
 8006b92:	f04f 32ff 	mov.w	r2, #4294967295
 8006b96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b98:	e008      	b.n	8006bac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9a:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <prvResetNextTaskUnblockTime+0x38>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <prvResetNextTaskUnblockTime+0x3c>)
 8006baa:	6013      	str	r3, [r2, #0]
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20000db0 	.word	0x20000db0
 8006bbc:	20000e18 	.word	0x20000e18

08006bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <xTaskGetSchedulerState+0x34>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d102      	bne.n	8006bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	607b      	str	r3, [r7, #4]
 8006bd2:	e008      	b.n	8006be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd4:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <xTaskGetSchedulerState+0x38>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	e001      	b.n	8006be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006be2:	2300      	movs	r3, #0
 8006be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006be6:	687b      	ldr	r3, [r7, #4]
	}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20000e04 	.word	0x20000e04
 8006bf8:	20000e20 	.word	0x20000e20

08006bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d056      	beq.n	8006cc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c12:	4b2e      	ldr	r3, [pc, #184]	; (8006ccc <xTaskPriorityDisinherit+0xd0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d00a      	beq.n	8006c32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	60fb      	str	r3, [r7, #12]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60bb      	str	r3, [r7, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c54:	1e5a      	subs	r2, r3, #1
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d02c      	beq.n	8006cc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d128      	bne.n	8006cc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fb8e 	bl	8005394 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c90:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <xTaskPriorityDisinherit+0xd4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d903      	bls.n	8006ca0 <xTaskPriorityDisinherit+0xa4>
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	4a0c      	ldr	r2, [pc, #48]	; (8006cd0 <xTaskPriorityDisinherit+0xd4>)
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <xTaskPriorityDisinherit+0xd8>)
 8006cae:	441a      	add	r2, r3
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f7fe fb11 	bl	80052de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cc0:	697b      	ldr	r3, [r7, #20]
	}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000924 	.word	0x20000924
 8006cd0:	20000e00 	.word	0x20000e00
 8006cd4:	20000928 	.word	0x20000928

08006cd8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ce2:	4b21      	ldr	r3, [pc, #132]	; (8006d68 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ce8:	4b20      	ldr	r3, [pc, #128]	; (8006d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe fb50 	bl	8005394 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfa:	d10a      	bne.n	8006d12 <prvAddCurrentTaskToDelayedList+0x3a>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d02:	4b1a      	ldr	r3, [pc, #104]	; (8006d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4819      	ldr	r0, [pc, #100]	; (8006d70 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d0c:	f7fe fae7 	bl	80052de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d10:	e026      	b.n	8006d60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4413      	add	r3, r2
 8006d18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d1a:	4b14      	ldr	r3, [pc, #80]	; (8006d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d209      	bcs.n	8006d3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d2a:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3304      	adds	r3, #4
 8006d34:	4619      	mov	r1, r3
 8006d36:	4610      	mov	r0, r2
 8006d38:	f7fe faf4 	bl	8005324 <vListInsert>
}
 8006d3c:	e010      	b.n	8006d60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d3e:	4b0e      	ldr	r3, [pc, #56]	; (8006d78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f7fe faea 	bl	8005324 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d202      	bcs.n	8006d60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d5a:	4a08      	ldr	r2, [pc, #32]	; (8006d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6013      	str	r3, [r2, #0]
}
 8006d60:	bf00      	nop
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	20000dfc 	.word	0x20000dfc
 8006d6c:	20000924 	.word	0x20000924
 8006d70:	20000de4 	.word	0x20000de4
 8006d74:	20000db4 	.word	0x20000db4
 8006d78:	20000db0 	.word	0x20000db0
 8006d7c:	20000e18 	.word	0x20000e18

08006d80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08a      	sub	sp, #40	; 0x28
 8006d84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d8a:	f000 fb05 	bl	8007398 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d8e:	4b1c      	ldr	r3, [pc, #112]	; (8006e00 <xTimerCreateTimerTask+0x80>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d021      	beq.n	8006dda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d9e:	1d3a      	adds	r2, r7, #4
 8006da0:	f107 0108 	add.w	r1, r7, #8
 8006da4:	f107 030c 	add.w	r3, r7, #12
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe fa53 	bl	8005254 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	9202      	str	r2, [sp, #8]
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	2302      	movs	r3, #2
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	4910      	ldr	r1, [pc, #64]	; (8006e04 <xTimerCreateTimerTask+0x84>)
 8006dc2:	4811      	ldr	r0, [pc, #68]	; (8006e08 <xTimerCreateTimerTask+0x88>)
 8006dc4:	f7ff f8b6 	bl	8005f34 <xTaskCreateStatic>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	4a10      	ldr	r2, [pc, #64]	; (8006e0c <xTimerCreateTimerTask+0x8c>)
 8006dcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006dce:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <xTimerCreateTimerTask+0x8c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	613b      	str	r3, [r7, #16]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006df6:	697b      	ldr	r3, [r7, #20]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20000e54 	.word	0x20000e54
 8006e04:	0800ba68 	.word	0x0800ba68
 8006e08:	08006f45 	.word	0x08006f45
 8006e0c:	20000e58 	.word	0x20000e58

08006e10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	; 0x28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10a      	bne.n	8006e3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	623b      	str	r3, [r7, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e3e:	4b1a      	ldr	r3, [pc, #104]	; (8006ea8 <xTimerGenericCommand+0x98>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d02a      	beq.n	8006e9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b05      	cmp	r3, #5
 8006e56:	dc18      	bgt.n	8006e8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e58:	f7ff feb2 	bl	8006bc0 <xTaskGetSchedulerState>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d109      	bne.n	8006e76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e62:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <xTimerGenericCommand+0x98>)
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	f107 0110 	add.w	r1, r7, #16
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6e:	f7fe fbff 	bl	8005670 <xQueueGenericSend>
 8006e72:	6278      	str	r0, [r7, #36]	; 0x24
 8006e74:	e012      	b.n	8006e9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <xTimerGenericCommand+0x98>)
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	f107 0110 	add.w	r1, r7, #16
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2200      	movs	r2, #0
 8006e82:	f7fe fbf5 	bl	8005670 <xQueueGenericSend>
 8006e86:	6278      	str	r0, [r7, #36]	; 0x24
 8006e88:	e008      	b.n	8006e9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e8a:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <xTimerGenericCommand+0x98>)
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	f107 0110 	add.w	r1, r7, #16
 8006e92:	2300      	movs	r3, #0
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	f7fe fce9 	bl	800586c <xQueueGenericSendFromISR>
 8006e9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3728      	adds	r7, #40	; 0x28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000e54 	.word	0x20000e54

08006eac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb6:	4b22      	ldr	r3, [pc, #136]	; (8006f40 <prvProcessExpiredTimer+0x94>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe fa65 	bl	8005394 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d022      	beq.n	8006f1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	18d1      	adds	r1, r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	6978      	ldr	r0, [r7, #20]
 8006ee6:	f000 f8cf 	bl	8007088 <prvInsertTimerInActiveList>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01f      	beq.n	8006f30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	2100      	movs	r1, #0
 8006efa:	6978      	ldr	r0, [r7, #20]
 8006efc:	f7ff ff88 	bl	8006e10 <xTimerGenericCommand>
 8006f00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d113      	bne.n	8006f30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	60fb      	str	r3, [r7, #12]
}
 8006f1a:	bf00      	nop
 8006f1c:	e7fe      	b.n	8006f1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f24:	f023 0301 	bic.w	r3, r3, #1
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	6978      	ldr	r0, [r7, #20]
 8006f36:	4798      	blx	r3
}
 8006f38:	bf00      	nop
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000e4c 	.word	0x20000e4c

08006f44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f4c:	f107 0308 	add.w	r3, r7, #8
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f857 	bl	8007004 <prvGetNextExpireTime>
 8006f56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 f803 	bl	8006f68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f62:	f000 f8d3 	bl	800710c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f66:	e7f1      	b.n	8006f4c <prvTimerTask+0x8>

08006f68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f72:	f7ff fa3b 	bl	80063ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f76:	f107 0308 	add.w	r3, r7, #8
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 f864 	bl	8007048 <prvSampleTimeNow>
 8006f80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d130      	bne.n	8006fea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <prvProcessTimerOrBlockTask+0x3c>
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d806      	bhi.n	8006fa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f96:	f7ff fa37 	bl	8006408 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f9a:	68f9      	ldr	r1, [r7, #12]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff ff85 	bl	8006eac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006fa2:	e024      	b.n	8006fee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d008      	beq.n	8006fbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006faa:	4b13      	ldr	r3, [pc, #76]	; (8006ff8 <prvProcessTimerOrBlockTask+0x90>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <prvProcessTimerOrBlockTask+0x50>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <prvProcessTimerOrBlockTask+0x52>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <prvProcessTimerOrBlockTask+0x94>)
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	f7fe ff7f 	bl	8005ecc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fce:	f7ff fa1b 	bl	8006408 <xTaskResumeAll>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fd8:	4b09      	ldr	r3, [pc, #36]	; (8007000 <prvProcessTimerOrBlockTask+0x98>)
 8006fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	f3bf 8f6f 	isb	sy
}
 8006fe8:	e001      	b.n	8006fee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fea:	f7ff fa0d 	bl	8006408 <xTaskResumeAll>
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000e50 	.word	0x20000e50
 8006ffc:	20000e54 	.word	0x20000e54
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <prvGetNextExpireTime+0x40>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <prvGetNextExpireTime+0x16>
 8007016:	2201      	movs	r2, #1
 8007018:	e000      	b.n	800701c <prvGetNextExpireTime+0x18>
 800701a:	2200      	movs	r2, #0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d105      	bne.n	8007034 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <prvGetNextExpireTime+0x40>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	e001      	b.n	8007038 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007038:	68fb      	ldr	r3, [r7, #12]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	bc80      	pop	{r7}
 8007042:	4770      	bx	lr
 8007044:	20000e4c 	.word	0x20000e4c

08007048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007050:	f7ff fa78 	bl	8006544 <xTaskGetTickCount>
 8007054:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007056:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <prvSampleTimeNow+0x3c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	429a      	cmp	r2, r3
 800705e:	d205      	bcs.n	800706c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007060:	f000 f936 	bl	80072d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e002      	b.n	8007072 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007072:	4a04      	ldr	r2, [pc, #16]	; (8007084 <prvSampleTimeNow+0x3c>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007078:	68fb      	ldr	r3, [r7, #12]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000e5c 	.word	0x20000e5c

08007088 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d812      	bhi.n	80070d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d302      	bcc.n	80070c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	e01b      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070c2:	4b10      	ldr	r3, [pc, #64]	; (8007104 <prvInsertTimerInActiveList+0x7c>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f7fe f929 	bl	8005324 <vListInsert>
 80070d2:	e012      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d206      	bcs.n	80070ea <prvInsertTimerInActiveList+0x62>
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e007      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ea:	4b07      	ldr	r3, [pc, #28]	; (8007108 <prvInsertTimerInActiveList+0x80>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fe f915 	bl	8005324 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070fa:	697b      	ldr	r3, [r7, #20]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000e50 	.word	0x20000e50
 8007108:	20000e4c 	.word	0x20000e4c

0800710c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08e      	sub	sp, #56	; 0x38
 8007110:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007112:	e0ca      	b.n	80072aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	da18      	bge.n	800714c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800711a:	1d3b      	adds	r3, r7, #4
 800711c:	3304      	adds	r3, #4
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	61fb      	str	r3, [r7, #28]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007142:	6850      	ldr	r0, [r2, #4]
 8007144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007146:	6892      	ldr	r2, [r2, #8]
 8007148:	4611      	mov	r1, r2
 800714a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f2c0 80ab 	blt.w	80072aa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	3304      	adds	r3, #4
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe f915 	bl	8005394 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800716a:	463b      	mov	r3, r7
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff ff6b 	bl	8007048 <prvSampleTimeNow>
 8007172:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b09      	cmp	r3, #9
 8007178:	f200 8096 	bhi.w	80072a8 <prvProcessReceivedCommands+0x19c>
 800717c:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <prvProcessReceivedCommands+0x78>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071ad 	.word	0x080071ad
 800718c:	080071ad 	.word	0x080071ad
 8007190:	08007221 	.word	0x08007221
 8007194:	08007235 	.word	0x08007235
 8007198:	0800727f 	.word	0x0800727f
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071ad 	.word	0x080071ad
 80071a4:	08007221 	.word	0x08007221
 80071a8:	08007235 	.word	0x08007235
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	18d1      	adds	r1, r2, r3
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071cc:	f7ff ff5c 	bl	8007088 <prvInsertTimerInActiveList>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d069      	beq.n	80072aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d05e      	beq.n	80072aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	441a      	add	r2, r3
 80071f4:	2300      	movs	r3, #0
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	2300      	movs	r3, #0
 80071fa:	2100      	movs	r1, #0
 80071fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071fe:	f7ff fe07 	bl	8006e10 <xTimerGenericCommand>
 8007202:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d14f      	bne.n	80072aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	61bb      	str	r3, [r7, #24]
}
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007226:	f023 0301 	bic.w	r3, r3, #1
 800722a:	b2da      	uxtb	r2, r3
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007232:	e03a      	b.n	80072aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	b2da      	uxtb	r2, r3
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	617b      	str	r3, [r7, #20]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	18d1      	adds	r1, r2, r3
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007278:	f7ff ff06 	bl	8007088 <prvInsertTimerInActiveList>
					break;
 800727c:	e015      	b.n	80072aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d103      	bne.n	8007294 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800728c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800728e:	f000 fb79 	bl	8007984 <vPortFree>
 8007292:	e00a      	b.n	80072aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800729a:	f023 0301 	bic.w	r3, r3, #1
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80072a6:	e000      	b.n	80072aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80072a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072aa:	4b08      	ldr	r3, [pc, #32]	; (80072cc <prvProcessReceivedCommands+0x1c0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	1d39      	adds	r1, r7, #4
 80072b0:	2200      	movs	r2, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fb72 	bl	800599c <xQueueReceive>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f47f af2a 	bne.w	8007114 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	3730      	adds	r7, #48	; 0x30
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000e54 	.word	0x20000e54

080072d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072d6:	e048      	b.n	800736a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072d8:	4b2d      	ldr	r3, [pc, #180]	; (8007390 <prvSwitchTimerLists+0xc0>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e2:	4b2b      	ldr	r3, [pc, #172]	; (8007390 <prvSwitchTimerLists+0xc0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe f84f 	bl	8005394 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d02e      	beq.n	800736a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4413      	add	r3, r2
 8007314:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	429a      	cmp	r2, r3
 800731c:	d90e      	bls.n	800733c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800732a:	4b19      	ldr	r3, [pc, #100]	; (8007390 <prvSwitchTimerLists+0xc0>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3304      	adds	r3, #4
 8007332:	4619      	mov	r1, r3
 8007334:	4610      	mov	r0, r2
 8007336:	f7fd fff5 	bl	8005324 <vListInsert>
 800733a:	e016      	b.n	800736a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800733c:	2300      	movs	r3, #0
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	2300      	movs	r3, #0
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	2100      	movs	r1, #0
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fd62 	bl	8006e10 <xTimerGenericCommand>
 800734c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	603b      	str	r3, [r7, #0]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800736a:	4b09      	ldr	r3, [pc, #36]	; (8007390 <prvSwitchTimerLists+0xc0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1b1      	bne.n	80072d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007374:	4b06      	ldr	r3, [pc, #24]	; (8007390 <prvSwitchTimerLists+0xc0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <prvSwitchTimerLists+0xc4>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a04      	ldr	r2, [pc, #16]	; (8007390 <prvSwitchTimerLists+0xc0>)
 8007380:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007382:	4a04      	ldr	r2, [pc, #16]	; (8007394 <prvSwitchTimerLists+0xc4>)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6013      	str	r3, [r2, #0]
}
 8007388:	bf00      	nop
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20000e4c 	.word	0x20000e4c
 8007394:	20000e50 	.word	0x20000e50

08007398 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800739e:	f000 f92d 	bl	80075fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073a2:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <prvCheckForValidListAndQueue+0x60>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d120      	bne.n	80073ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073aa:	4814      	ldr	r0, [pc, #80]	; (80073fc <prvCheckForValidListAndQueue+0x64>)
 80073ac:	f7fd ff6c 	bl	8005288 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073b0:	4813      	ldr	r0, [pc, #76]	; (8007400 <prvCheckForValidListAndQueue+0x68>)
 80073b2:	f7fd ff69 	bl	8005288 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073b6:	4b13      	ldr	r3, [pc, #76]	; (8007404 <prvCheckForValidListAndQueue+0x6c>)
 80073b8:	4a10      	ldr	r2, [pc, #64]	; (80073fc <prvCheckForValidListAndQueue+0x64>)
 80073ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073bc:	4b12      	ldr	r3, [pc, #72]	; (8007408 <prvCheckForValidListAndQueue+0x70>)
 80073be:	4a10      	ldr	r2, [pc, #64]	; (8007400 <prvCheckForValidListAndQueue+0x68>)
 80073c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	4b11      	ldr	r3, [pc, #68]	; (800740c <prvCheckForValidListAndQueue+0x74>)
 80073c8:	4a11      	ldr	r2, [pc, #68]	; (8007410 <prvCheckForValidListAndQueue+0x78>)
 80073ca:	2110      	movs	r1, #16
 80073cc:	200a      	movs	r0, #10
 80073ce:	f7fe f873 	bl	80054b8 <xQueueGenericCreateStatic>
 80073d2:	4603      	mov	r3, r0
 80073d4:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <prvCheckForValidListAndQueue+0x60>)
 80073d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073d8:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <prvCheckForValidListAndQueue+0x60>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073e0:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <prvCheckForValidListAndQueue+0x60>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	490b      	ldr	r1, [pc, #44]	; (8007414 <prvCheckForValidListAndQueue+0x7c>)
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fd48 	bl	8005e7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073ec:	f000 f936 	bl	800765c <vPortExitCritical>
}
 80073f0:	bf00      	nop
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000e54 	.word	0x20000e54
 80073fc:	20000e24 	.word	0x20000e24
 8007400:	20000e38 	.word	0x20000e38
 8007404:	20000e4c 	.word	0x20000e4c
 8007408:	20000e50 	.word	0x20000e50
 800740c:	20000f00 	.word	0x20000f00
 8007410:	20000e60 	.word	0x20000e60
 8007414:	0800ba70 	.word	0x0800ba70

08007418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3b04      	subs	r3, #4
 8007428:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b04      	subs	r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f023 0201 	bic.w	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3b04      	subs	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007448:	4a08      	ldr	r2, [pc, #32]	; (800746c <pxPortInitialiseStack+0x54>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3b14      	subs	r3, #20
 8007452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3b20      	subs	r3, #32
 800745e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007460:	68fb      	ldr	r3, [r7, #12]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr
 800746c:	08007471 	.word	0x08007471

08007470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007476:	2300      	movs	r3, #0
 8007478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <prvTaskExitError+0x54>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007482:	d00a      	beq.n	800749a <prvTaskExitError+0x2a>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	60fb      	str	r3, [r7, #12]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <prvTaskExitError+0x28>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	60bb      	str	r3, [r7, #8]
}
 80074ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074ae:	bf00      	nop
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0fc      	beq.n	80074b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074b6:	bf00      	nop
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	2000000c 	.word	0x2000000c
	...

080074d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <pxCurrentTCBConst2>)
 80074d2:	6819      	ldr	r1, [r3, #0]
 80074d4:	6808      	ldr	r0, [r1, #0]
 80074d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074da:	f380 8809 	msr	PSP, r0
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8811 	msr	BASEPRI, r0
 80074ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80074ee:	4770      	bx	lr

080074f0 <pxCurrentTCBConst2>:
 80074f0:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop

080074f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80074f8:	4806      	ldr	r0, [pc, #24]	; (8007514 <prvPortStartFirstTask+0x1c>)
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	f380 8808 	msr	MSP, r0
 8007502:	b662      	cpsie	i
 8007504:	b661      	cpsie	f
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	df00      	svc	0
 8007510:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007512:	bf00      	nop
 8007514:	e000ed08 	.word	0xe000ed08

08007518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800751e:	4b32      	ldr	r3, [pc, #200]	; (80075e8 <xPortStartScheduler+0xd0>)
 8007520:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	22ff      	movs	r2, #255	; 0xff
 800752e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007540:	b2da      	uxtb	r2, r3
 8007542:	4b2a      	ldr	r3, [pc, #168]	; (80075ec <xPortStartScheduler+0xd4>)
 8007544:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007546:	4b2a      	ldr	r3, [pc, #168]	; (80075f0 <xPortStartScheduler+0xd8>)
 8007548:	2207      	movs	r2, #7
 800754a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800754c:	e009      	b.n	8007562 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800754e:	4b28      	ldr	r3, [pc, #160]	; (80075f0 <xPortStartScheduler+0xd8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3b01      	subs	r3, #1
 8007554:	4a26      	ldr	r2, [pc, #152]	; (80075f0 <xPortStartScheduler+0xd8>)
 8007556:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007558:	78fb      	ldrb	r3, [r7, #3]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	b2db      	uxtb	r3, r3
 8007560:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007562:	78fb      	ldrb	r3, [r7, #3]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b80      	cmp	r3, #128	; 0x80
 800756c:	d0ef      	beq.n	800754e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800756e:	4b20      	ldr	r3, [pc, #128]	; (80075f0 <xPortStartScheduler+0xd8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f1c3 0307 	rsb	r3, r3, #7
 8007576:	2b04      	cmp	r3, #4
 8007578:	d00a      	beq.n	8007590 <xPortStartScheduler+0x78>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	60bb      	str	r3, [r7, #8]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007590:	4b17      	ldr	r3, [pc, #92]	; (80075f0 <xPortStartScheduler+0xd8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	4a16      	ldr	r2, [pc, #88]	; (80075f0 <xPortStartScheduler+0xd8>)
 8007598:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800759a:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <xPortStartScheduler+0xd8>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075a2:	4a13      	ldr	r2, [pc, #76]	; (80075f0 <xPortStartScheduler+0xd8>)
 80075a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075ae:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <xPortStartScheduler+0xdc>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a10      	ldr	r2, [pc, #64]	; (80075f4 <xPortStartScheduler+0xdc>)
 80075b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075ba:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <xPortStartScheduler+0xdc>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a0d      	ldr	r2, [pc, #52]	; (80075f4 <xPortStartScheduler+0xdc>)
 80075c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075c6:	f000 f8b9 	bl	800773c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <xPortStartScheduler+0xe0>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075d0:	f7ff ff92 	bl	80074f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075d4:	f7ff f87e 	bl	80066d4 <vTaskSwitchContext>
	prvTaskExitError();
 80075d8:	f7ff ff4a 	bl	8007470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	e000e400 	.word	0xe000e400
 80075ec:	20000f50 	.word	0x20000f50
 80075f0:	20000f54 	.word	0x20000f54
 80075f4:	e000ed20 	.word	0xe000ed20
 80075f8:	2000000c 	.word	0x2000000c

080075fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	607b      	str	r3, [r7, #4]
}
 8007614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007616:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <vPortEnterCritical+0x58>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3301      	adds	r3, #1
 800761c:	4a0d      	ldr	r2, [pc, #52]	; (8007654 <vPortEnterCritical+0x58>)
 800761e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007620:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <vPortEnterCritical+0x58>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d10f      	bne.n	8007648 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007628:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <vPortEnterCritical+0x5c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <vPortEnterCritical+0x4c>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	603b      	str	r3, [r7, #0]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <vPortEnterCritical+0x4a>
	}
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	2000000c 	.word	0x2000000c
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007662:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <vPortExitCritical+0x4c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <vPortExitCritical+0x24>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	607b      	str	r3, [r7, #4]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007680:	4b09      	ldr	r3, [pc, #36]	; (80076a8 <vPortExitCritical+0x4c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3b01      	subs	r3, #1
 8007686:	4a08      	ldr	r2, [pc, #32]	; (80076a8 <vPortExitCritical+0x4c>)
 8007688:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <vPortExitCritical+0x4c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d105      	bne.n	800769e <vPortExitCritical+0x42>
 8007692:	2300      	movs	r3, #0
 8007694:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	f383 8811 	msr	BASEPRI, r3
}
 800769c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr
 80076a8:	2000000c 	.word	0x2000000c
 80076ac:	00000000 	.word	0x00000000

080076b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076b0:	f3ef 8009 	mrs	r0, PSP
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <pxCurrentTCBConst>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076c0:	6010      	str	r0, [r2, #0]
 80076c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80076c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076ca:	f380 8811 	msr	BASEPRI, r0
 80076ce:	f7ff f801 	bl	80066d4 <vTaskSwitchContext>
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f380 8811 	msr	BASEPRI, r0
 80076da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80076de:	6819      	ldr	r1, [r3, #0]
 80076e0:	6808      	ldr	r0, [r1, #0]
 80076e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076e6:	f380 8809 	msr	PSP, r0
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	4770      	bx	lr

080076f0 <pxCurrentTCBConst>:
 80076f0:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop

080076f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	607b      	str	r3, [r7, #4]
}
 8007710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007712:	f7fe ff25 	bl	8006560 <xTaskIncrementTick>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800771c:	4b06      	ldr	r3, [pc, #24]	; (8007738 <SysTick_Handler+0x40>)
 800771e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	2300      	movs	r3, #0
 8007726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	f383 8811 	msr	BASEPRI, r3
}
 800772e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <vPortSetupTimerInterrupt+0x30>)
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007746:	4b0a      	ldr	r3, [pc, #40]	; (8007770 <vPortSetupTimerInterrupt+0x34>)
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <vPortSetupTimerInterrupt+0x38>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a09      	ldr	r2, [pc, #36]	; (8007778 <vPortSetupTimerInterrupt+0x3c>)
 8007752:	fba2 2303 	umull	r2, r3, r2, r3
 8007756:	099b      	lsrs	r3, r3, #6
 8007758:	4a08      	ldr	r2, [pc, #32]	; (800777c <vPortSetupTimerInterrupt+0x40>)
 800775a:	3b01      	subs	r3, #1
 800775c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800775e:	4b03      	ldr	r3, [pc, #12]	; (800776c <vPortSetupTimerInterrupt+0x30>)
 8007760:	2207      	movs	r2, #7
 8007762:	601a      	str	r2, [r3, #0]
}
 8007764:	bf00      	nop
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr
 800776c:	e000e010 	.word	0xe000e010
 8007770:	e000e018 	.word	0xe000e018
 8007774:	20000000 	.word	0x20000000
 8007778:	10624dd3 	.word	0x10624dd3
 800777c:	e000e014 	.word	0xe000e014

08007780 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007786:	f3ef 8305 	mrs	r3, IPSR
 800778a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b0f      	cmp	r3, #15
 8007790:	d914      	bls.n	80077bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007792:	4a16      	ldr	r2, [pc, #88]	; (80077ec <vPortValidateInterruptPriority+0x6c>)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800779c:	4b14      	ldr	r3, [pc, #80]	; (80077f0 <vPortValidateInterruptPriority+0x70>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	7afa      	ldrb	r2, [r7, #11]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d20a      	bcs.n	80077bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	607b      	str	r3, [r7, #4]
}
 80077b8:	bf00      	nop
 80077ba:	e7fe      	b.n	80077ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077bc:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <vPortValidateInterruptPriority+0x74>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <vPortValidateInterruptPriority+0x78>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d90a      	bls.n	80077e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	603b      	str	r3, [r7, #0]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <vPortValidateInterruptPriority+0x60>
	}
 80077e2:	bf00      	nop
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr
 80077ec:	e000e3f0 	.word	0xe000e3f0
 80077f0:	20000f50 	.word	0x20000f50
 80077f4:	e000ed0c 	.word	0xe000ed0c
 80077f8:	20000f54 	.word	0x20000f54

080077fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08a      	sub	sp, #40	; 0x28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007804:	2300      	movs	r3, #0
 8007806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007808:	f7fe fdf0 	bl	80063ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800780c:	4b58      	ldr	r3, [pc, #352]	; (8007970 <pvPortMalloc+0x174>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007814:	f000 f910 	bl	8007a38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007818:	4b56      	ldr	r3, [pc, #344]	; (8007974 <pvPortMalloc+0x178>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	f040 808e 	bne.w	8007942 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01d      	beq.n	8007868 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800782c:	2208      	movs	r2, #8
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	2b00      	cmp	r3, #0
 800783c:	d014      	beq.n	8007868 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f023 0307 	bic.w	r3, r3, #7
 8007844:	3308      	adds	r3, #8
 8007846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <pvPortMalloc+0x6c>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	617b      	str	r3, [r7, #20]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d069      	beq.n	8007942 <pvPortMalloc+0x146>
 800786e:	4b42      	ldr	r3, [pc, #264]	; (8007978 <pvPortMalloc+0x17c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	429a      	cmp	r2, r3
 8007876:	d864      	bhi.n	8007942 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007878:	4b40      	ldr	r3, [pc, #256]	; (800797c <pvPortMalloc+0x180>)
 800787a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800787c:	4b3f      	ldr	r3, [pc, #252]	; (800797c <pvPortMalloc+0x180>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007882:	e004      	b.n	800788e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	429a      	cmp	r2, r3
 8007896:	d903      	bls.n	80078a0 <pvPortMalloc+0xa4>
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f1      	bne.n	8007884 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078a0:	4b33      	ldr	r3, [pc, #204]	; (8007970 <pvPortMalloc+0x174>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d04b      	beq.n	8007942 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2208      	movs	r2, #8
 80078b0:	4413      	add	r3, r2
 80078b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	1ad2      	subs	r2, r2, r3
 80078c4:	2308      	movs	r3, #8
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d91f      	bls.n	800790c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4413      	add	r3, r2
 80078d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <pvPortMalloc+0xf8>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	613b      	str	r3, [r7, #16]
}
 80078f0:	bf00      	nop
 80078f2:	e7fe      	b.n	80078f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007906:	69b8      	ldr	r0, [r7, #24]
 8007908:	f000 f8f8 	bl	8007afc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800790c:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <pvPortMalloc+0x17c>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	4a18      	ldr	r2, [pc, #96]	; (8007978 <pvPortMalloc+0x17c>)
 8007918:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800791a:	4b17      	ldr	r3, [pc, #92]	; (8007978 <pvPortMalloc+0x17c>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b18      	ldr	r3, [pc, #96]	; (8007980 <pvPortMalloc+0x184>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d203      	bcs.n	800792e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007926:	4b14      	ldr	r3, [pc, #80]	; (8007978 <pvPortMalloc+0x17c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a15      	ldr	r2, [pc, #84]	; (8007980 <pvPortMalloc+0x184>)
 800792c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	4b10      	ldr	r3, [pc, #64]	; (8007974 <pvPortMalloc+0x178>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	431a      	orrs	r2, r3
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007942:	f7fe fd61 	bl	8006408 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <pvPortMalloc+0x16a>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <pvPortMalloc+0x168>
	return pvReturn;
 8007966:	69fb      	ldr	r3, [r7, #28]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3728      	adds	r7, #40	; 0x28
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20001b60 	.word	0x20001b60
 8007974:	20001b6c 	.word	0x20001b6c
 8007978:	20001b64 	.word	0x20001b64
 800797c:	20001b58 	.word	0x20001b58
 8007980:	20001b68 	.word	0x20001b68

08007984 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d048      	beq.n	8007a28 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007996:	2308      	movs	r3, #8
 8007998:	425b      	negs	r3, r3
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4413      	add	r3, r2
 800799e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	4b21      	ldr	r3, [pc, #132]	; (8007a30 <vPortFree+0xac>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4013      	ands	r3, r2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <vPortFree+0x44>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60fb      	str	r3, [r7, #12]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <vPortFree+0x62>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60bb      	str	r3, [r7, #8]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <vPortFree+0xac>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d019      	beq.n	8007a28 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d115      	bne.n	8007a28 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <vPortFree+0xac>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	43db      	mvns	r3, r3
 8007a06:	401a      	ands	r2, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a0c:	f7fe fcee 	bl	80063ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	4b07      	ldr	r3, [pc, #28]	; (8007a34 <vPortFree+0xb0>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4413      	add	r3, r2
 8007a1a:	4a06      	ldr	r2, [pc, #24]	; (8007a34 <vPortFree+0xb0>)
 8007a1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a1e:	6938      	ldr	r0, [r7, #16]
 8007a20:	f000 f86c 	bl	8007afc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a24:	f7fe fcf0 	bl	8006408 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a28:	bf00      	nop
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20001b6c 	.word	0x20001b6c
 8007a34:	20001b64 	.word	0x20001b64

08007a38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007a42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a44:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <prvHeapInit+0xac>)
 8007a46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00c      	beq.n	8007a6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3307      	adds	r3, #7
 8007a56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0307 	bic.w	r3, r3, #7
 8007a5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <prvHeapInit+0xac>)
 8007a68:	4413      	add	r3, r2
 8007a6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a70:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <prvHeapInit+0xb0>)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a76:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <prvHeapInit+0xb0>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a84:	2208      	movs	r2, #8
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	1a9b      	subs	r3, r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4a15      	ldr	r2, [pc, #84]	; (8007aec <prvHeapInit+0xb4>)
 8007a98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a9a:	4b14      	ldr	r3, [pc, #80]	; (8007aec <prvHeapInit+0xb4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007aa2:	4b12      	ldr	r3, [pc, #72]	; (8007aec <prvHeapInit+0xb4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <prvHeapInit+0xb4>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	4a0a      	ldr	r2, [pc, #40]	; (8007af0 <prvHeapInit+0xb8>)
 8007ac6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <prvHeapInit+0xbc>)
 8007ace:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ad0:	4b09      	ldr	r3, [pc, #36]	; (8007af8 <prvHeapInit+0xc0>)
 8007ad2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ad6:	601a      	str	r2, [r3, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000f58 	.word	0x20000f58
 8007ae8:	20001b58 	.word	0x20001b58
 8007aec:	20001b60 	.word	0x20001b60
 8007af0:	20001b68 	.word	0x20001b68
 8007af4:	20001b64 	.word	0x20001b64
 8007af8:	20001b6c 	.word	0x20001b6c

08007afc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b04:	4b27      	ldr	r3, [pc, #156]	; (8007ba4 <prvInsertBlockIntoFreeList+0xa8>)
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e002      	b.n	8007b10 <prvInsertBlockIntoFreeList+0x14>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d8f7      	bhi.n	8007b0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	4413      	add	r3, r2
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d108      	bne.n	8007b3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	441a      	add	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d118      	bne.n	8007b84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <prvInsertBlockIntoFreeList+0xac>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d00d      	beq.n	8007b7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	441a      	add	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	e008      	b.n	8007b8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ba8 <prvInsertBlockIntoFreeList+0xac>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	e003      	b.n	8007b8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d002      	beq.n	8007b9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr
 8007ba4:	20001b58 	.word	0x20001b58
 8007ba8:	20001b60 	.word	0x20001b60

08007bac <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007bb4:	4a24      	ldr	r2, [pc, #144]	; (8007c48 <RadioInit+0x9c>)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007bba:	4b24      	ldr	r3, [pc, #144]	; (8007c4c <RadioInit+0xa0>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007bc0:	4b22      	ldr	r3, [pc, #136]	; (8007c4c <RadioInit+0xa0>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007bc6:	4b21      	ldr	r3, [pc, #132]	; (8007c4c <RadioInit+0xa0>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007bcc:	4b1f      	ldr	r3, [pc, #124]	; (8007c4c <RadioInit+0xa0>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007bd2:	481f      	ldr	r0, [pc, #124]	; (8007c50 <RadioInit+0xa4>)
 8007bd4:	f001 ff88 	bl	8009ae8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007bd8:	4b1c      	ldr	r3, [pc, #112]	; (8007c4c <RadioInit+0xa0>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007bde:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <RadioInit+0xa0>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007be4:	f002 fa1c 	bl	800a020 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007be8:	2100      	movs	r1, #0
 8007bea:	2000      	movs	r0, #0
 8007bec:	f002 fde8 	bl	800a7c0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007bf0:	2204      	movs	r2, #4
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	f002 fba5 	bl	800a344 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007c06:	f002 fad5 	bl	800a1b4 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007c0a:	f000 fe91 	bl	8008930 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <RadioInit+0xa8>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	f04f 31ff 	mov.w	r1, #4294967295
 8007c1a:	480f      	ldr	r0, [pc, #60]	; (8007c58 <RadioInit+0xac>)
 8007c1c:	f003 fb64 	bl	800b2e8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007c20:	2300      	movs	r3, #0
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <RadioInit+0xb0>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	f04f 31ff 	mov.w	r1, #4294967295
 8007c2c:	480c      	ldr	r0, [pc, #48]	; (8007c60 <RadioInit+0xb4>)
 8007c2e:	f003 fb5b 	bl	800b2e8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007c32:	4809      	ldr	r0, [pc, #36]	; (8007c58 <RadioInit+0xac>)
 8007c34:	f003 fbfc 	bl	800b430 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007c38:	4809      	ldr	r0, [pc, #36]	; (8007c60 <RadioInit+0xb4>)
 8007c3a:	f003 fbf9 	bl	800b430 <UTIL_TIMER_Stop>
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20001c70 	.word	0x20001c70
 8007c4c:	20001c74 	.word	0x20001c74
 8007c50:	08008d29 	.word	0x08008d29
 8007c54:	08008cb1 	.word	0x08008cb1
 8007c58:	20001cd0 	.word	0x20001cd0
 8007c5c:	08008cc5 	.word	0x08008cc5
 8007c60:	20001ce8 	.word	0x20001ce8

08007c64 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007c68:	f001 ff86 	bl	8009b78 <SUBGRF_GetOperatingMode>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b07      	cmp	r3, #7
 8007c70:	d00a      	beq.n	8007c88 <RadioGetStatus+0x24>
 8007c72:	2b07      	cmp	r3, #7
 8007c74:	dc0a      	bgt.n	8007c8c <RadioGetStatus+0x28>
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d002      	beq.n	8007c80 <RadioGetStatus+0x1c>
 8007c7a:	2b05      	cmp	r3, #5
 8007c7c:	d002      	beq.n	8007c84 <RadioGetStatus+0x20>
 8007c7e:	e005      	b.n	8007c8c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007c80:	2302      	movs	r3, #2
 8007c82:	e004      	b.n	8007c8e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e002      	b.n	8007c8e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e000      	b.n	8007c8e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007c8c:	2300      	movs	r3, #0
    }
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007c9e:	4a2a      	ldr	r2, [pc, #168]	; (8007d48 <RadioSetModem+0xb4>)
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f003 f95d 	bl	800af66 <RFW_SetRadioModem>
    switch( modem )
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	d80e      	bhi.n	8007cd0 <RadioSetModem+0x3c>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <RadioSetModem+0x24>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007cdf 	.word	0x08007cdf
 8007cbc:	08007ced 	.word	0x08007ced
 8007cc0:	08007cd1 	.word	0x08007cd1
 8007cc4:	08007d13 	.word	0x08007d13
 8007cc8:	08007d21 	.word	0x08007d21
 8007ccc:	08007d2f 	.word	0x08007d2f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007cd0:	2003      	movs	r0, #3
 8007cd2:	f002 fb11 	bl	800a2f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007cd6:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <RadioSetModem+0xb4>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	735a      	strb	r2, [r3, #13]
        break;
 8007cdc:	e02f      	b.n	8007d3e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007cde:	2000      	movs	r0, #0
 8007ce0:	f002 fb0a 	bl	800a2f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007ce4:	4b18      	ldr	r3, [pc, #96]	; (8007d48 <RadioSetModem+0xb4>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	735a      	strb	r2, [r3, #13]
        break;
 8007cea:	e028      	b.n	8007d3e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8007cec:	2001      	movs	r0, #1
 8007cee:	f002 fb03 	bl	800a2f8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8007cf2:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <RadioSetModem+0xb4>)
 8007cf4:	7b5a      	ldrb	r2, [r3, #13]
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <RadioSetModem+0xb4>)
 8007cf8:	7b1b      	ldrb	r3, [r3, #12]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d01e      	beq.n	8007d3c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <RadioSetModem+0xb4>)
 8007d00:	7b1a      	ldrb	r2, [r3, #12]
 8007d02:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <RadioSetModem+0xb4>)
 8007d04:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <RadioSetModem+0xb4>)
 8007d08:	7b5b      	ldrb	r3, [r3, #13]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 ff9a 	bl	8008c44 <RadioSetPublicNetwork>
        }
        break;
 8007d10:	e014      	b.n	8007d3c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007d12:	2002      	movs	r0, #2
 8007d14:	f002 faf0 	bl	800a2f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007d18:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <RadioSetModem+0xb4>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	735a      	strb	r2, [r3, #13]
        break;
 8007d1e:	e00e      	b.n	8007d3e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007d20:	2002      	movs	r0, #2
 8007d22:	f002 fae9 	bl	800a2f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007d26:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <RadioSetModem+0xb4>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	735a      	strb	r2, [r3, #13]
        break;
 8007d2c:	e007      	b.n	8007d3e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007d2e:	2000      	movs	r0, #0
 8007d30:	f002 fae2 	bl	800a2f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007d34:	4b04      	ldr	r3, [pc, #16]	; (8007d48 <RadioSetModem+0xb4>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	735a      	strb	r2, [r3, #13]
        break;
 8007d3a:	e000      	b.n	8007d3e <RadioSetModem+0xaa>
        break;
 8007d3c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8007d3e:	bf00      	nop
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20001c74 	.word	0x20001c74

08007d4c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f002 fa89 	bl	800a26c <SUBGRF_SetRfFrequency>
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b090      	sub	sp, #64	; 0x40
 8007d66:	af0a      	add	r7, sp, #40	; 0x28
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007d72:	2301      	movs	r3, #1
 8007d74:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8007d7e:	f000 fdea 	bl	8008956 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007d82:	2000      	movs	r0, #0
 8007d84:	f7ff ff86 	bl	8007c94 <RadioSetModem>

    RadioSetChannel( freq );
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7ff ffdf 	bl	8007d4c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007d8e:	2301      	movs	r3, #1
 8007d90:	9309      	str	r3, [sp, #36]	; 0x24
 8007d92:	2300      	movs	r3, #0
 8007d94:	9308      	str	r3, [sp, #32]
 8007d96:	2300      	movs	r3, #0
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9306      	str	r3, [sp, #24]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	2300      	movs	r3, #0
 8007da8:	9303      	str	r3, [sp, #12]
 8007daa:	2300      	movs	r3, #0
 8007dac:	9302      	str	r3, [sp, #8]
 8007dae:	2303      	movs	r3, #3
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	2300      	movs	r3, #0
 8007db8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	f000 f83c 	bl	8007e3c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	f000 fdcd 	bl	8008964 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007dca:	f000 ff69 	bl	8008ca0 <RadioGetWakeupTime>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7f8 ff2d 	bl	8000c30 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007dd6:	f003 fbc5 	bl	800b564 <UTIL_TIMER_GetCurrentTime>
 8007dda:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007ddc:	e00d      	b.n	8007dfa <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8007dde:	2000      	movs	r0, #0
 8007de0:	f000 feae 	bl	8008b40 <RadioRssi>
 8007de4:	4603      	mov	r3, r0
 8007de6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007de8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	dd02      	ble.n	8007dfa <RadioIsChannelFree+0x98>
        {
            status = false;
 8007df4:	2300      	movs	r3, #0
 8007df6:	75fb      	strb	r3, [r7, #23]
            break;
 8007df8:	e006      	b.n	8007e08 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007dfa:	6938      	ldr	r0, [r7, #16]
 8007dfc:	f003 fbc4 	bl	800b588 <UTIL_TIMER_GetElapsedTime>
 8007e00:	4602      	mov	r2, r0
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d8ea      	bhi.n	8007dde <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007e08:	f000 fda5 	bl	8008956 <RadioStandby>

    return status;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007e20:	2300      	movs	r3, #0
 8007e22:	2200      	movs	r2, #0
 8007e24:	2100      	movs	r1, #0
 8007e26:	2000      	movs	r0, #0
 8007e28:	f002 f9c4 	bl	800a1b4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007e2c:	f001 ff75 	bl	8009d1a <SUBGRF_GetRandom>
 8007e30:	6078      	str	r0, [r7, #4]

    return rnd;
 8007e32:	687b      	ldr	r3, [r7, #4]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08a      	sub	sp, #40	; 0x28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	461a      	mov	r2, r3
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007e50:	4ab9      	ldr	r2, [pc, #740]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007e52:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007e56:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007e58:	f003 f843 	bl	800aee2 <RFW_DeInit>
    if( rxContinuous == true )
 8007e5c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007e68:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007e70:	4ab2      	ldr	r2, [pc, #712]	; (800813c <RadioSetRxConfig+0x300>)
 8007e72:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007e76:	7013      	strb	r3, [r2, #0]
 8007e78:	e002      	b.n	8007e80 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007e7a:	4bb0      	ldr	r3, [pc, #704]	; (800813c <RadioSetRxConfig+0x300>)
 8007e7c:	22ff      	movs	r2, #255	; 0xff
 8007e7e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	d009      	beq.n	8007e9a <RadioSetRxConfig+0x5e>
 8007e86:	2b05      	cmp	r3, #5
 8007e88:	f300 81d7 	bgt.w	800823a <RadioSetRxConfig+0x3fe>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 80bf 	beq.w	8008010 <RadioSetRxConfig+0x1d4>
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	f000 8124 	beq.w	80080e0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007e98:	e1cf      	b.n	800823a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	f002 f882 	bl	8009fa4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007ea0:	4ba5      	ldr	r3, [pc, #660]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007ea8:	4aa3      	ldr	r2, [pc, #652]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007eae:	4ba2      	ldr	r3, [pc, #648]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007eb0:	2209      	movs	r2, #9
 8007eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007eb6:	4ba0      	ldr	r3, [pc, #640]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007eb8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007ebe:	68b8      	ldr	r0, [r7, #8]
 8007ec0:	f002 ff42 	bl	800ad48 <SUBGRF_GetFskBandwidthRegValue>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	4b9b      	ldr	r3, [pc, #620]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007ece:	4b9a      	ldr	r3, [pc, #616]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007ed4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	4b97      	ldr	r3, [pc, #604]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007edc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007ede:	4b96      	ldr	r3, [pc, #600]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007ee4:	4b94      	ldr	r3, [pc, #592]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007ee6:	2210      	movs	r2, #16
 8007ee8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007eea:	4b93      	ldr	r3, [pc, #588]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007ef0:	4b91      	ldr	r3, [pc, #580]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007ef6:	4b91      	ldr	r3, [pc, #580]	; (800813c <RadioSetRxConfig+0x300>)
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	4b8f      	ldr	r3, [pc, #572]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007efc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007efe:	4b8e      	ldr	r3, [pc, #568]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007f04:	4b8c      	ldr	r3, [pc, #560]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007f0a:	2005      	movs	r0, #5
 8007f0c:	f7ff fec2 	bl	8007c94 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007f10:	488b      	ldr	r0, [pc, #556]	; (8008140 <RadioSetRxConfig+0x304>)
 8007f12:	f002 fae5 	bl	800a4e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f16:	488b      	ldr	r0, [pc, #556]	; (8008144 <RadioSetRxConfig+0x308>)
 8007f18:	f002 fbb4 	bl	800a684 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007f1c:	4a8a      	ldr	r2, [pc, #552]	; (8008148 <RadioSetRxConfig+0x30c>)
 8007f1e:	f107 031c 	add.w	r3, r7, #28
 8007f22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f26:	e883 0003 	stmia.w	r3, {r0, r1}
 8007f2a:	f107 031c 	add.w	r3, r7, #28
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 fe71 	bl	8009c16 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007f34:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f38:	f001 febc 	bl	8009cb4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007f3c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007f40:	f000 fe1d 	bl	8008b7e <RadioRead>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f4e:	f023 0310 	bic.w	r3, r3, #16
 8007f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007f60:	f000 fdfb 	bl	8008b5a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007f64:	2104      	movs	r1, #4
 8007f66:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8007f6a:	f000 fdf6 	bl	8008b5a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8007f6e:	f640 009b 	movw	r0, #2203	; 0x89b
 8007f72:	f000 fe04 	bl	8008b7e <RadioRead>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f80:	f023 031c 	bic.w	r3, r3, #28
 8007f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f8c:	f043 0308 	orr.w	r3, r3, #8
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	4619      	mov	r1, r3
 8007f94:	f640 009b 	movw	r0, #2203	; 0x89b
 8007f98:	f000 fddf 	bl	8008b5a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007f9c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007fa0:	f000 fded 	bl	8008b7e <RadioRead>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fae:	f023 0318 	bic.w	r3, r3, #24
 8007fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fba:	f043 0318 	orr.w	r3, r3, #24
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007fc6:	f000 fdc8 	bl	8008b5a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8007fca:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007fce:	f000 fdd6 	bl	8008b7e <RadioRead>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fe8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	4619      	mov	r1, r3
 8007ff0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007ff4:	f000 fdb1 	bl	8008b5a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007ff8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ffa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	fbb2 f3f3 	udiv	r3, r2, r3
 800800a:	4a4b      	ldr	r2, [pc, #300]	; (8008138 <RadioSetRxConfig+0x2fc>)
 800800c:	6093      	str	r3, [r2, #8]
            break;
 800800e:	e115      	b.n	800823c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008010:	2000      	movs	r0, #0
 8008012:	f001 ffc7 	bl	8009fa4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008016:	4b48      	ldr	r3, [pc, #288]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800801e:	4a46      	ldr	r2, [pc, #280]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008024:	4b44      	ldr	r3, [pc, #272]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008026:	220b      	movs	r2, #11
 8008028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800802c:	68b8      	ldr	r0, [r7, #8]
 800802e:	f002 fe8b 	bl	800ad48 <SUBGRF_GetFskBandwidthRegValue>
 8008032:	4603      	mov	r3, r0
 8008034:	461a      	mov	r2, r3
 8008036:	4b40      	ldr	r3, [pc, #256]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800803c:	4b3e      	ldr	r3, [pc, #248]	; (8008138 <RadioSetRxConfig+0x2fc>)
 800803e:	2200      	movs	r2, #0
 8008040:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008042:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	b29a      	uxth	r2, r3
 8008048:	4b3b      	ldr	r3, [pc, #236]	; (8008138 <RadioSetRxConfig+0x2fc>)
 800804a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800804c:	4b3a      	ldr	r3, [pc, #232]	; (8008138 <RadioSetRxConfig+0x2fc>)
 800804e:	2204      	movs	r2, #4
 8008050:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008052:	4b39      	ldr	r3, [pc, #228]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008054:	2218      	movs	r2, #24
 8008056:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008058:	4b37      	ldr	r3, [pc, #220]	; (8008138 <RadioSetRxConfig+0x2fc>)
 800805a:	2200      	movs	r2, #0
 800805c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800805e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008062:	f083 0301 	eor.w	r3, r3, #1
 8008066:	b2db      	uxtb	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	4b33      	ldr	r3, [pc, #204]	; (8008138 <RadioSetRxConfig+0x2fc>)
 800806c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800806e:	4b33      	ldr	r3, [pc, #204]	; (800813c <RadioSetRxConfig+0x300>)
 8008070:	781a      	ldrb	r2, [r3, #0]
 8008072:	4b31      	ldr	r3, [pc, #196]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008074:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8008076:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800807e:	4b2e      	ldr	r3, [pc, #184]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008080:	22f2      	movs	r2, #242	; 0xf2
 8008082:	75da      	strb	r2, [r3, #23]
 8008084:	e002      	b.n	800808c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008086:	4b2c      	ldr	r3, [pc, #176]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008088:	2201      	movs	r2, #1
 800808a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800808c:	4b2a      	ldr	r3, [pc, #168]	; (8008138 <RadioSetRxConfig+0x2fc>)
 800808e:	2201      	movs	r2, #1
 8008090:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008092:	f000 fc60 	bl	8008956 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8008096:	2000      	movs	r0, #0
 8008098:	f7ff fdfc 	bl	8007c94 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800809c:	4828      	ldr	r0, [pc, #160]	; (8008140 <RadioSetRxConfig+0x304>)
 800809e:	f002 fa1f 	bl	800a4e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80080a2:	4828      	ldr	r0, [pc, #160]	; (8008144 <RadioSetRxConfig+0x308>)
 80080a4:	f002 faee 	bl	800a684 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80080a8:	4a28      	ldr	r2, [pc, #160]	; (800814c <RadioSetRxConfig+0x310>)
 80080aa:	f107 0314 	add.w	r3, r7, #20
 80080ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80080b6:	f107 0314 	add.w	r3, r7, #20
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 fdab 	bl	8009c16 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80080c0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80080c4:	f001 fdf6 	bl	8009cb4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80080c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80080ce:	fb02 f303 	mul.w	r3, r2, r3
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080da:	4a17      	ldr	r2, [pc, #92]	; (8008138 <RadioSetRxConfig+0x2fc>)
 80080dc:	6093      	str	r3, [r2, #8]
            break;
 80080de:	e0ad      	b.n	800823c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80080e0:	2000      	movs	r0, #0
 80080e2:	f001 ff5f 	bl	8009fa4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <RadioSetRxConfig+0x2fc>)
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	4b11      	ldr	r3, [pc, #68]	; (8008138 <RadioSetRxConfig+0x2fc>)
 80080f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80080f8:	4a15      	ldr	r2, [pc, #84]	; (8008150 <RadioSetRxConfig+0x314>)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	4413      	add	r3, r2
 80080fe:	781a      	ldrb	r2, [r3, #0]
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8008106:	4a0c      	ldr	r2, [pc, #48]	; (8008138 <RadioSetRxConfig+0x2fc>)
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d105      	bne.n	8008120 <RadioSetRxConfig+0x2e4>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b0b      	cmp	r3, #11
 8008118:	d008      	beq.n	800812c <RadioSetRxConfig+0x2f0>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b0c      	cmp	r3, #12
 800811e:	d005      	beq.n	800812c <RadioSetRxConfig+0x2f0>
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d116      	bne.n	8008154 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b0c      	cmp	r3, #12
 800812a:	d113      	bne.n	8008154 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <RadioSetRxConfig+0x2fc>)
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008134:	e012      	b.n	800815c <RadioSetRxConfig+0x320>
 8008136:	bf00      	nop
 8008138:	20001c74 	.word	0x20001c74
 800813c:	20000010 	.word	0x20000010
 8008140:	20001cac 	.word	0x20001cac
 8008144:	20001c82 	.word	0x20001c82
 8008148:	0800ba78 	.word	0x0800ba78
 800814c:	0800ba80 	.word	0x0800ba80
 8008150:	0800bcc4 	.word	0x0800bcc4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008154:	4b3b      	ldr	r3, [pc, #236]	; (8008244 <RadioSetRxConfig+0x408>)
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800815c:	4b39      	ldr	r3, [pc, #228]	; (8008244 <RadioSetRxConfig+0x408>)
 800815e:	2201      	movs	r2, #1
 8008160:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008162:	4b38      	ldr	r3, [pc, #224]	; (8008244 <RadioSetRxConfig+0x408>)
 8008164:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008168:	2b05      	cmp	r3, #5
 800816a:	d004      	beq.n	8008176 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800816c:	4b35      	ldr	r3, [pc, #212]	; (8008244 <RadioSetRxConfig+0x408>)
 800816e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008172:	2b06      	cmp	r3, #6
 8008174:	d10a      	bne.n	800818c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008176:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008178:	2b0b      	cmp	r3, #11
 800817a:	d803      	bhi.n	8008184 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800817c:	4b31      	ldr	r3, [pc, #196]	; (8008244 <RadioSetRxConfig+0x408>)
 800817e:	220c      	movs	r2, #12
 8008180:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008182:	e006      	b.n	8008192 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008184:	4a2f      	ldr	r2, [pc, #188]	; (8008244 <RadioSetRxConfig+0x408>)
 8008186:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008188:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800818a:	e002      	b.n	8008192 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800818c:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <RadioSetRxConfig+0x408>)
 800818e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008190:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008192:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008196:	4b2b      	ldr	r3, [pc, #172]	; (8008244 <RadioSetRxConfig+0x408>)
 8008198:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800819a:	4b2b      	ldr	r3, [pc, #172]	; (8008248 <RadioSetRxConfig+0x40c>)
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	4b29      	ldr	r3, [pc, #164]	; (8008244 <RadioSetRxConfig+0x408>)
 80081a0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80081a2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80081a6:	4b27      	ldr	r3, [pc, #156]	; (8008244 <RadioSetRxConfig+0x408>)
 80081a8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80081ac:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80081b0:	4b24      	ldr	r3, [pc, #144]	; (8008244 <RadioSetRxConfig+0x408>)
 80081b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80081b6:	f000 fbce 	bl	8008956 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80081ba:	2001      	movs	r0, #1
 80081bc:	f7ff fd6a 	bl	8007c94 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80081c0:	4822      	ldr	r0, [pc, #136]	; (800824c <RadioSetRxConfig+0x410>)
 80081c2:	f002 f98d 	bl	800a4e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80081c6:	4822      	ldr	r0, [pc, #136]	; (8008250 <RadioSetRxConfig+0x414>)
 80081c8:	f002 fa5c 	bl	800a684 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80081cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fef6 	bl	8009fc2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80081d6:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80081da:	f002 fbaf 	bl	800a93c <SUBGRF_ReadRegister>
 80081de:	4603      	mov	r3, r0
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	4619      	mov	r1, r3
 80081e8:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80081ec:	f002 fb92 	bl	800a914 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80081f0:	4b14      	ldr	r3, [pc, #80]	; (8008244 <RadioSetRxConfig+0x408>)
 80081f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d10d      	bne.n	8008216 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80081fa:	f240 7036 	movw	r0, #1846	; 0x736
 80081fe:	f002 fb9d 	bl	800a93c <SUBGRF_ReadRegister>
 8008202:	4603      	mov	r3, r0
 8008204:	f023 0304 	bic.w	r3, r3, #4
 8008208:	b2db      	uxtb	r3, r3
 800820a:	4619      	mov	r1, r3
 800820c:	f240 7036 	movw	r0, #1846	; 0x736
 8008210:	f002 fb80 	bl	800a914 <SUBGRF_WriteRegister>
 8008214:	e00c      	b.n	8008230 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008216:	f240 7036 	movw	r0, #1846	; 0x736
 800821a:	f002 fb8f 	bl	800a93c <SUBGRF_ReadRegister>
 800821e:	4603      	mov	r3, r0
 8008220:	f043 0304 	orr.w	r3, r3, #4
 8008224:	b2db      	uxtb	r3, r3
 8008226:	4619      	mov	r1, r3
 8008228:	f240 7036 	movw	r0, #1846	; 0x736
 800822c:	f002 fb72 	bl	800a914 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008230:	4b04      	ldr	r3, [pc, #16]	; (8008244 <RadioSetRxConfig+0x408>)
 8008232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008236:	609a      	str	r2, [r3, #8]
            break;
 8008238:	e000      	b.n	800823c <RadioSetRxConfig+0x400>
            break;
 800823a:	bf00      	nop
    }
}
 800823c:	bf00      	nop
 800823e:	3728      	adds	r7, #40	; 0x28
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	20001c74 	.word	0x20001c74
 8008248:	20000010 	.word	0x20000010
 800824c:	20001cac 	.word	0x20001cac
 8008250:	20001c82 	.word	0x20001c82

08008254 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60ba      	str	r2, [r7, #8]
 800825c:	607b      	str	r3, [r7, #4]
 800825e:	4603      	mov	r3, r0
 8008260:	73fb      	strb	r3, [r7, #15]
 8008262:	460b      	mov	r3, r1
 8008264:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8008266:	f002 fe3c 	bl	800aee2 <RFW_DeInit>
    switch( modem )
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	2b04      	cmp	r3, #4
 800826e:	f000 80c7 	beq.w	8008400 <RadioSetTxConfig+0x1ac>
 8008272:	2b04      	cmp	r3, #4
 8008274:	f300 80d6 	bgt.w	8008424 <RadioSetTxConfig+0x1d0>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <RadioSetTxConfig+0x2e>
 800827c:	2b01      	cmp	r3, #1
 800827e:	d059      	beq.n	8008334 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008280:	e0d0      	b.n	8008424 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008282:	4b77      	ldr	r3, [pc, #476]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800828a:	4a75      	ldr	r2, [pc, #468]	; (8008460 <RadioSetTxConfig+0x20c>)
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008290:	4b73      	ldr	r3, [pc, #460]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008292:	220b      	movs	r2, #11
 8008294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f002 fd55 	bl	800ad48 <SUBGRF_GetFskBandwidthRegValue>
 800829e:	4603      	mov	r3, r0
 80082a0:	461a      	mov	r2, r3
 80082a2:	4b6f      	ldr	r3, [pc, #444]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80082a8:	4a6d      	ldr	r2, [pc, #436]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80082ae:	4b6c      	ldr	r3, [pc, #432]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80082b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	4b69      	ldr	r3, [pc, #420]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082bc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80082be:	4b68      	ldr	r3, [pc, #416]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082c0:	2204      	movs	r2, #4
 80082c2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80082c4:	4b66      	ldr	r3, [pc, #408]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082c6:	2218      	movs	r2, #24
 80082c8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80082ca:	4b65      	ldr	r3, [pc, #404]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80082d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082d4:	f083 0301 	eor.w	r3, r3, #1
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	4b60      	ldr	r3, [pc, #384]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082de:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80082e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80082e8:	4b5d      	ldr	r3, [pc, #372]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082ea:	22f2      	movs	r2, #242	; 0xf2
 80082ec:	75da      	strb	r2, [r3, #23]
 80082ee:	e002      	b.n	80082f6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80082f0:	4b5b      	ldr	r3, [pc, #364]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80082f6:	4b5a      	ldr	r3, [pc, #360]	; (8008460 <RadioSetTxConfig+0x20c>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80082fc:	f000 fb2b 	bl	8008956 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008300:	2000      	movs	r0, #0
 8008302:	f7ff fcc7 	bl	8007c94 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008306:	4857      	ldr	r0, [pc, #348]	; (8008464 <RadioSetTxConfig+0x210>)
 8008308:	f002 f8ea 	bl	800a4e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800830c:	4856      	ldr	r0, [pc, #344]	; (8008468 <RadioSetTxConfig+0x214>)
 800830e:	f002 f9b9 	bl	800a684 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008312:	4a56      	ldr	r2, [pc, #344]	; (800846c <RadioSetTxConfig+0x218>)
 8008314:	f107 0310 	add.w	r3, r7, #16
 8008318:	e892 0003 	ldmia.w	r2, {r0, r1}
 800831c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008320:	f107 0310 	add.w	r3, r7, #16
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fc76 	bl	8009c16 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800832a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800832e:	f001 fcc1 	bl	8009cb4 <SUBGRF_SetWhiteningSeed>
            break;
 8008332:	e078      	b.n	8008426 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008334:	4b4a      	ldr	r3, [pc, #296]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	b2da      	uxtb	r2, r3
 8008340:	4b47      	ldr	r3, [pc, #284]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008346:	4a4a      	ldr	r2, [pc, #296]	; (8008470 <RadioSetTxConfig+0x21c>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4413      	add	r3, r2
 800834c:	781a      	ldrb	r2, [r3, #0]
 800834e:	4b44      	ldr	r3, [pc, #272]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008354:	4a42      	ldr	r2, [pc, #264]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008356:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800835a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d105      	bne.n	8008370 <RadioSetTxConfig+0x11c>
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	2b0b      	cmp	r3, #11
 8008368:	d008      	beq.n	800837c <RadioSetTxConfig+0x128>
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	2b0c      	cmp	r3, #12
 800836e:	d005      	beq.n	800837c <RadioSetTxConfig+0x128>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d107      	bne.n	8008386 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	2b0c      	cmp	r3, #12
 800837a:	d104      	bne.n	8008386 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800837c:	4b38      	ldr	r3, [pc, #224]	; (8008460 <RadioSetTxConfig+0x20c>)
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008384:	e003      	b.n	800838e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008386:	4b36      	ldr	r3, [pc, #216]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800838e:	4b34      	ldr	r3, [pc, #208]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008390:	2201      	movs	r2, #1
 8008392:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008394:	4b32      	ldr	r3, [pc, #200]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800839a:	2b05      	cmp	r3, #5
 800839c:	d004      	beq.n	80083a8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800839e:	4b30      	ldr	r3, [pc, #192]	; (8008460 <RadioSetTxConfig+0x20c>)
 80083a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80083a4:	2b06      	cmp	r3, #6
 80083a6:	d10a      	bne.n	80083be <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80083a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083aa:	2b0b      	cmp	r3, #11
 80083ac:	d803      	bhi.n	80083b6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80083ae:	4b2c      	ldr	r3, [pc, #176]	; (8008460 <RadioSetTxConfig+0x20c>)
 80083b0:	220c      	movs	r2, #12
 80083b2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80083b4:	e006      	b.n	80083c4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80083b6:	4a2a      	ldr	r2, [pc, #168]	; (8008460 <RadioSetTxConfig+0x20c>)
 80083b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083ba:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80083bc:	e002      	b.n	80083c4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80083be:	4a28      	ldr	r2, [pc, #160]	; (8008460 <RadioSetTxConfig+0x20c>)
 80083c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083c2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80083c4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80083c8:	4b25      	ldr	r3, [pc, #148]	; (8008460 <RadioSetTxConfig+0x20c>)
 80083ca:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80083cc:	4b29      	ldr	r3, [pc, #164]	; (8008474 <RadioSetTxConfig+0x220>)
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	4b23      	ldr	r3, [pc, #140]	; (8008460 <RadioSetTxConfig+0x20c>)
 80083d2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80083d4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80083d8:	4b21      	ldr	r3, [pc, #132]	; (8008460 <RadioSetTxConfig+0x20c>)
 80083da:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80083de:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80083e2:	4b1f      	ldr	r3, [pc, #124]	; (8008460 <RadioSetTxConfig+0x20c>)
 80083e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80083e8:	f000 fab5 	bl	8008956 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80083ec:	2001      	movs	r0, #1
 80083ee:	f7ff fc51 	bl	8007c94 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80083f2:	481c      	ldr	r0, [pc, #112]	; (8008464 <RadioSetTxConfig+0x210>)
 80083f4:	f002 f874 	bl	800a4e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80083f8:	481b      	ldr	r0, [pc, #108]	; (8008468 <RadioSetTxConfig+0x214>)
 80083fa:	f002 f943 	bl	800a684 <SUBGRF_SetPacketParams>
            break;
 80083fe:	e012      	b.n	8008426 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008400:	2004      	movs	r0, #4
 8008402:	f7ff fc47 	bl	8007c94 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008406:	4b16      	ldr	r3, [pc, #88]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008408:	2202      	movs	r2, #2
 800840a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800840e:	4a14      	ldr	r2, [pc, #80]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008414:	4b12      	ldr	r3, [pc, #72]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008416:	2216      	movs	r2, #22
 8008418:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800841c:	4811      	ldr	r0, [pc, #68]	; (8008464 <RadioSetTxConfig+0x210>)
 800841e:	f002 f85f 	bl	800a4e0 <SUBGRF_SetModulationParams>
            break;
 8008422:	e000      	b.n	8008426 <RadioSetTxConfig+0x1d2>
            break;
 8008424:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800842a:	4618      	mov	r0, r3
 800842c:	f002 fb8e 	bl	800ab4c <SUBGRF_SetRfTxPower>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008436:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800843a:	210e      	movs	r1, #14
 800843c:	f640 101f 	movw	r0, #2335	; 0x91f
 8008440:	f002 fa68 	bl	800a914 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008446:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800844a:	4618      	mov	r0, r3
 800844c:	f002 fd5d 	bl	800af0a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008450:	4a03      	ldr	r2, [pc, #12]	; (8008460 <RadioSetTxConfig+0x20c>)
 8008452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008454:	6053      	str	r3, [r2, #4]
}
 8008456:	bf00      	nop
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20001c74 	.word	0x20001c74
 8008464:	20001cac 	.word	0x20001cac
 8008468:	20001c82 	.word	0x20001c82
 800846c:	0800ba80 	.word	0x0800ba80
 8008470:	0800bcc4 	.word	0x0800bcc4
 8008474:	20000010 	.word	0x20000010

08008478 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
    return true;
 8008480:	2301      	movs	r3, #1
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	bc80      	pop	{r7}
 800848a:	4770      	bx	lr

0800848c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	2b0a      	cmp	r3, #10
 800849e:	d83e      	bhi.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
 80084a0:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <RadioGetLoRaBandwidthInHz+0x1c>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	080084e5 	.word	0x080084e5
 80084b0:	080084f5 	.word	0x080084f5
 80084b4:	08008505 	.word	0x08008505
 80084b8:	0800850d 	.word	0x0800850d
 80084bc:	08008513 	.word	0x08008513
 80084c0:	08008519 	.word	0x08008519
 80084c4:	0800851f 	.word	0x0800851f
 80084c8:	080084dd 	.word	0x080084dd
 80084cc:	080084ed 	.word	0x080084ed
 80084d0:	080084fd 	.word	0x080084fd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80084d4:	f641 6384 	movw	r3, #7812	; 0x1e84
 80084d8:	60fb      	str	r3, [r7, #12]
        break;
 80084da:	e020      	b.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80084dc:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80084e0:	60fb      	str	r3, [r7, #12]
        break;
 80084e2:	e01c      	b.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80084e4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80084e8:	60fb      	str	r3, [r7, #12]
        break;
 80084ea:	e018      	b.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80084ec:	f245 1361 	movw	r3, #20833	; 0x5161
 80084f0:	60fb      	str	r3, [r7, #12]
        break;
 80084f2:	e014      	b.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80084f4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80084f8:	60fb      	str	r3, [r7, #12]
        break;
 80084fa:	e010      	b.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80084fc:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8008500:	60fb      	str	r3, [r7, #12]
        break;
 8008502:	e00c      	b.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008504:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008508:	60fb      	str	r3, [r7, #12]
        break;
 800850a:	e008      	b.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800850c:	4b07      	ldr	r3, [pc, #28]	; (800852c <RadioGetLoRaBandwidthInHz+0xa0>)
 800850e:	60fb      	str	r3, [r7, #12]
        break;
 8008510:	e005      	b.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <RadioGetLoRaBandwidthInHz+0xa4>)
 8008514:	60fb      	str	r3, [r7, #12]
        break;
 8008516:	e002      	b.n	800851e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008518:	4b06      	ldr	r3, [pc, #24]	; (8008534 <RadioGetLoRaBandwidthInHz+0xa8>)
 800851a:	60fb      	str	r3, [r7, #12]
        break;
 800851c:	bf00      	nop
    }

    return bandwidthInHz;
 800851e:	68fb      	ldr	r3, [r7, #12]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	0001e848 	.word	0x0001e848
 8008530:	0003d090 	.word	0x0003d090
 8008534:	0007a120 	.word	0x0007a120

08008538 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	4608      	mov	r0, r1
 8008542:	4611      	mov	r1, r2
 8008544:	461a      	mov	r2, r3
 8008546:	4603      	mov	r3, r0
 8008548:	70fb      	strb	r3, [r7, #3]
 800854a:	460b      	mov	r3, r1
 800854c:	803b      	strh	r3, [r7, #0]
 800854e:	4613      	mov	r3, r2
 8008550:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8008552:	883b      	ldrh	r3, [r7, #0]
 8008554:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008556:	78ba      	ldrb	r2, [r7, #2]
 8008558:	f082 0201 	eor.w	r2, r2, #1
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	2a00      	cmp	r2, #0
 8008560:	d001      	beq.n	8008566 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008562:	2208      	movs	r2, #8
 8008564:	e000      	b.n	8008568 <RadioGetGfskTimeOnAirNumerator+0x30>
 8008566:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008568:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800856a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800856e:	7c3b      	ldrb	r3, [r7, #16]
 8008570:	7d39      	ldrb	r1, [r7, #20]
 8008572:	2900      	cmp	r1, #0
 8008574:	d001      	beq.n	800857a <RadioGetGfskTimeOnAirNumerator+0x42>
 8008576:	2102      	movs	r1, #2
 8008578:	e000      	b.n	800857c <RadioGetGfskTimeOnAirNumerator+0x44>
 800857a:	2100      	movs	r1, #0
 800857c:	440b      	add	r3, r1
 800857e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008580:	4413      	add	r3, r2
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800858c:	b480      	push	{r7}
 800858e:	b08b      	sub	sp, #44	; 0x2c
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	4611      	mov	r1, r2
 8008598:	461a      	mov	r2, r3
 800859a:	460b      	mov	r3, r1
 800859c:	71fb      	strb	r3, [r7, #7]
 800859e:	4613      	mov	r3, r2
 80085a0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	3304      	adds	r3, #4
 80085a6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b05      	cmp	r3, #5
 80085b2:	d002      	beq.n	80085ba <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b06      	cmp	r3, #6
 80085b8:	d104      	bne.n	80085c4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80085ba:	88bb      	ldrh	r3, [r7, #4]
 80085bc:	2b0b      	cmp	r3, #11
 80085be:	d801      	bhi.n	80085c4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80085c0:	230c      	movs	r3, #12
 80085c2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b0b      	cmp	r3, #11
 80085ce:	d008      	beq.n	80085e2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b0c      	cmp	r3, #12
 80085d4:	d005      	beq.n	80085e2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d105      	bne.n	80085e8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b0c      	cmp	r3, #12
 80085e0:	d102      	bne.n	80085e8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80085e2:	2301      	movs	r3, #1
 80085e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80085e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80085ec:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80085ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085f2:	2a00      	cmp	r2, #0
 80085f4:	d001      	beq.n	80085fa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80085f6:	2210      	movs	r2, #16
 80085f8:	e000      	b.n	80085fc <RadioGetLoRaTimeOnAirNumerator+0x70>
 80085fa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80085fc:	4413      	add	r3, r2
 80085fe:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008604:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008606:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800860a:	2a00      	cmp	r2, #0
 800860c:	d001      	beq.n	8008612 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800860e:	2200      	movs	r2, #0
 8008610:	e000      	b.n	8008614 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008612:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008614:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008616:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b06      	cmp	r3, #6
 800861c:	d803      	bhi.n	8008626 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	623b      	str	r3, [r7, #32]
 8008624:	e00e      	b.n	8008644 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	3308      	adds	r3, #8
 800862a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800862c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	3b02      	subs	r3, #2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	623b      	str	r3, [r7, #32]
 800863c:	e002      	b.n	8008644 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	2b00      	cmp	r3, #0
 8008648:	da01      	bge.n	800864e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800864e:	69fa      	ldr	r2, [r7, #28]
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	4413      	add	r3, r2
 8008654:	1e5a      	subs	r2, r3, #1
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	fb92 f3f3 	sdiv	r3, r2, r3
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	fb03 f202 	mul.w	r2, r3, r2
 8008662:	88bb      	ldrh	r3, [r7, #4]
 8008664:	4413      	add	r3, r2
    int32_t intermediate =
 8008666:	330c      	adds	r3, #12
 8008668:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b06      	cmp	r3, #6
 800866e:	d802      	bhi.n	8008676 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	3302      	adds	r3, #2
 8008674:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	3b02      	subs	r3, #2
 8008680:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008684:	4618      	mov	r0, r3
 8008686:	372c      	adds	r7, #44	; 0x2c
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr
	...

08008690 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08a      	sub	sp, #40	; 0x28
 8008694:	af04      	add	r7, sp, #16
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	461a      	mov	r2, r3
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]
 80086a0:	4613      	mov	r3, r2
 80086a2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80086a8:	2301      	movs	r3, #1
 80086aa:	613b      	str	r3, [r7, #16]

    switch( modem )
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <RadioTimeOnAir+0x28>
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d017      	beq.n	80086e6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80086b6:	e035      	b.n	8008724 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80086b8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80086bc:	8c3a      	ldrh	r2, [r7, #32]
 80086be:	7bb9      	ldrb	r1, [r7, #14]
 80086c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	4603      	mov	r3, r0
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff ff32 	bl	8008538 <RadioGetGfskTimeOnAirNumerator>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086da:	fb02 f303 	mul.w	r3, r2, r3
 80086de:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	613b      	str	r3, [r7, #16]
        break;
 80086e4:	e01e      	b.n	8008724 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80086e6:	8c39      	ldrh	r1, [r7, #32]
 80086e8:	7bba      	ldrb	r2, [r7, #14]
 80086ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086ee:	9302      	str	r3, [sp, #8]
 80086f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	460b      	mov	r3, r1
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	68b8      	ldr	r0, [r7, #8]
 8008702:	f7ff ff43 	bl	800858c <RadioGetLoRaTimeOnAirNumerator>
 8008706:	4603      	mov	r3, r0
 8008708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800870c:	fb02 f303 	mul.w	r3, r2, r3
 8008710:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008712:	4a0a      	ldr	r2, [pc, #40]	; (800873c <RadioTimeOnAir+0xac>)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	4413      	add	r3, r2
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff feb6 	bl	800848c <RadioGetLoRaBandwidthInHz>
 8008720:	6138      	str	r0, [r7, #16]
        break;
 8008722:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	4413      	add	r3, r2
 800872a:	1e5a      	subs	r2, r3, #1
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	0800bcc4 	.word	0x0800bcc4

08008740 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800874c:	2300      	movs	r3, #0
 800874e:	2200      	movs	r2, #0
 8008750:	f240 2101 	movw	r1, #513	; 0x201
 8008754:	f240 2001 	movw	r0, #513	; 0x201
 8008758:	f001 fd2c 	bl	800a1b4 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800875c:	4b70      	ldr	r3, [pc, #448]	; (8008920 <RadioSend+0x1e0>)
 800875e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008762:	2101      	movs	r1, #1
 8008764:	4618      	mov	r0, r3
 8008766:	f002 f9c9 	bl	800aafc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800876a:	4b6d      	ldr	r3, [pc, #436]	; (8008920 <RadioSend+0x1e0>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d112      	bne.n	8008798 <RadioSend+0x58>
 8008772:	4b6b      	ldr	r3, [pc, #428]	; (8008920 <RadioSend+0x1e0>)
 8008774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008778:	2b06      	cmp	r3, #6
 800877a:	d10d      	bne.n	8008798 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800877c:	f640 0089 	movw	r0, #2185	; 0x889
 8008780:	f002 f8dc 	bl	800a93c <SUBGRF_ReadRegister>
 8008784:	4603      	mov	r3, r0
 8008786:	f023 0304 	bic.w	r3, r3, #4
 800878a:	b2db      	uxtb	r3, r3
 800878c:	4619      	mov	r1, r3
 800878e:	f640 0089 	movw	r0, #2185	; 0x889
 8008792:	f002 f8bf 	bl	800a914 <SUBGRF_WriteRegister>
 8008796:	e00c      	b.n	80087b2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008798:	f640 0089 	movw	r0, #2185	; 0x889
 800879c:	f002 f8ce 	bl	800a93c <SUBGRF_ReadRegister>
 80087a0:	4603      	mov	r3, r0
 80087a2:	f043 0304 	orr.w	r3, r3, #4
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	4619      	mov	r1, r3
 80087aa:	f640 0089 	movw	r0, #2185	; 0x889
 80087ae:	f002 f8b1 	bl	800a914 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80087b2:	4b5b      	ldr	r3, [pc, #364]	; (8008920 <RadioSend+0x1e0>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	f200 80a2 	bhi.w	8008900 <RadioSend+0x1c0>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <RadioSend+0x84>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087f3 	.word	0x080087f3
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	080087f3 	.word	0x080087f3
 80087d0:	08008849 	.word	0x08008849
 80087d4:	08008869 	.word	0x08008869
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80087d8:	4a51      	ldr	r2, [pc, #324]	; (8008920 <RadioSend+0x1e0>)
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80087de:	4851      	ldr	r0, [pc, #324]	; (8008924 <RadioSend+0x1e4>)
 80087e0:	f001 ff50 	bl	800a684 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	2200      	movs	r2, #0
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fa00 	bl	8009bf0 <SUBGRF_SendPayload>
            break;
 80087f0:	e087      	b.n	8008902 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80087f2:	f002 fb7c 	bl	800aeee <RFW_Is_Init>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d118      	bne.n	800882e <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80087fc:	f107 020d 	add.w	r2, r7, #13
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f002 fb8a 	bl	800af1e <RFW_TransmitInit>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10c      	bne.n	800882a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008810:	7b7a      	ldrb	r2, [r7, #13]
 8008812:	4b43      	ldr	r3, [pc, #268]	; (8008920 <RadioSend+0x1e0>)
 8008814:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008816:	4843      	ldr	r0, [pc, #268]	; (8008924 <RadioSend+0x1e4>)
 8008818:	f001 ff34 	bl	800a684 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800881c:	7b7b      	ldrb	r3, [r7, #13]
 800881e:	2200      	movs	r2, #0
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 f9e4 	bl	8009bf0 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008828:	e06b      	b.n	8008902 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 800882a:	2303      	movs	r3, #3
 800882c:	e073      	b.n	8008916 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800882e:	4a3c      	ldr	r2, [pc, #240]	; (8008920 <RadioSend+0x1e0>)
 8008830:	78fb      	ldrb	r3, [r7, #3]
 8008832:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008834:	483b      	ldr	r0, [pc, #236]	; (8008924 <RadioSend+0x1e4>)
 8008836:	f001 ff25 	bl	800a684 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	2200      	movs	r2, #0
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 f9d5 	bl	8009bf0 <SUBGRF_SendPayload>
            break;
 8008846:	e05c      	b.n	8008902 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008848:	4b35      	ldr	r3, [pc, #212]	; (8008920 <RadioSend+0x1e0>)
 800884a:	2202      	movs	r2, #2
 800884c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800884e:	4a34      	ldr	r2, [pc, #208]	; (8008920 <RadioSend+0x1e0>)
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008854:	4833      	ldr	r0, [pc, #204]	; (8008924 <RadioSend+0x1e4>)
 8008856:	f001 ff15 	bl	800a684 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	2200      	movs	r2, #0
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 f9c5 	bl	8009bf0 <SUBGRF_SendPayload>
            break;
 8008866:	e04c      	b.n	8008902 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	461a      	mov	r2, r3
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	482e      	ldr	r0, [pc, #184]	; (8008928 <RadioSend+0x1e8>)
 8008870:	f000 fc98 	bl	80091a4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008874:	4b2a      	ldr	r3, [pc, #168]	; (8008920 <RadioSend+0x1e0>)
 8008876:	2202      	movs	r2, #2
 8008878:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800887a:	78fb      	ldrb	r3, [r7, #3]
 800887c:	3301      	adds	r3, #1
 800887e:	b2da      	uxtb	r2, r3
 8008880:	4b27      	ldr	r3, [pc, #156]	; (8008920 <RadioSend+0x1e0>)
 8008882:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008884:	4827      	ldr	r0, [pc, #156]	; (8008924 <RadioSend+0x1e4>)
 8008886:	f001 fefd 	bl	800a684 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800888a:	2100      	movs	r1, #0
 800888c:	20f1      	movs	r0, #241	; 0xf1
 800888e:	f000 f964 	bl	8008b5a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008892:	2100      	movs	r1, #0
 8008894:	20f0      	movs	r0, #240	; 0xf0
 8008896:	f000 f960 	bl	8008b5a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800889a:	4b21      	ldr	r3, [pc, #132]	; (8008920 <RadioSend+0x1e0>)
 800889c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889e:	2b64      	cmp	r3, #100	; 0x64
 80088a0:	d108      	bne.n	80088b4 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80088a2:	2170      	movs	r1, #112	; 0x70
 80088a4:	20f3      	movs	r0, #243	; 0xf3
 80088a6:	f000 f958 	bl	8008b5a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80088aa:	211d      	movs	r1, #29
 80088ac:	20f2      	movs	r0, #242	; 0xf2
 80088ae:	f000 f954 	bl	8008b5a <RadioWrite>
 80088b2:	e007      	b.n	80088c4 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80088b4:	21e1      	movs	r1, #225	; 0xe1
 80088b6:	20f3      	movs	r0, #243	; 0xf3
 80088b8:	f000 f94f 	bl	8008b5a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80088bc:	2104      	movs	r1, #4
 80088be:	20f2      	movs	r0, #242	; 0xf2
 80088c0:	f000 f94b 	bl	8008b5a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	3302      	adds	r3, #2
 80088ce:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80088d0:	89fb      	ldrh	r3, [r7, #14]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	4619      	mov	r1, r3
 80088da:	20f4      	movs	r0, #244	; 0xf4
 80088dc:	f000 f93d 	bl	8008b5a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80088e0:	89fb      	ldrh	r3, [r7, #14]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	4619      	mov	r1, r3
 80088e6:	20f5      	movs	r0, #245	; 0xf5
 80088e8:	f000 f937 	bl	8008b5a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	3301      	adds	r3, #1
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80088f6:	4619      	mov	r1, r3
 80088f8:	480b      	ldr	r0, [pc, #44]	; (8008928 <RadioSend+0x1e8>)
 80088fa:	f001 f979 	bl	8009bf0 <SUBGRF_SendPayload>
            break;
 80088fe:	e000      	b.n	8008902 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008900:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008902:	4b07      	ldr	r3, [pc, #28]	; (8008920 <RadioSend+0x1e0>)
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	4619      	mov	r1, r3
 8008908:	4808      	ldr	r0, [pc, #32]	; (800892c <RadioSend+0x1ec>)
 800890a:	f002 fe01 	bl	800b510 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800890e:	4807      	ldr	r0, [pc, #28]	; (800892c <RadioSend+0x1ec>)
 8008910:	f002 fd20 	bl	800b354 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20001c74 	.word	0x20001c74
 8008924:	20001c82 	.word	0x20001c82
 8008928:	20001b70 	.word	0x20001b70
 800892c:	20001cd0 	.word	0x20001cd0

08008930 <RadioSleep>:

static void RadioSleep( void )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008936:	2300      	movs	r3, #0
 8008938:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800893a:	793b      	ldrb	r3, [r7, #4]
 800893c:	f043 0304 	orr.w	r3, r3, #4
 8008940:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008942:	7938      	ldrb	r0, [r7, #4]
 8008944:	f001 fa30 	bl	8009da8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008948:	2002      	movs	r0, #2
 800894a:	f7f8 f971 	bl	8000c30 <HAL_Delay>
}
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <RadioStandby>:

static void RadioStandby( void )
{
 8008956:	b580      	push	{r7, lr}
 8008958:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800895a:	2000      	movs	r0, #0
 800895c:	f001 fa56 	bl	8009e0c <SUBGRF_SetStandby>
}
 8008960:	bf00      	nop
 8008962:	bd80      	pop	{r7, pc}

08008964 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800896c:	f002 fabf 	bl	800aeee <RFW_Is_Init>
 8008970:	4603      	mov	r3, r0
 8008972:	2b01      	cmp	r3, #1
 8008974:	d102      	bne.n	800897c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008976:	f002 fae2 	bl	800af3e <RFW_ReceiveInit>
 800897a:	e007      	b.n	800898c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800897c:	2300      	movs	r3, #0
 800897e:	2200      	movs	r2, #0
 8008980:	f240 2162 	movw	r1, #610	; 0x262
 8008984:	f240 2062 	movw	r0, #610	; 0x262
 8008988:	f001 fc14 	bl	800a1b4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d006      	beq.n	80089a0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4811      	ldr	r0, [pc, #68]	; (80089dc <RadioRx+0x78>)
 8008996:	f002 fdbb 	bl	800b510 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800899a:	4810      	ldr	r0, [pc, #64]	; (80089dc <RadioRx+0x78>)
 800899c:	f002 fcda 	bl	800b354 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80089a0:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <RadioRx+0x7c>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80089a6:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <RadioRx+0x7c>)
 80089a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80089ac:	2100      	movs	r1, #0
 80089ae:	4618      	mov	r0, r3
 80089b0:	f002 f8a4 	bl	800aafc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80089b4:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <RadioRx+0x7c>)
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80089bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80089c0:	f001 fa60 	bl	8009e84 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80089c4:	e005      	b.n	80089d2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80089c6:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <RadioRx+0x7c>)
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	019b      	lsls	r3, r3, #6
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 fa59 	bl	8009e84 <SUBGRF_SetRx>
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20001ce8 	.word	0x20001ce8
 80089e0:	20001c74 	.word	0x20001c74

080089e4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80089ec:	f002 fa7f 	bl	800aeee <RFW_Is_Init>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d102      	bne.n	80089fc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80089f6:	f002 faa2 	bl	800af3e <RFW_ReceiveInit>
 80089fa:	e007      	b.n	8008a0c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80089fc:	2300      	movs	r3, #0
 80089fe:	2200      	movs	r2, #0
 8008a00:	f240 2162 	movw	r1, #610	; 0x262
 8008a04:	f240 2062 	movw	r0, #610	; 0x262
 8008a08:	f001 fbd4 	bl	800a1b4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d006      	beq.n	8008a20 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	4811      	ldr	r0, [pc, #68]	; (8008a5c <RadioRxBoosted+0x78>)
 8008a16:	f002 fd7b 	bl	800b510 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008a1a:	4810      	ldr	r0, [pc, #64]	; (8008a5c <RadioRxBoosted+0x78>)
 8008a1c:	f002 fc9a 	bl	800b354 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008a20:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <RadioRxBoosted+0x7c>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008a26:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <RadioRxBoosted+0x7c>)
 8008a28:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f002 f864 	bl	800aafc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008a34:	4b0a      	ldr	r3, [pc, #40]	; (8008a60 <RadioRxBoosted+0x7c>)
 8008a36:	785b      	ldrb	r3, [r3, #1]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008a3c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008a40:	f001 fa40 	bl	8009ec4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008a44:	e005      	b.n	8008a52 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008a46:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <RadioRxBoosted+0x7c>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	019b      	lsls	r3, r3, #6
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f001 fa39 	bl	8009ec4 <SUBGRF_SetRxBoosted>
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20001ce8 	.word	0x20001ce8
 8008a60:	20001c74 	.word	0x20001c74

08008a64 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	005a      	lsls	r2, r3, #1
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	4413      	add	r3, r2
 8008a76:	4a0c      	ldr	r2, [pc, #48]	; (8008aa8 <RadioSetRxDutyCycle+0x44>)
 8008a78:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008a82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008a86:	f001 fb95 	bl	800a1b4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008a8a:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <RadioSetRxDutyCycle+0x44>)
 8008a8c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a90:	2100      	movs	r1, #0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f002 f832 	bl	800aafc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 fa36 	bl	8009f0c <SUBGRF_SetRxDutyCycle>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20001c74 	.word	0x20001c74

08008aac <RadioStartCad>:

static void RadioStartCad( void )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008ab0:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <RadioStartCad+0x2c>)
 8008ab2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f002 f81f 	bl	800aafc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008ac6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008aca:	f001 fb73 	bl	800a1b4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008ace:	f001 fa49 	bl	8009f64 <SUBGRF_SetCad>
}
 8008ad2:	bf00      	nop
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20001c74 	.word	0x20001c74

08008adc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008aec:	883b      	ldrh	r3, [r7, #0]
 8008aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008af2:	fb02 f303 	mul.w	r3, r2, r3
 8008af6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 fbb7 	bl	800a26c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f002 f822 	bl	800ab4c <SUBGRF_SetRfTxPower>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008b0c:	210e      	movs	r1, #14
 8008b0e:	f640 101f 	movw	r0, #2335	; 0x91f
 8008b12:	f001 feff 	bl	800a914 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008b16:	7afb      	ldrb	r3, [r7, #11]
 8008b18:	2101      	movs	r1, #1
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f001 ffee 	bl	800aafc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008b20:	f001 fa2e 	bl	8009f80 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008b24:	68f9      	ldr	r1, [r7, #12]
 8008b26:	4805      	ldr	r0, [pc, #20]	; (8008b3c <RadioSetTxContinuousWave+0x60>)
 8008b28:	f002 fcf2 	bl	800b510 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008b2c:	4803      	ldr	r0, [pc, #12]	; (8008b3c <RadioSetTxContinuousWave+0x60>)
 8008b2e:	f002 fc11 	bl	800b354 <UTIL_TIMER_Start>
}
 8008b32:	bf00      	nop
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20001cd0 	.word	0x20001cd0

08008b40 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008b4a:	f001 fe50 	bl	800a7ee <SUBGRF_GetRssiInst>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	b21b      	sxth	r3, r3
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	4603      	mov	r3, r0
 8008b62:	460a      	mov	r2, r1
 8008b64:	80fb      	strh	r3, [r7, #6]
 8008b66:	4613      	mov	r3, r2
 8008b68:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008b6a:	797a      	ldrb	r2, [r7, #5]
 8008b6c:	88fb      	ldrh	r3, [r7, #6]
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 fecf 	bl	800a914 <SUBGRF_WriteRegister>
}
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	4603      	mov	r3, r0
 8008b86:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f001 fed6 	bl	800a93c <SUBGRF_ReadRegister>
 8008b90:	4603      	mov	r3, r0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	6039      	str	r1, [r7, #0]
 8008ba4:	80fb      	strh	r3, [r7, #6]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008baa:	797b      	ldrb	r3, [r7, #5]
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f001 fed6 	bl	800a964 <SUBGRF_WriteRegisters>
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	80fb      	strh	r3, [r7, #6]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008bd0:	797b      	ldrb	r3, [r7, #5]
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	88fb      	ldrh	r3, [r7, #6]
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f001 fee5 	bl	800a9a8 <SUBGRF_ReadRegisters>
}
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
	...

08008be8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	460a      	mov	r2, r1
 8008bf2:	71fb      	strb	r3, [r7, #7]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008bf8:	79fb      	ldrb	r3, [r7, #7]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d10a      	bne.n	8008c14 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008bfe:	4a0e      	ldr	r2, [pc, #56]	; (8008c38 <RadioSetMaxPayloadLength+0x50>)
 8008c00:	79bb      	ldrb	r3, [r7, #6]
 8008c02:	7013      	strb	r3, [r2, #0]
 8008c04:	4b0c      	ldr	r3, [pc, #48]	; (8008c38 <RadioSetMaxPayloadLength+0x50>)
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <RadioSetMaxPayloadLength+0x54>)
 8008c0a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c0c:	480c      	ldr	r0, [pc, #48]	; (8008c40 <RadioSetMaxPayloadLength+0x58>)
 8008c0e:	f001 fd39 	bl	800a684 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008c12:	e00d      	b.n	8008c30 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008c14:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <RadioSetMaxPayloadLength+0x54>)
 8008c16:	7d5b      	ldrb	r3, [r3, #21]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d109      	bne.n	8008c30 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008c1c:	4a06      	ldr	r2, [pc, #24]	; (8008c38 <RadioSetMaxPayloadLength+0x50>)
 8008c1e:	79bb      	ldrb	r3, [r7, #6]
 8008c20:	7013      	strb	r3, [r2, #0]
 8008c22:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <RadioSetMaxPayloadLength+0x50>)
 8008c24:	781a      	ldrb	r2, [r3, #0]
 8008c26:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <RadioSetMaxPayloadLength+0x54>)
 8008c28:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c2a:	4805      	ldr	r0, [pc, #20]	; (8008c40 <RadioSetMaxPayloadLength+0x58>)
 8008c2c:	f001 fd2a 	bl	800a684 <SUBGRF_SetPacketParams>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000010 	.word	0x20000010
 8008c3c:	20001c74 	.word	0x20001c74
 8008c40:	20001c82 	.word	0x20001c82

08008c44 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008c4e:	4a13      	ldr	r2, [pc, #76]	; (8008c9c <RadioSetPublicNetwork+0x58>)
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	7313      	strb	r3, [r2, #12]
 8008c54:	4b11      	ldr	r3, [pc, #68]	; (8008c9c <RadioSetPublicNetwork+0x58>)
 8008c56:	7b1a      	ldrb	r2, [r3, #12]
 8008c58:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <RadioSetPublicNetwork+0x58>)
 8008c5a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008c5c:	2001      	movs	r0, #1
 8008c5e:	f7ff f819 	bl	8007c94 <RadioSetModem>
    if( enable == true )
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008c68:	2134      	movs	r1, #52	; 0x34
 8008c6a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008c6e:	f001 fe51 	bl	800a914 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008c72:	2144      	movs	r1, #68	; 0x44
 8008c74:	f240 7041 	movw	r0, #1857	; 0x741
 8008c78:	f001 fe4c 	bl	800a914 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008c7c:	e009      	b.n	8008c92 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008c7e:	2114      	movs	r1, #20
 8008c80:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008c84:	f001 fe46 	bl	800a914 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008c88:	2124      	movs	r1, #36	; 0x24
 8008c8a:	f240 7041 	movw	r0, #1857	; 0x741
 8008c8e:	f001 fe41 	bl	800a914 <SUBGRF_WriteRegister>
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20001c74 	.word	0x20001c74

08008ca0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008ca4:	f001 ff86 	bl	800abb4 <SUBGRF_GetRadioWakeUpTime>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	3303      	adds	r3, #3
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008cb8:	f000 f80e 	bl	8008cd8 <RadioOnTxTimeoutProcess>
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008ccc:	f000 f818 	bl	8008d00 <RadioOnRxTimeoutProcess>
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008cdc:	4b07      	ldr	r3, [pc, #28]	; (8008cfc <RadioOnTxTimeoutProcess+0x24>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d008      	beq.n	8008cf6 <RadioOnTxTimeoutProcess+0x1e>
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <RadioOnTxTimeoutProcess+0x24>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8008cee:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <RadioOnTxTimeoutProcess+0x24>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	4798      	blx	r3
    }
}
 8008cf6:	bf00      	nop
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20001c70 	.word	0x20001c70

08008d00 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008d04:	4b07      	ldr	r3, [pc, #28]	; (8008d24 <RadioOnRxTimeoutProcess+0x24>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d008      	beq.n	8008d1e <RadioOnRxTimeoutProcess+0x1e>
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <RadioOnRxTimeoutProcess+0x24>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8008d16:	4b03      	ldr	r3, [pc, #12]	; (8008d24 <RadioOnRxTimeoutProcess+0x24>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	4798      	blx	r3
    }
}
 8008d1e:	bf00      	nop
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20001c70 	.word	0x20001c70

08008d28 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8008d32:	4a05      	ldr	r2, [pc, #20]	; (8008d48 <RadioOnDioIrq+0x20>)
 8008d34:	88fb      	ldrh	r3, [r7, #6]
 8008d36:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8008d3a:	f000 f807 	bl	8008d4c <RadioIrqProcess>
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20001c74 	.word	0x20001c74

08008d4c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008d4c:	b5b0      	push	{r4, r5, r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008d5a:	4ba5      	ldr	r3, [pc, #660]	; (8008ff0 <RadioIrqProcess+0x2a4>)
 8008d5c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d64:	f000 810d 	beq.w	8008f82 <RadioIrqProcess+0x236>
 8008d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6c:	f300 81c0 	bgt.w	80090f0 <RadioIrqProcess+0x3a4>
 8008d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d74:	f000 80f1 	beq.w	8008f5a <RadioIrqProcess+0x20e>
 8008d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d7c:	f300 81b8 	bgt.w	80090f0 <RadioIrqProcess+0x3a4>
 8008d80:	2b80      	cmp	r3, #128	; 0x80
 8008d82:	f000 80d6 	beq.w	8008f32 <RadioIrqProcess+0x1e6>
 8008d86:	2b80      	cmp	r3, #128	; 0x80
 8008d88:	f300 81b2 	bgt.w	80090f0 <RadioIrqProcess+0x3a4>
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	dc49      	bgt.n	8008e24 <RadioIrqProcess+0xd8>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f340 81ad 	ble.w	80090f0 <RadioIrqProcess+0x3a4>
 8008d96:	3b01      	subs	r3, #1
 8008d98:	2b1f      	cmp	r3, #31
 8008d9a:	f200 81a9 	bhi.w	80090f0 <RadioIrqProcess+0x3a4>
 8008d9e:	a201      	add	r2, pc, #4	; (adr r2, 8008da4 <RadioIrqProcess+0x58>)
 8008da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da4:	08008e2d 	.word	0x08008e2d
 8008da8:	08008e67 	.word	0x08008e67
 8008dac:	080090f1 	.word	0x080090f1
 8008db0:	0800900d 	.word	0x0800900d
 8008db4:	080090f1 	.word	0x080090f1
 8008db8:	080090f1 	.word	0x080090f1
 8008dbc:	080090f1 	.word	0x080090f1
 8008dc0:	0800907b 	.word	0x0800907b
 8008dc4:	080090f1 	.word	0x080090f1
 8008dc8:	080090f1 	.word	0x080090f1
 8008dcc:	080090f1 	.word	0x080090f1
 8008dd0:	080090f1 	.word	0x080090f1
 8008dd4:	080090f1 	.word	0x080090f1
 8008dd8:	080090f1 	.word	0x080090f1
 8008ddc:	080090f1 	.word	0x080090f1
 8008de0:	080090f1 	.word	0x080090f1
 8008de4:	080090f1 	.word	0x080090f1
 8008de8:	080090f1 	.word	0x080090f1
 8008dec:	080090f1 	.word	0x080090f1
 8008df0:	080090f1 	.word	0x080090f1
 8008df4:	080090f1 	.word	0x080090f1
 8008df8:	080090f1 	.word	0x080090f1
 8008dfc:	080090f1 	.word	0x080090f1
 8008e00:	080090f1 	.word	0x080090f1
 8008e04:	080090f1 	.word	0x080090f1
 8008e08:	080090f1 	.word	0x080090f1
 8008e0c:	080090f1 	.word	0x080090f1
 8008e10:	080090f1 	.word	0x080090f1
 8008e14:	080090f1 	.word	0x080090f1
 8008e18:	080090f1 	.word	0x080090f1
 8008e1c:	080090f1 	.word	0x080090f1
 8008e20:	0800908b 	.word	0x0800908b
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	f000 814b 	beq.w	80090c0 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008e2a:	e161      	b.n	80090f0 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8008e2c:	4871      	ldr	r0, [pc, #452]	; (8008ff4 <RadioIrqProcess+0x2a8>)
 8008e2e:	f002 faff 	bl	800b430 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008e32:	2000      	movs	r0, #0
 8008e34:	f000 ffea 	bl	8009e0c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008e38:	f002 f860 	bl	800aefc <RFW_Is_LongPacketModeEnabled>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8008e42:	f002 f884 	bl	800af4e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008e46:	4b6c      	ldr	r3, [pc, #432]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 8152 	beq.w	80090f4 <RadioIrqProcess+0x3a8>
 8008e50:	4b69      	ldr	r3, [pc, #420]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 814c 	beq.w	80090f4 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8008e5c:	4b66      	ldr	r3, [pc, #408]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4798      	blx	r3
        break;
 8008e64:	e146      	b.n	80090f4 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8008e66:	4865      	ldr	r0, [pc, #404]	; (8008ffc <RadioIrqProcess+0x2b0>)
 8008e68:	f002 fae2 	bl	800b430 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008e6c:	4b60      	ldr	r3, [pc, #384]	; (8008ff0 <RadioIrqProcess+0x2a4>)
 8008e6e:	785b      	ldrb	r3, [r3, #1]
 8008e70:	f083 0301 	eor.w	r3, r3, #1
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d014      	beq.n	8008ea4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f000 ffc6 	bl	8009e0c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008e80:	2100      	movs	r1, #0
 8008e82:	f640 1002 	movw	r0, #2306	; 0x902
 8008e86:	f001 fd45 	bl	800a914 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008e8a:	f640 1044 	movw	r0, #2372	; 0x944
 8008e8e:	f001 fd55 	bl	800a93c <SUBGRF_ReadRegister>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f043 0302 	orr.w	r3, r3, #2
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f640 1044 	movw	r0, #2372	; 0x944
 8008ea0:	f001 fd38 	bl	800a914 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008ea4:	1dfb      	adds	r3, r7, #7
 8008ea6:	22ff      	movs	r2, #255	; 0xff
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4855      	ldr	r0, [pc, #340]	; (8009000 <RadioIrqProcess+0x2b4>)
 8008eac:	f000 fe7e 	bl	8009bac <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008eb0:	4854      	ldr	r0, [pc, #336]	; (8009004 <RadioIrqProcess+0x2b8>)
 8008eb2:	f001 fcdd 	bl	800a870 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008eb6:	4b50      	ldr	r3, [pc, #320]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 811c 	beq.w	80090f8 <RadioIrqProcess+0x3ac>
 8008ec0:	4b4d      	ldr	r3, [pc, #308]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 8116 	beq.w	80090f8 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8008ecc:	4b48      	ldr	r3, [pc, #288]	; (8008ff0 <RadioIrqProcess+0x2a4>)
 8008ece:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d10e      	bne.n	8008ef4 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008ed6:	4b48      	ldr	r3, [pc, #288]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689c      	ldr	r4, [r3, #8]
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	b299      	uxth	r1, r3
 8008ee0:	4b43      	ldr	r3, [pc, #268]	; (8008ff0 <RadioIrqProcess+0x2a4>)
 8008ee2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8008ee6:	b21a      	sxth	r2, r3
 8008ee8:	4b41      	ldr	r3, [pc, #260]	; (8008ff0 <RadioIrqProcess+0x2a4>)
 8008eea:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008eee:	4844      	ldr	r0, [pc, #272]	; (8009000 <RadioIrqProcess+0x2b4>)
 8008ef0:	47a0      	blx	r4
                break;
 8008ef2:	e01d      	b.n	8008f30 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008ef4:	4b3e      	ldr	r3, [pc, #248]	; (8008ff0 <RadioIrqProcess+0x2a4>)
 8008ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef8:	463a      	mov	r2, r7
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 ff4b 	bl	800ad98 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8008f02:	4b3d      	ldr	r3, [pc, #244]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689c      	ldr	r4, [r3, #8]
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	b299      	uxth	r1, r3
 8008f0c:	4b38      	ldr	r3, [pc, #224]	; (8008ff0 <RadioIrqProcess+0x2a4>)
 8008f0e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8008f12:	b218      	sxth	r0, r3
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008f1a:	4a3b      	ldr	r2, [pc, #236]	; (8009008 <RadioIrqProcess+0x2bc>)
 8008f1c:	fb82 5203 	smull	r5, r2, r2, r3
 8008f20:	1192      	asrs	r2, r2, #6
 8008f22:	17db      	asrs	r3, r3, #31
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	b25b      	sxtb	r3, r3
 8008f28:	4602      	mov	r2, r0
 8008f2a:	4835      	ldr	r0, [pc, #212]	; (8009000 <RadioIrqProcess+0x2b4>)
 8008f2c:	47a0      	blx	r4
                break;
 8008f2e:	bf00      	nop
        break;
 8008f30:	e0e2      	b.n	80090f8 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8008f32:	2000      	movs	r0, #0
 8008f34:	f000 ff6a 	bl	8009e0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008f38:	4b2f      	ldr	r3, [pc, #188]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 80dd 	beq.w	80090fc <RadioIrqProcess+0x3b0>
 8008f42:	4b2d      	ldr	r3, [pc, #180]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 80d7 	beq.w	80090fc <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8008f4e:	4b2a      	ldr	r3, [pc, #168]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2000      	movs	r0, #0
 8008f56:	4798      	blx	r3
        break;
 8008f58:	e0d0      	b.n	80090fc <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f000 ff56 	bl	8009e0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008f60:	4b25      	ldr	r3, [pc, #148]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 80cb 	beq.w	8009100 <RadioIrqProcess+0x3b4>
 8008f6a:	4b23      	ldr	r3, [pc, #140]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 80c5 	beq.w	8009100 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8008f76:	4b20      	ldr	r3, [pc, #128]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	4798      	blx	r3
        break;
 8008f80:	e0be      	b.n	8009100 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008f82:	f000 fdf9 	bl	8009b78 <SUBGRF_GetOperatingMode>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b04      	cmp	r3, #4
 8008f8a:	d115      	bne.n	8008fb8 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8008f8c:	4819      	ldr	r0, [pc, #100]	; (8008ff4 <RadioIrqProcess+0x2a8>)
 8008f8e:	f002 fa4f 	bl	800b430 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008f92:	2000      	movs	r0, #0
 8008f94:	f000 ff3a 	bl	8009e0c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008f98:	4b17      	ldr	r3, [pc, #92]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 80b1 	beq.w	8009104 <RadioIrqProcess+0x3b8>
 8008fa2:	4b15      	ldr	r3, [pc, #84]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80ab 	beq.w	8009104 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8008fae:	4b12      	ldr	r3, [pc, #72]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4798      	blx	r3
        break;
 8008fb6:	e0a5      	b.n	8009104 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008fb8:	f000 fdde 	bl	8009b78 <SUBGRF_GetOperatingMode>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b05      	cmp	r3, #5
 8008fc0:	f040 80a0 	bne.w	8009104 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8008fc4:	480d      	ldr	r0, [pc, #52]	; (8008ffc <RadioIrqProcess+0x2b0>)
 8008fc6:	f002 fa33 	bl	800b430 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008fca:	2000      	movs	r0, #0
 8008fcc:	f000 ff1e 	bl	8009e0c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008fd0:	4b09      	ldr	r3, [pc, #36]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 8095 	beq.w	8009104 <RadioIrqProcess+0x3b8>
 8008fda:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 808f 	beq.w	8009104 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8008fe6:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <RadioIrqProcess+0x2ac>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	4798      	blx	r3
        break;
 8008fee:	e089      	b.n	8009104 <RadioIrqProcess+0x3b8>
 8008ff0:	20001c74 	.word	0x20001c74
 8008ff4:	20001cd0 	.word	0x20001cd0
 8008ff8:	20001c70 	.word	0x20001c70
 8008ffc:	20001ce8 	.word	0x20001ce8
 8009000:	20001b70 	.word	0x20001b70
 8009004:	20001c98 	.word	0x20001c98
 8009008:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800900c:	4b44      	ldr	r3, [pc, #272]	; (8009120 <RadioIrqProcess+0x3d4>)
 800900e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009010:	2b00      	cmp	r3, #0
 8009012:	d079      	beq.n	8009108 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8009014:	4a43      	ldr	r2, [pc, #268]	; (8009124 <RadioIrqProcess+0x3d8>)
 8009016:	4b42      	ldr	r3, [pc, #264]	; (8009120 <RadioIrqProcess+0x3d4>)
 8009018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901a:	0c1b      	lsrs	r3, r3, #16
 800901c:	b2db      	uxtb	r3, r3
 800901e:	4619      	mov	r1, r3
 8009020:	f640 1003 	movw	r0, #2307	; 0x903
 8009024:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8009026:	4a3f      	ldr	r2, [pc, #252]	; (8009124 <RadioIrqProcess+0x3d8>)
 8009028:	4b3d      	ldr	r3, [pc, #244]	; (8009120 <RadioIrqProcess+0x3d4>)
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	0a1b      	lsrs	r3, r3, #8
 800902e:	b2db      	uxtb	r3, r3
 8009030:	4619      	mov	r1, r3
 8009032:	f640 1004 	movw	r0, #2308	; 0x904
 8009036:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009038:	4a3a      	ldr	r2, [pc, #232]	; (8009124 <RadioIrqProcess+0x3d8>)
 800903a:	4b39      	ldr	r3, [pc, #228]	; (8009120 <RadioIrqProcess+0x3d4>)
 800903c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903e:	b2db      	uxtb	r3, r3
 8009040:	4619      	mov	r1, r3
 8009042:	f640 1005 	movw	r0, #2309	; 0x905
 8009046:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009048:	4c36      	ldr	r4, [pc, #216]	; (8009124 <RadioIrqProcess+0x3d8>)
 800904a:	4b37      	ldr	r3, [pc, #220]	; (8009128 <RadioIrqProcess+0x3dc>)
 800904c:	f640 1002 	movw	r0, #2306	; 0x902
 8009050:	4798      	blx	r3
 8009052:	4603      	mov	r3, r0
 8009054:	f043 0301 	orr.w	r3, r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	4619      	mov	r1, r3
 800905c:	f640 1002 	movw	r0, #2306	; 0x902
 8009060:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8009062:	4b2f      	ldr	r3, [pc, #188]	; (8009120 <RadioIrqProcess+0x3d4>)
 8009064:	2200      	movs	r2, #0
 8009066:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009068:	2300      	movs	r3, #0
 800906a:	2200      	movs	r2, #0
 800906c:	f240 2162 	movw	r1, #610	; 0x262
 8009070:	f240 2062 	movw	r0, #610	; 0x262
 8009074:	f001 f89e 	bl	800a1b4 <SUBGRF_SetDioIrqParams>
        break;
 8009078:	e046      	b.n	8009108 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800907a:	f001 ff38 	bl	800aeee <RFW_Is_Init>
 800907e:	4603      	mov	r3, r0
 8009080:	2b01      	cmp	r3, #1
 8009082:	d143      	bne.n	800910c <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8009084:	f001 ff69 	bl	800af5a <RFW_ReceivePayload>
        break;
 8009088:	e040      	b.n	800910c <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800908a:	4828      	ldr	r0, [pc, #160]	; (800912c <RadioIrqProcess+0x3e0>)
 800908c:	f002 f9d0 	bl	800b430 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009090:	4b23      	ldr	r3, [pc, #140]	; (8009120 <RadioIrqProcess+0x3d4>)
 8009092:	785b      	ldrb	r3, [r3, #1]
 8009094:	f083 0301 	eor.w	r3, r3, #1
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800909e:	2000      	movs	r0, #0
 80090a0:	f000 feb4 	bl	8009e0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80090a4:	4b22      	ldr	r3, [pc, #136]	; (8009130 <RadioIrqProcess+0x3e4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d031      	beq.n	8009110 <RadioIrqProcess+0x3c4>
 80090ac:	4b20      	ldr	r3, [pc, #128]	; (8009130 <RadioIrqProcess+0x3e4>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d02c      	beq.n	8009110 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 80090b6:	4b1e      	ldr	r3, [pc, #120]	; (8009130 <RadioIrqProcess+0x3e4>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	4798      	blx	r3
        break;
 80090be:	e027      	b.n	8009110 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80090c0:	4b17      	ldr	r3, [pc, #92]	; (8009120 <RadioIrqProcess+0x3d4>)
 80090c2:	785b      	ldrb	r3, [r3, #1]
 80090c4:	f083 0301 	eor.w	r3, r3, #1
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80090ce:	2000      	movs	r0, #0
 80090d0:	f000 fe9c 	bl	8009e0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80090d4:	4b16      	ldr	r3, [pc, #88]	; (8009130 <RadioIrqProcess+0x3e4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01b      	beq.n	8009114 <RadioIrqProcess+0x3c8>
 80090dc:	4b14      	ldr	r3, [pc, #80]	; (8009130 <RadioIrqProcess+0x3e4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d016      	beq.n	8009114 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80090e6:	4b12      	ldr	r3, [pc, #72]	; (8009130 <RadioIrqProcess+0x3e4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	4798      	blx	r3
        break;
 80090ee:	e011      	b.n	8009114 <RadioIrqProcess+0x3c8>
        break;
 80090f0:	bf00      	nop
 80090f2:	e010      	b.n	8009116 <RadioIrqProcess+0x3ca>
        break;
 80090f4:	bf00      	nop
 80090f6:	e00e      	b.n	8009116 <RadioIrqProcess+0x3ca>
        break;
 80090f8:	bf00      	nop
 80090fa:	e00c      	b.n	8009116 <RadioIrqProcess+0x3ca>
        break;
 80090fc:	bf00      	nop
 80090fe:	e00a      	b.n	8009116 <RadioIrqProcess+0x3ca>
        break;
 8009100:	bf00      	nop
 8009102:	e008      	b.n	8009116 <RadioIrqProcess+0x3ca>
        break;
 8009104:	bf00      	nop
 8009106:	e006      	b.n	8009116 <RadioIrqProcess+0x3ca>
        break;
 8009108:	bf00      	nop
 800910a:	e004      	b.n	8009116 <RadioIrqProcess+0x3ca>
        break;
 800910c:	bf00      	nop
 800910e:	e002      	b.n	8009116 <RadioIrqProcess+0x3ca>
        break;
 8009110:	bf00      	nop
 8009112:	e000      	b.n	8009116 <RadioIrqProcess+0x3ca>
        break;
 8009114:	bf00      	nop
    }
}
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bdb0      	pop	{r4, r5, r7, pc}
 800911e:	bf00      	nop
 8009120:	20001c74 	.word	0x20001c74
 8009124:	08008b5b 	.word	0x08008b5b
 8009128:	08008b7f 	.word	0x08008b7f
 800912c:	20001ce8 	.word	0x20001ce8
 8009130:	20001c70 	.word	0x20001c70

08009134 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009138:	4b09      	ldr	r3, [pc, #36]	; (8009160 <RadioTxPrbs+0x2c>)
 800913a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800913e:	2101      	movs	r1, #1
 8009140:	4618      	mov	r0, r3
 8009142:	f001 fcdb 	bl	800aafc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009146:	4b07      	ldr	r3, [pc, #28]	; (8009164 <RadioTxPrbs+0x30>)
 8009148:	212d      	movs	r1, #45	; 0x2d
 800914a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800914e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009150:	f000 ff1f 	bl	8009f92 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009154:	4804      	ldr	r0, [pc, #16]	; (8009168 <RadioTxPrbs+0x34>)
 8009156:	f000 fe75 	bl	8009e44 <SUBGRF_SetTx>
}
 800915a:	bf00      	nop
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20001c74 	.word	0x20001c74
 8009164:	08008b5b 	.word	0x08008b5b
 8009168:	000fffff 	.word	0x000fffff

0800916c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800917a:	4618      	mov	r0, r3
 800917c:	f001 fce6 	bl	800ab4c <SUBGRF_SetRfTxPower>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009184:	210e      	movs	r1, #14
 8009186:	f640 101f 	movw	r0, #2335	; 0x91f
 800918a:	f001 fbc3 	bl	800a914 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	2101      	movs	r1, #1
 8009192:	4618      	mov	r0, r3
 8009194:	f001 fcb2 	bl	800aafc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009198:	f000 fef2 	bl	8009f80 <SUBGRF_SetTxContinuousWave>
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b089      	sub	sp, #36	; 0x24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80091ba:	2300      	movs	r3, #0
 80091bc:	61bb      	str	r3, [r7, #24]
 80091be:	e011      	b.n	80091e4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	4413      	add	r3, r2
 80091c6:	781a      	ldrb	r2, [r3, #0]
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	440b      	add	r3, r1
 80091ce:	43d2      	mvns	r2, r2
 80091d0:	b2d2      	uxtb	r2, r2
 80091d2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	4413      	add	r3, r2
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	3301      	adds	r3, #1
 80091e2:	61bb      	str	r3, [r7, #24]
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	dbe9      	blt.n	80091c0 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80091ec:	2300      	movs	r3, #0
 80091ee:	61bb      	str	r3, [r7, #24]
 80091f0:	e049      	b.n	8009286 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	425a      	negs	r2, r3
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	f002 0207 	and.w	r2, r2, #7
 80091fe:	bf58      	it	pl
 8009200:	4253      	negpl	r3, r2
 8009202:	b2db      	uxtb	r3, r3
 8009204:	f1c3 0307 	rsb	r3, r3, #7
 8009208:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	da00      	bge.n	8009212 <payload_integration+0x6e>
 8009210:	3307      	adds	r3, #7
 8009212:	10db      	asrs	r3, r3, #3
 8009214:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	3301      	adds	r3, #1
 800921a:	425a      	negs	r2, r3
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	f002 0207 	and.w	r2, r2, #7
 8009224:	bf58      	it	pl
 8009226:	4253      	negpl	r3, r2
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f1c3 0307 	rsb	r3, r3, #7
 800922e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	3301      	adds	r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	da00      	bge.n	800923a <payload_integration+0x96>
 8009238:	3307      	adds	r3, #7
 800923a:	10db      	asrs	r3, r3, #3
 800923c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800923e:	7dbb      	ldrb	r3, [r7, #22]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	4413      	add	r3, r2
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	fa42 f303 	asr.w	r3, r2, r3
 800924e:	b2db      	uxtb	r3, r3
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009256:	7ffa      	ldrb	r2, [r7, #31]
 8009258:	7cfb      	ldrb	r3, [r7, #19]
 800925a:	4053      	eors	r3, r2
 800925c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800925e:	7d3b      	ldrb	r3, [r7, #20]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4413      	add	r3, r2
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	b25a      	sxtb	r2, r3
 8009268:	7ff9      	ldrb	r1, [r7, #31]
 800926a:	7d7b      	ldrb	r3, [r7, #21]
 800926c:	fa01 f303 	lsl.w	r3, r1, r3
 8009270:	b25b      	sxtb	r3, r3
 8009272:	4313      	orrs	r3, r2
 8009274:	b259      	sxtb	r1, r3
 8009276:	7d3b      	ldrb	r3, [r7, #20]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	b2ca      	uxtb	r2, r1
 800927e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	3301      	adds	r3, #1
 8009284:	61bb      	str	r3, [r7, #24]
 8009286:	79fb      	ldrb	r3, [r7, #7]
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	429a      	cmp	r2, r3
 800928e:	dbb0      	blt.n	80091f2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009290:	7ffb      	ldrb	r3, [r7, #31]
 8009292:	01db      	lsls	r3, r3, #7
 8009294:	b25a      	sxtb	r2, r3
 8009296:	7ffb      	ldrb	r3, [r7, #31]
 8009298:	019b      	lsls	r3, r3, #6
 800929a:	b25b      	sxtb	r3, r3
 800929c:	4313      	orrs	r3, r2
 800929e:	b25b      	sxtb	r3, r3
 80092a0:	7ffa      	ldrb	r2, [r7, #31]
 80092a2:	2a00      	cmp	r2, #0
 80092a4:	d101      	bne.n	80092aa <payload_integration+0x106>
 80092a6:	2220      	movs	r2, #32
 80092a8:	e000      	b.n	80092ac <payload_integration+0x108>
 80092aa:	2200      	movs	r2, #0
 80092ac:	4313      	orrs	r3, r2
 80092ae:	b259      	sxtb	r1, r3
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4413      	add	r3, r2
 80092b6:	b2ca      	uxtb	r2, r1
 80092b8:	701a      	strb	r2, [r3, #0]
}
 80092ba:	bf00      	nop
 80092bc:	3724      	adds	r7, #36	; 0x24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr

080092c4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08c      	sub	sp, #48	; 0x30
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	4603      	mov	r3, r0
 80092d2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80092d8:	2300      	movs	r3, #0
 80092da:	623b      	str	r3, [r7, #32]
 80092dc:	2300      	movs	r3, #0
 80092de:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80092e0:	f001 fdff 	bl	800aee2 <RFW_DeInit>

    if( rxContinuous != 0 )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	bf14      	ite	ne
 80092f4:	2301      	movne	r3, #1
 80092f6:	2300      	moveq	r3, #0
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	4ba3      	ldr	r3, [pc, #652]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 80092fc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <RadioSetRxGenericConfig+0x48>
 8009304:	2b01      	cmp	r3, #1
 8009306:	f000 80dc 	beq.w	80094c2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800930a:	e194      	b.n	8009636 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d003      	beq.n	800931c <RadioSetRxGenericConfig+0x58>
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800931c:	f04f 33ff 	mov.w	r3, #4294967295
 8009320:	e18a      	b.n	8009638 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	7f9b      	ldrb	r3, [r3, #30]
 8009326:	2b08      	cmp	r3, #8
 8009328:	d902      	bls.n	8009330 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800932a:	f04f 33ff 	mov.w	r3, #4294967295
 800932e:	e183      	b.n	8009638 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	6919      	ldr	r1, [r3, #16]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	7f9b      	ldrb	r3, [r3, #30]
 8009338:	b29a      	uxth	r2, r3
 800933a:	f107 0320 	add.w	r3, r7, #32
 800933e:	4618      	mov	r0, r3
 8009340:	f001 ff98 	bl	800b274 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	bf14      	ite	ne
 800934c:	2301      	movne	r3, #1
 800934e:	2300      	moveq	r3, #0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fe26 	bl	8009fa4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009358:	4b8b      	ldr	r3, [pc, #556]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	4a88      	ldr	r2, [pc, #544]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009366:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800936e:	4b86      	ldr	r3, [pc, #536]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4618      	mov	r0, r3
 800937a:	f001 fce5 	bl	800ad48 <SUBGRF_GetFskBandwidthRegValue>
 800937e:	4603      	mov	r3, r0
 8009380:	461a      	mov	r2, r3
 8009382:	4b81      	ldr	r3, [pc, #516]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009388:	4b7f      	ldr	r3, [pc, #508]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 800938a:	2200      	movs	r2, #0
 800938c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	b29b      	uxth	r3, r3
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	b29a      	uxth	r2, r3
 8009398:	4b7b      	ldr	r3, [pc, #492]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 800939a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	7fda      	ldrb	r2, [r3, #31]
 80093a0:	4b79      	ldr	r3, [pc, #484]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 80093a2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	7f9b      	ldrb	r3, [r3, #30]
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	4b76      	ldr	r3, [pc, #472]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 80093ae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80093b6:	4b74      	ldr	r3, [pc, #464]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 80093b8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d105      	bne.n	80093d0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	4b6f      	ldr	r3, [pc, #444]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 80093cc:	759a      	strb	r2, [r3, #22]
 80093ce:	e00b      	b.n	80093e8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d103      	bne.n	80093e2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80093da:	4b6b      	ldr	r3, [pc, #428]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 80093dc:	22ff      	movs	r2, #255	; 0xff
 80093de:	759a      	strb	r2, [r3, #22]
 80093e0:	e002      	b.n	80093e8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80093e2:	4b69      	ldr	r3, [pc, #420]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 80093e4:	22ff      	movs	r2, #255	; 0xff
 80093e6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d004      	beq.n	80093fc <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d12d      	bne.n	8009458 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009402:	2bf1      	cmp	r3, #241	; 0xf1
 8009404:	d00c      	beq.n	8009420 <RadioSetRxGenericConfig+0x15c>
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800940c:	2bf2      	cmp	r3, #242	; 0xf2
 800940e:	d007      	beq.n	8009420 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009416:	2b01      	cmp	r3, #1
 8009418:	d002      	beq.n	8009420 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800941a:	f04f 33ff 	mov.w	r3, #4294967295
 800941e:	e10b      	b.n	8009638 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8009420:	2300      	movs	r3, #0
 8009422:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009428:	4b58      	ldr	r3, [pc, #352]	; (800958c <RadioSetRxGenericConfig+0x2c8>)
 800942a:	6819      	ldr	r1, [r3, #0]
 800942c:	f107 0314 	add.w	r3, r7, #20
 8009430:	4a57      	ldr	r2, [pc, #348]	; (8009590 <RadioSetRxGenericConfig+0x2cc>)
 8009432:	4618      	mov	r0, r3
 8009434:	f001 fd48 	bl	800aec8 <RFW_Init>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <RadioSetRxGenericConfig+0x180>
                return -1;
 800943e:	f04f 33ff 	mov.w	r3, #4294967295
 8009442:	e0f9      	b.n	8009638 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009444:	4b50      	ldr	r3, [pc, #320]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009446:	2200      	movs	r2, #0
 8009448:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800944a:	4b4f      	ldr	r3, [pc, #316]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 800944c:	2201      	movs	r2, #1
 800944e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009450:	4b4d      	ldr	r3, [pc, #308]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009452:	2200      	movs	r2, #0
 8009454:	755a      	strb	r2, [r3, #21]
        {
 8009456:	e00e      	b.n	8009476 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800945e:	4b4a      	ldr	r3, [pc, #296]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009460:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009468:	4b47      	ldr	r3, [pc, #284]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 800946a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009472:	4b45      	ldr	r3, [pc, #276]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009474:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009476:	f7ff fa6e 	bl	8008956 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800947a:	2000      	movs	r0, #0
 800947c:	f7fe fc0a 	bl	8007c94 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009480:	4844      	ldr	r0, [pc, #272]	; (8009594 <RadioSetRxGenericConfig+0x2d0>)
 8009482:	f001 f82d 	bl	800a4e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009486:	4844      	ldr	r0, [pc, #272]	; (8009598 <RadioSetRxGenericConfig+0x2d4>)
 8009488:	f001 f8fc 	bl	800a684 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800948c:	f107 0320 	add.w	r3, r7, #32
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fbc0 	bl	8009c16 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	8b9b      	ldrh	r3, [r3, #28]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fc0a 	bl	8009cb4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	8b1b      	ldrh	r3, [r3, #24]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fbe5 	bl	8009c74 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80094b0:	fb03 f202 	mul.w	r2, r3, r2
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094bc:	4a32      	ldr	r2, [pc, #200]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 80094be:	6093      	str	r3, [r2, #8]
        break;
 80094c0:	e0b9      	b.n	8009636 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d102      	bne.n	80094d0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80094ca:	f04f 33ff 	mov.w	r3, #4294967295
 80094ce:	e0b3      	b.n	8009638 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d104      	bne.n	80094e4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80094e2:	e002      	b.n	80094ea <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80094e4:	23ff      	movs	r3, #255	; 0xff
 80094e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bf14      	ite	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	2300      	moveq	r3, #0
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 fd53 	bl	8009fa4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	b2db      	uxtb	r3, r3
 8009502:	4618      	mov	r0, r3
 8009504:	f000 fd5d 	bl	8009fc2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009508:	4b1f      	ldr	r3, [pc, #124]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009516:	4b1c      	ldr	r3, [pc, #112]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8009522:	4b19      	ldr	r3, [pc, #100]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800952e:	4b16      	ldr	r3, [pc, #88]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009530:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800953a:	2b02      	cmp	r3, #2
 800953c:	d010      	beq.n	8009560 <RadioSetRxGenericConfig+0x29c>
 800953e:	2b02      	cmp	r3, #2
 8009540:	dc2c      	bgt.n	800959c <RadioSetRxGenericConfig+0x2d8>
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <RadioSetRxGenericConfig+0x288>
 8009546:	2b01      	cmp	r3, #1
 8009548:	d005      	beq.n	8009556 <RadioSetRxGenericConfig+0x292>
            break;
 800954a:	e027      	b.n	800959c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800954c:	4b0e      	ldr	r3, [pc, #56]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009554:	e023      	b.n	800959e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800955e:	e01e      	b.n	800959e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009566:	2b0b      	cmp	r3, #11
 8009568:	d004      	beq.n	8009574 <RadioSetRxGenericConfig+0x2b0>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009570:	2b0c      	cmp	r3, #12
 8009572:	d104      	bne.n	800957e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800957c:	e00f      	b.n	800959e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800957e:	4b02      	ldr	r3, [pc, #8]	; (8009588 <RadioSetRxGenericConfig+0x2c4>)
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009586:	e00a      	b.n	800959e <RadioSetRxGenericConfig+0x2da>
 8009588:	20001c74 	.word	0x20001c74
 800958c:	20001c70 	.word	0x20001c70
 8009590:	20001ce8 	.word	0x20001ce8
 8009594:	20001cac 	.word	0x20001cac
 8009598:	20001c82 	.word	0x20001c82
            break;
 800959c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800959e:	4b28      	ldr	r3, [pc, #160]	; (8009640 <RadioSetRxGenericConfig+0x37c>)
 80095a0:	2201      	movs	r2, #1
 80095a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80095a8:	4b25      	ldr	r3, [pc, #148]	; (8009640 <RadioSetRxGenericConfig+0x37c>)
 80095aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80095b2:	4b23      	ldr	r3, [pc, #140]	; (8009640 <RadioSetRxGenericConfig+0x37c>)
 80095b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80095b6:	4a22      	ldr	r2, [pc, #136]	; (8009640 <RadioSetRxGenericConfig+0x37c>)
 80095b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80095c4:	4b1e      	ldr	r3, [pc, #120]	; (8009640 <RadioSetRxGenericConfig+0x37c>)
 80095c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80095d0:	4b1b      	ldr	r3, [pc, #108]	; (8009640 <RadioSetRxGenericConfig+0x37c>)
 80095d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80095d6:	f7ff f9be 	bl	8008956 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80095da:	2001      	movs	r0, #1
 80095dc:	f7fe fb5a 	bl	8007c94 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80095e0:	4818      	ldr	r0, [pc, #96]	; (8009644 <RadioSetRxGenericConfig+0x380>)
 80095e2:	f000 ff7d 	bl	800a4e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80095e6:	4818      	ldr	r0, [pc, #96]	; (8009648 <RadioSetRxGenericConfig+0x384>)
 80095e8:	f001 f84c 	bl	800a684 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80095ec:	4b14      	ldr	r3, [pc, #80]	; (8009640 <RadioSetRxGenericConfig+0x37c>)
 80095ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d10d      	bne.n	8009612 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80095f6:	f240 7036 	movw	r0, #1846	; 0x736
 80095fa:	f001 f99f 	bl	800a93c <SUBGRF_ReadRegister>
 80095fe:	4603      	mov	r3, r0
 8009600:	f023 0304 	bic.w	r3, r3, #4
 8009604:	b2db      	uxtb	r3, r3
 8009606:	4619      	mov	r1, r3
 8009608:	f240 7036 	movw	r0, #1846	; 0x736
 800960c:	f001 f982 	bl	800a914 <SUBGRF_WriteRegister>
 8009610:	e00c      	b.n	800962c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009612:	f240 7036 	movw	r0, #1846	; 0x736
 8009616:	f001 f991 	bl	800a93c <SUBGRF_ReadRegister>
 800961a:	4603      	mov	r3, r0
 800961c:	f043 0304 	orr.w	r3, r3, #4
 8009620:	b2db      	uxtb	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	f240 7036 	movw	r0, #1846	; 0x736
 8009628:	f001 f974 	bl	800a914 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <RadioSetRxGenericConfig+0x37c>)
 800962e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009632:	609a      	str	r2, [r3, #8]
        break;
 8009634:	bf00      	nop
    }
    return status;
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009638:	4618      	mov	r0, r3
 800963a:	3730      	adds	r7, #48	; 0x30
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20001c74 	.word	0x20001c74
 8009644:	20001cac 	.word	0x20001cac
 8009648:	20001c82 	.word	0x20001c82

0800964c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b08e      	sub	sp, #56	; 0x38
 8009650:	af00      	add	r7, sp, #0
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	607b      	str	r3, [r7, #4]
 8009656:	4603      	mov	r3, r0
 8009658:	73fb      	strb	r3, [r7, #15]
 800965a:	4613      	mov	r3, r2
 800965c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800965e:	2300      	movs	r3, #0
 8009660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009662:	2300      	movs	r3, #0
 8009664:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009666:	f001 fc3c 	bl	800aee2 <RFW_DeInit>
    switch( modem )
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	2b03      	cmp	r3, #3
 800966e:	f200 8204 	bhi.w	8009a7a <RadioSetTxGenericConfig+0x42e>
 8009672:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <RadioSetTxGenericConfig+0x2c>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	080097fd 	.word	0x080097fd
 800967c:	08009945 	.word	0x08009945
 8009680:	08009a3d 	.word	0x08009a3d
 8009684:	08009689 	.word	0x08009689
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	7c9b      	ldrb	r3, [r3, #18]
 800968c:	2b08      	cmp	r3, #8
 800968e:	d902      	bls.n	8009696 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009690:	f04f 33ff 	mov.w	r3, #4294967295
 8009694:	e206      	b.n	8009aa4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	6899      	ldr	r1, [r3, #8]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	7c9b      	ldrb	r3, [r3, #18]
 800969e:	b29a      	uxth	r2, r3
 80096a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096a4:	4618      	mov	r0, r3
 80096a6:	f001 fde5 	bl	800b274 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d102      	bne.n	80096b8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80096b2:	f04f 33ff 	mov.w	r3, #4294967295
 80096b6:	e1f5      	b.n	8009aa4 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d813      	bhi.n	80096ec <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80096c4:	2302      	movs	r3, #2
 80096c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80096ca:	4b99      	ldr	r3, [pc, #612]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80096cc:	2203      	movs	r2, #3
 80096ce:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80096d0:	4b97      	ldr	r3, [pc, #604]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80096d2:	2203      	movs	r2, #3
 80096d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a94      	ldr	r2, [pc, #592]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80096de:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	7cda      	ldrb	r2, [r3, #19]
 80096e4:	4b92      	ldr	r3, [pc, #584]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80096e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ea:	e017      	b.n	800971c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80096f2:	4b8f      	ldr	r3, [pc, #572]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80096f8:	4b8d      	ldr	r3, [pc, #564]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a8a      	ldr	r2, [pc, #552]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 8009706:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	7cda      	ldrb	r2, [r3, #19]
 800970c:	4b88      	ldr	r3, [pc, #544]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 800970e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	089b      	lsrs	r3, r3, #2
 8009718:	4a85      	ldr	r2, [pc, #532]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 800971a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	b29b      	uxth	r3, r3
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	b29a      	uxth	r2, r3
 8009726:	4b82      	ldr	r3, [pc, #520]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 8009728:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800972a:	4b81      	ldr	r3, [pc, #516]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 800972c:	2204      	movs	r2, #4
 800972e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	7c9b      	ldrb	r3, [r3, #18]
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	b2da      	uxtb	r2, r3
 8009738:	4b7d      	ldr	r3, [pc, #500]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 800973a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800973c:	4b7c      	ldr	r3, [pc, #496]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 800973e:	2200      	movs	r2, #0
 8009740:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	7d9b      	ldrb	r3, [r3, #22]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d003      	beq.n	8009752 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	7d1b      	ldrb	r3, [r3, #20]
 800974e:	2b02      	cmp	r3, #2
 8009750:	d12b      	bne.n	80097aa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	7d5b      	ldrb	r3, [r3, #21]
 8009756:	2bf1      	cmp	r3, #241	; 0xf1
 8009758:	d00a      	beq.n	8009770 <RadioSetTxGenericConfig+0x124>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	7d5b      	ldrb	r3, [r3, #21]
 800975e:	2bf2      	cmp	r3, #242	; 0xf2
 8009760:	d006      	beq.n	8009770 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	7d5b      	ldrb	r3, [r3, #21]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d002      	beq.n	8009770 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800976a:	f04f 33ff 	mov.w	r3, #4294967295
 800976e:	e199      	b.n	8009aa4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800977a:	4b6e      	ldr	r3, [pc, #440]	; (8009934 <RadioSetTxGenericConfig+0x2e8>)
 800977c:	6819      	ldr	r1, [r3, #0]
 800977e:	f107 0320 	add.w	r3, r7, #32
 8009782:	4a6d      	ldr	r2, [pc, #436]	; (8009938 <RadioSetTxGenericConfig+0x2ec>)
 8009784:	4618      	mov	r0, r3
 8009786:	f001 fb9f 	bl	800aec8 <RFW_Init>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009790:	f04f 33ff 	mov.w	r3, #4294967295
 8009794:	e186      	b.n	8009aa4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009796:	4b66      	ldr	r3, [pc, #408]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 8009798:	2200      	movs	r2, #0
 800979a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800979c:	4b64      	ldr	r3, [pc, #400]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 800979e:	2201      	movs	r2, #1
 80097a0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80097a2:	4b63      	ldr	r3, [pc, #396]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	755a      	strb	r2, [r3, #21]
        {
 80097a8:	e00b      	b.n	80097c2 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	7d5a      	ldrb	r2, [r3, #21]
 80097ae:	4b60      	ldr	r3, [pc, #384]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80097b0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	7d9a      	ldrb	r2, [r3, #22]
 80097b6:	4b5e      	ldr	r3, [pc, #376]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80097b8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	7d1a      	ldrb	r2, [r3, #20]
 80097be:	4b5c      	ldr	r3, [pc, #368]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80097c0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80097c2:	f7ff f8c8 	bl	8008956 <RadioStandby>
        RadioSetModem( radio_modem );
 80097c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fa62 	bl	8007c94 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80097d0:	485a      	ldr	r0, [pc, #360]	; (800993c <RadioSetTxGenericConfig+0x2f0>)
 80097d2:	f000 fe85 	bl	800a4e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80097d6:	485a      	ldr	r0, [pc, #360]	; (8009940 <RadioSetTxGenericConfig+0x2f4>)
 80097d8:	f000 ff54 	bl	800a684 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80097dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fa18 	bl	8009c16 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	8a1b      	ldrh	r3, [r3, #16]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fa62 	bl	8009cb4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	899b      	ldrh	r3, [r3, #12]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 fa3d 	bl	8009c74 <SUBGRF_SetCrcPolynomial>
        break;
 80097fa:	e13f      	b.n	8009a7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009804:	f04f 33ff 	mov.w	r3, #4294967295
 8009808:	e14c      	b.n	8009aa4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	7c9b      	ldrb	r3, [r3, #18]
 800980e:	2b08      	cmp	r3, #8
 8009810:	d902      	bls.n	8009818 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009812:	f04f 33ff 	mov.w	r3, #4294967295
 8009816:	e145      	b.n	8009aa4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6899      	ldr	r1, [r3, #8]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	7c9b      	ldrb	r3, [r3, #18]
 8009820:	b29a      	uxth	r2, r3
 8009822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009826:	4618      	mov	r0, r3
 8009828:	f001 fd24 	bl	800b274 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800982c:	4b40      	ldr	r3, [pc, #256]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a3d      	ldr	r2, [pc, #244]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 800983a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	7cda      	ldrb	r2, [r3, #19]
 8009840:	4b3b      	ldr	r3, [pc, #236]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 8009842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	4a39      	ldr	r2, [pc, #228]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 800984c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800984e:	4b38      	ldr	r3, [pc, #224]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 8009850:	2200      	movs	r2, #0
 8009852:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	b29b      	uxth	r3, r3
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	b29a      	uxth	r2, r3
 800985e:	4b34      	ldr	r3, [pc, #208]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 8009860:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009862:	4b33      	ldr	r3, [pc, #204]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 8009864:	2204      	movs	r2, #4
 8009866:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	7c9b      	ldrb	r3, [r3, #18]
 800986c:	00db      	lsls	r3, r3, #3
 800986e:	b2da      	uxtb	r2, r3
 8009870:	4b2f      	ldr	r3, [pc, #188]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 8009872:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009874:	4b2e      	ldr	r3, [pc, #184]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 8009876:	2200      	movs	r2, #0
 8009878:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	7d9b      	ldrb	r3, [r3, #22]
 800987e:	2b02      	cmp	r3, #2
 8009880:	d003      	beq.n	800988a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	7d1b      	ldrb	r3, [r3, #20]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d12a      	bne.n	80098e0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	7d5b      	ldrb	r3, [r3, #21]
 800988e:	2bf1      	cmp	r3, #241	; 0xf1
 8009890:	d00a      	beq.n	80098a8 <RadioSetTxGenericConfig+0x25c>
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	7d5b      	ldrb	r3, [r3, #21]
 8009896:	2bf2      	cmp	r3, #242	; 0xf2
 8009898:	d006      	beq.n	80098a8 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	7d5b      	ldrb	r3, [r3, #21]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d002      	beq.n	80098a8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80098a2:	f04f 33ff 	mov.w	r3, #4294967295
 80098a6:	e0fd      	b.n	8009aa4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80098a8:	2301      	movs	r3, #1
 80098aa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80098b0:	4b20      	ldr	r3, [pc, #128]	; (8009934 <RadioSetTxGenericConfig+0x2e8>)
 80098b2:	6819      	ldr	r1, [r3, #0]
 80098b4:	f107 0314 	add.w	r3, r7, #20
 80098b8:	4a1f      	ldr	r2, [pc, #124]	; (8009938 <RadioSetTxGenericConfig+0x2ec>)
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 fb04 	bl	800aec8 <RFW_Init>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ca:	e0eb      	b.n	8009aa4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80098cc:	4b18      	ldr	r3, [pc, #96]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80098d2:	4b17      	ldr	r3, [pc, #92]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80098d8:	4b15      	ldr	r3, [pc, #84]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80098da:	2200      	movs	r2, #0
 80098dc:	755a      	strb	r2, [r3, #21]
        {
 80098de:	e00b      	b.n	80098f8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	7d5a      	ldrb	r2, [r3, #21]
 80098e4:	4b12      	ldr	r3, [pc, #72]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80098e6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	7d9a      	ldrb	r2, [r3, #22]
 80098ec:	4b10      	ldr	r3, [pc, #64]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80098ee:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	7d1a      	ldrb	r2, [r3, #20]
 80098f4:	4b0e      	ldr	r3, [pc, #56]	; (8009930 <RadioSetTxGenericConfig+0x2e4>)
 80098f6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80098f8:	f7ff f82d 	bl	8008956 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80098fc:	2000      	movs	r0, #0
 80098fe:	f7fe f9c9 	bl	8007c94 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009902:	480e      	ldr	r0, [pc, #56]	; (800993c <RadioSetTxGenericConfig+0x2f0>)
 8009904:	f000 fdec 	bl	800a4e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009908:	480d      	ldr	r0, [pc, #52]	; (8009940 <RadioSetTxGenericConfig+0x2f4>)
 800990a:	f000 febb 	bl	800a684 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800990e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009912:	4618      	mov	r0, r3
 8009914:	f000 f97f 	bl	8009c16 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	8a1b      	ldrh	r3, [r3, #16]
 800991c:	4618      	mov	r0, r3
 800991e:	f000 f9c9 	bl	8009cb4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	899b      	ldrh	r3, [r3, #12]
 8009926:	4618      	mov	r0, r3
 8009928:	f000 f9a4 	bl	8009c74 <SUBGRF_SetCrcPolynomial>
        break;
 800992c:	e0a6      	b.n	8009a7c <RadioSetTxGenericConfig+0x430>
 800992e:	bf00      	nop
 8009930:	20001c74 	.word	0x20001c74
 8009934:	20001c70 	.word	0x20001c70
 8009938:	20001cd0 	.word	0x20001cd0
 800993c:	20001cac 	.word	0x20001cac
 8009940:	20001c82 	.word	0x20001c82
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009944:	4b59      	ldr	r3, [pc, #356]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	781a      	ldrb	r2, [r3, #0]
 8009950:	4b56      	ldr	r3, [pc, #344]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	785a      	ldrb	r2, [r3, #1]
 800995a:	4b54      	ldr	r3, [pc, #336]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 800995c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	789a      	ldrb	r2, [r3, #2]
 8009964:	4b51      	ldr	r3, [pc, #324]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009966:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	78db      	ldrb	r3, [r3, #3]
 800996e:	2b02      	cmp	r3, #2
 8009970:	d010      	beq.n	8009994 <RadioSetTxGenericConfig+0x348>
 8009972:	2b02      	cmp	r3, #2
 8009974:	dc20      	bgt.n	80099b8 <RadioSetTxGenericConfig+0x36c>
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <RadioSetTxGenericConfig+0x334>
 800997a:	2b01      	cmp	r3, #1
 800997c:	d005      	beq.n	800998a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800997e:	e01b      	b.n	80099b8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009980:	4b4a      	ldr	r3, [pc, #296]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009988:	e017      	b.n	80099ba <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800998a:	4b48      	ldr	r3, [pc, #288]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009992:	e012      	b.n	80099ba <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b0b      	cmp	r3, #11
 800999a:	d003      	beq.n	80099a4 <RadioSetTxGenericConfig+0x358>
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b0c      	cmp	r3, #12
 80099a2:	d104      	bne.n	80099ae <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80099a4:	4b41      	ldr	r3, [pc, #260]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80099ac:	e005      	b.n	80099ba <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80099ae:	4b3f      	ldr	r3, [pc, #252]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80099b6:	e000      	b.n	80099ba <RadioSetTxGenericConfig+0x36e>
            break;
 80099b8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80099ba:	4b3c      	ldr	r3, [pc, #240]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 80099bc:	2201      	movs	r2, #1
 80099be:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	889a      	ldrh	r2, [r3, #4]
 80099c4:	4b39      	ldr	r3, [pc, #228]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 80099c6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	799a      	ldrb	r2, [r3, #6]
 80099cc:	4b37      	ldr	r3, [pc, #220]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 80099ce:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	79da      	ldrb	r2, [r3, #7]
 80099d4:	4b35      	ldr	r3, [pc, #212]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 80099d6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	7a1a      	ldrb	r2, [r3, #8]
 80099de:	4b33      	ldr	r3, [pc, #204]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 80099e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 80099e4:	f7fe ffb7 	bl	8008956 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80099e8:	2001      	movs	r0, #1
 80099ea:	f7fe f953 	bl	8007c94 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80099ee:	4830      	ldr	r0, [pc, #192]	; (8009ab0 <RadioSetTxGenericConfig+0x464>)
 80099f0:	f000 fd76 	bl	800a4e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099f4:	482f      	ldr	r0, [pc, #188]	; (8009ab4 <RadioSetTxGenericConfig+0x468>)
 80099f6:	f000 fe45 	bl	800a684 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80099fa:	4b2c      	ldr	r3, [pc, #176]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 80099fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a00:	2b06      	cmp	r3, #6
 8009a02:	d10d      	bne.n	8009a20 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009a04:	f640 0089 	movw	r0, #2185	; 0x889
 8009a08:	f000 ff98 	bl	800a93c <SUBGRF_ReadRegister>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f023 0304 	bic.w	r3, r3, #4
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	4619      	mov	r1, r3
 8009a16:	f640 0089 	movw	r0, #2185	; 0x889
 8009a1a:	f000 ff7b 	bl	800a914 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009a1e:	e02d      	b.n	8009a7c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009a20:	f640 0089 	movw	r0, #2185	; 0x889
 8009a24:	f000 ff8a 	bl	800a93c <SUBGRF_ReadRegister>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f043 0304 	orr.w	r3, r3, #4
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	4619      	mov	r1, r3
 8009a32:	f640 0089 	movw	r0, #2185	; 0x889
 8009a36:	f000 ff6d 	bl	800a914 <SUBGRF_WriteRegister>
        break;
 8009a3a:	e01f      	b.n	8009a7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d004      	beq.n	8009a4e <RadioSetTxGenericConfig+0x402>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a4c:	d902      	bls.n	8009a54 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a52:	e027      	b.n	8009aa4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009a54:	2003      	movs	r0, #3
 8009a56:	f7fe f91d 	bl	8007c94 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009a5a:	4b14      	ldr	r3, [pc, #80]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a11      	ldr	r2, [pc, #68]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009a68:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009a6a:	4b10      	ldr	r3, [pc, #64]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009a6c:	2216      	movs	r2, #22
 8009a6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009a72:	480f      	ldr	r0, [pc, #60]	; (8009ab0 <RadioSetTxGenericConfig+0x464>)
 8009a74:	f000 fd34 	bl	800a4e0 <SUBGRF_SetModulationParams>
        break;
 8009a78:	e000      	b.n	8009a7c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009a7a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f001 f863 	bl	800ab4c <SUBGRF_SetRfTxPower>
 8009a86:	4603      	mov	r3, r0
 8009a88:	461a      	mov	r2, r3
 8009a8a:	4b08      	ldr	r3, [pc, #32]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009a8c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009a90:	4b06      	ldr	r3, [pc, #24]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009a92:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 fa37 	bl	800af0a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009a9c:	4a03      	ldr	r2, [pc, #12]	; (8009aac <RadioSetTxGenericConfig+0x460>)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6053      	str	r3, [r2, #4]
    return 0;
 8009aa2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3738      	adds	r7, #56	; 0x38
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20001c74 	.word	0x20001c74
 8009ab0:	20001cac 	.word	0x20001cac
 8009ab4:	20001c82 	.word	0x20001c82

08009ab8 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bc80      	pop	{r7}
 8009ace:	4770      	bx	lr

08009ad0 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009ada:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bc80      	pop	{r7}
 8009ae4:	4770      	bx	lr
	...

08009ae8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009af6:	4a1d      	ldr	r2, [pc, #116]	; (8009b6c <SUBGRF_Init+0x84>)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009afc:	f7f6 fd98 	bl	8000630 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009b00:	2002      	movs	r0, #2
 8009b02:	f001 f8ff 	bl	800ad04 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009b06:	4b1a      	ldr	r3, [pc, #104]	; (8009b70 <SUBGRF_Init+0x88>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f000 f97d 	bl	8009e0c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009b12:	f001 fb84 	bl	800b21e <RBI_IsTCXO>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d10e      	bne.n	8009b3a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009b1c:	2140      	movs	r1, #64	; 0x40
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f000 fb82 	bl	800a228 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009b24:	2100      	movs	r1, #0
 8009b26:	f640 1011 	movw	r0, #2321	; 0x911
 8009b2a:	f000 fef3 	bl	800a914 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009b2e:	237f      	movs	r3, #127	; 0x7f
 8009b30:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009b32:	7b38      	ldrb	r0, [r7, #12]
 8009b34:	f000 fa8b 	bl	800a04e <SUBGRF_Calibrate>
 8009b38:	e009      	b.n	8009b4e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009b3a:	2120      	movs	r1, #32
 8009b3c:	f640 1011 	movw	r0, #2321	; 0x911
 8009b40:	f000 fee8 	bl	800a914 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009b44:	2120      	movs	r1, #32
 8009b46:	f640 1012 	movw	r0, #2322	; 0x912
 8009b4a:	f000 fee3 	bl	800a914 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009b4e:	210e      	movs	r1, #14
 8009b50:	f640 101f 	movw	r0, #2335	; 0x91f
 8009b54:	f000 fede 	bl	800a914 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009b58:	f001 fb3e 	bl	800b1d8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009b5c:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <SUBGRF_Init+0x8c>)
 8009b5e:	2201      	movs	r2, #1
 8009b60:	701a      	strb	r2, [r3, #0]
}
 8009b62:	bf00      	nop
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20001d0c 	.word	0x20001d0c
 8009b70:	20001d08 	.word	0x20001d08
 8009b74:	20001d00 	.word	0x20001d00

08009b78 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009b7c:	4b02      	ldr	r3, [pc, #8]	; (8009b88 <SUBGRF_GetOperatingMode+0x10>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bc80      	pop	{r7}
 8009b86:	4770      	bx	lr
 8009b88:	20001d00 	.word	0x20001d00

08009b8c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	f000 ff24 	bl	800a9ec <SUBGRF_WriteBuffer>
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009bbe:	f107 0317 	add.w	r3, r7, #23
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68b8      	ldr	r0, [r7, #8]
 8009bc6:	f000 fe27 	bl	800a818 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	79fa      	ldrb	r2, [r7, #7]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d201      	bcs.n	8009bd8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e007      	b.n	8009be8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009bd8:	7df8      	ldrb	r0, [r7, #23]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	68f9      	ldr	r1, [r7, #12]
 8009be2:	f000 ff25 	bl	800aa30 <SUBGRF_ReadBuffer>

    return 0;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009bfe:	7afb      	ldrb	r3, [r7, #11]
 8009c00:	4619      	mov	r1, r3
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff ffc2 	bl	8009b8c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f91b 	bl	8009e44 <SUBGRF_SetTx>
}
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009c1e:	2208      	movs	r2, #8
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8009c26:	f000 fe9d 	bl	800a964 <SUBGRF_WriteRegisters>
    return 0;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009c3e:	88fb      	ldrh	r3, [r7, #6]
 8009c40:	0a1b      	lsrs	r3, r3, #8
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009c48:	88fb      	ldrh	r3, [r7, #6]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009c4e:	f000 fb6f 	bl	800a330 <SUBGRF_GetPacketType>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d108      	bne.n	8009c6a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009c58:	f107 030c 	add.w	r3, r7, #12
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	4619      	mov	r1, r3
 8009c60:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009c64:	f000 fe7e 	bl	800a964 <SUBGRF_WriteRegisters>
            break;
 8009c68:	e000      	b.n	8009c6c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009c6a:	bf00      	nop
    }
}
 8009c6c:	bf00      	nop
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009c7e:	88fb      	ldrh	r3, [r7, #6]
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009c8e:	f000 fb4f 	bl	800a330 <SUBGRF_GetPacketType>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d108      	bne.n	8009caa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009c98:	f107 030c 	add.w	r3, r7, #12
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	f240 60be 	movw	r0, #1726	; 0x6be
 8009ca4:	f000 fe5e 	bl	800a964 <SUBGRF_WriteRegisters>
            break;
 8009ca8:	e000      	b.n	8009cac <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009caa:	bf00      	nop
    }
}
 8009cac:	bf00      	nop
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009cc2:	f000 fb35 	bl	800a330 <SUBGRF_GetPacketType>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d121      	bne.n	8009d10 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009ccc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009cd0:	f000 fe34 	bl	800a93c <SUBGRF_ReadRegister>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f023 0301 	bic.w	r3, r3, #1
 8009cda:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009cdc:	88fb      	ldrh	r3, [r7, #6]
 8009cde:	0a1b      	lsrs	r3, r3, #8
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	b25b      	sxtb	r3, r3
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	b25a      	sxtb	r2, r3
 8009cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	b25b      	sxtb	r3, r3
 8009cf2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009cfc:	f000 fe0a 	bl	800a914 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8009d00:	88fb      	ldrh	r3, [r7, #6]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	4619      	mov	r1, r3
 8009d06:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8009d0a:	f000 fe03 	bl	800a914 <SUBGRF_WriteRegister>
            break;
 8009d0e:	e000      	b.n	8009d12 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8009d10:	bf00      	nop
    }
}
 8009d12:	bf00      	nop
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8009d20:	2300      	movs	r3, #0
 8009d22:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009d2c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009d30:	f000 fe04 	bl	800a93c <SUBGRF_ReadRegister>
 8009d34:	4603      	mov	r3, r0
 8009d36:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	f023 0301 	bic.w	r3, r3, #1
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	4619      	mov	r1, r3
 8009d42:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009d46:	f000 fde5 	bl	800a914 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8009d4a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009d4e:	f000 fdf5 	bl	800a93c <SUBGRF_ReadRegister>
 8009d52:	4603      	mov	r3, r0
 8009d54:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009d56:	79bb      	ldrb	r3, [r7, #6]
 8009d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	4619      	mov	r1, r3
 8009d60:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009d64:	f000 fdd6 	bl	800a914 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009d68:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009d6c:	f000 f88a 	bl	8009e84 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009d70:	463b      	mov	r3, r7
 8009d72:	2204      	movs	r2, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	f640 0019 	movw	r0, #2073	; 0x819
 8009d7a:	f000 fe15 	bl	800a9a8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009d7e:	2000      	movs	r0, #0
 8009d80:	f000 f844 	bl	8009e0c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009d84:	79fb      	ldrb	r3, [r7, #7]
 8009d86:	4619      	mov	r1, r3
 8009d88:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009d8c:	f000 fdc2 	bl	800a914 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009d90:	79bb      	ldrb	r3, [r7, #6]
 8009d92:	4619      	mov	r1, r3
 8009d94:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009d98:	f000 fdbc 	bl	800a914 <SUBGRF_WriteRegister>

    return number;
 8009d9c:	683b      	ldr	r3, [r7, #0]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009db0:	2000      	movs	r0, #0
 8009db2:	f001 fa1c 	bl	800b1ee <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009db6:	2002      	movs	r0, #2
 8009db8:	f000 ffa4 	bl	800ad04 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009dbc:	793b      	ldrb	r3, [r7, #4]
 8009dbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009dc8:	793b      	ldrb	r3, [r7, #4]
 8009dca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009dd2:	b25b      	sxtb	r3, r3
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009dd8:	793b      	ldrb	r3, [r7, #4]
 8009dda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009de2:	4313      	orrs	r3, r2
 8009de4:	b25b      	sxtb	r3, r3
 8009de6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009de8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009dea:	f107 030f 	add.w	r3, r7, #15
 8009dee:	2201      	movs	r2, #1
 8009df0:	4619      	mov	r1, r3
 8009df2:	2084      	movs	r0, #132	; 0x84
 8009df4:	f000 fe3e 	bl	800aa74 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009df8:	4b03      	ldr	r3, [pc, #12]	; (8009e08 <SUBGRF_SetSleep+0x60>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	701a      	strb	r2, [r3, #0]
}
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20001d00 	.word	0x20001d00

08009e0c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009e16:	1dfb      	adds	r3, r7, #7
 8009e18:	2201      	movs	r2, #1
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	2080      	movs	r0, #128	; 0x80
 8009e1e:	f000 fe29 	bl	800aa74 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d103      	bne.n	8009e30 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <SUBGRF_SetStandby+0x34>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8009e2e:	e002      	b.n	8009e36 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8009e30:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <SUBGRF_SetStandby+0x34>)
 8009e32:	2202      	movs	r2, #2
 8009e34:	701a      	strb	r2, [r3, #0]
}
 8009e36:	bf00      	nop
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20001d00 	.word	0x20001d00

08009e44 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009e4c:	4b0c      	ldr	r3, [pc, #48]	; (8009e80 <SUBGRF_SetTx+0x3c>)
 8009e4e:	2204      	movs	r2, #4
 8009e50:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	0c1b      	lsrs	r3, r3, #16
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	0a1b      	lsrs	r3, r3, #8
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009e68:	f107 030c 	add.w	r3, r7, #12
 8009e6c:	2203      	movs	r2, #3
 8009e6e:	4619      	mov	r1, r3
 8009e70:	2083      	movs	r0, #131	; 0x83
 8009e72:	f000 fdff 	bl	800aa74 <SUBGRF_WriteCommand>
}
 8009e76:	bf00      	nop
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20001d00 	.word	0x20001d00

08009e84 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009e8c:	4b0c      	ldr	r3, [pc, #48]	; (8009ec0 <SUBGRF_SetRx+0x3c>)
 8009e8e:	2205      	movs	r2, #5
 8009e90:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	0c1b      	lsrs	r3, r3, #16
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	0a1b      	lsrs	r3, r3, #8
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009ea8:	f107 030c 	add.w	r3, r7, #12
 8009eac:	2203      	movs	r2, #3
 8009eae:	4619      	mov	r1, r3
 8009eb0:	2082      	movs	r0, #130	; 0x82
 8009eb2:	f000 fddf 	bl	800aa74 <SUBGRF_WriteCommand>
}
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20001d00 	.word	0x20001d00

08009ec4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009ecc:	4b0e      	ldr	r3, [pc, #56]	; (8009f08 <SUBGRF_SetRxBoosted+0x44>)
 8009ece:	2205      	movs	r2, #5
 8009ed0:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009ed2:	2197      	movs	r1, #151	; 0x97
 8009ed4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009ed8:	f000 fd1c 	bl	800a914 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	0c1b      	lsrs	r3, r3, #16
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	0a1b      	lsrs	r3, r3, #8
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009ef2:	f107 030c 	add.w	r3, r7, #12
 8009ef6:	2203      	movs	r2, #3
 8009ef8:	4619      	mov	r1, r3
 8009efa:	2082      	movs	r0, #130	; 0x82
 8009efc:	f000 fdba 	bl	800aa74 <SUBGRF_WriteCommand>
}
 8009f00:	bf00      	nop
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20001d00 	.word	0x20001d00

08009f0c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	0c1b      	lsrs	r3, r3, #16
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	0a1b      	lsrs	r3, r3, #8
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	0c1b      	lsrs	r3, r3, #16
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	2206      	movs	r2, #6
 8009f48:	4619      	mov	r1, r3
 8009f4a:	2094      	movs	r0, #148	; 0x94
 8009f4c:	f000 fd92 	bl	800aa74 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009f50:	4b03      	ldr	r3, [pc, #12]	; (8009f60 <SUBGRF_SetRxDutyCycle+0x54>)
 8009f52:	2206      	movs	r2, #6
 8009f54:	701a      	strb	r2, [r3, #0]
}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20001d00 	.word	0x20001d00

08009f64 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	20c5      	movs	r0, #197	; 0xc5
 8009f6e:	f000 fd81 	bl	800aa74 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009f72:	4b02      	ldr	r3, [pc, #8]	; (8009f7c <SUBGRF_SetCad+0x18>)
 8009f74:	2207      	movs	r2, #7
 8009f76:	701a      	strb	r2, [r3, #0]
}
 8009f78:	bf00      	nop
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20001d00 	.word	0x20001d00

08009f80 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009f84:	2200      	movs	r2, #0
 8009f86:	2100      	movs	r1, #0
 8009f88:	20d1      	movs	r0, #209	; 0xd1
 8009f8a:	f000 fd73 	bl	800aa74 <SUBGRF_WriteCommand>
}
 8009f8e:	bf00      	nop
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009f96:	2200      	movs	r2, #0
 8009f98:	2100      	movs	r1, #0
 8009f9a:	20d2      	movs	r0, #210	; 0xd2
 8009f9c:	f000 fd6a 	bl	800aa74 <SUBGRF_WriteCommand>
}
 8009fa0:	bf00      	nop
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009fae:	1dfb      	adds	r3, r7, #7
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	209f      	movs	r0, #159	; 0x9f
 8009fb6:	f000 fd5d 	bl	800aa74 <SUBGRF_WriteCommand>
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	4603      	mov	r3, r0
 8009fca:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009fcc:	1dfb      	adds	r3, r7, #7
 8009fce:	2201      	movs	r2, #1
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	20a0      	movs	r0, #160	; 0xa0
 8009fd4:	f000 fd4e 	bl	800aa74 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	2b3f      	cmp	r3, #63	; 0x3f
 8009fdc:	d91c      	bls.n	800a018 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	085b      	lsrs	r3, r3, #1
 8009fe2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009fec:	e005      	b.n	8009ffa <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	089b      	lsrs	r3, r3, #2
 8009ff2:	73fb      	strb	r3, [r7, #15]
            exp++;
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	2b1f      	cmp	r3, #31
 8009ffe:	d8f6      	bhi.n	8009fee <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	00db      	lsls	r3, r3, #3
 800a004:	b2da      	uxtb	r2, r3
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	4413      	add	r3, r2
 800a00a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a00c:	7b7b      	ldrb	r3, [r7, #13]
 800a00e:	4619      	mov	r1, r3
 800a010:	f240 7006 	movw	r0, #1798	; 0x706
 800a014:	f000 fc7e 	bl	800a914 <SUBGRF_WriteRegister>
    }
}
 800a018:	bf00      	nop
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a026:	f001 f905 	bl	800b234 <RBI_IsDCDC>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d102      	bne.n	800a036 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a030:	2301      	movs	r3, #1
 800a032:	71fb      	strb	r3, [r7, #7]
 800a034:	e001      	b.n	800a03a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a036:	2300      	movs	r3, #0
 800a038:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a03a:	1dfb      	adds	r3, r7, #7
 800a03c:	2201      	movs	r2, #1
 800a03e:	4619      	mov	r1, r3
 800a040:	2096      	movs	r0, #150	; 0x96
 800a042:	f000 fd17 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a056:	793b      	ldrb	r3, [r7, #4]
 800a058:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	019b      	lsls	r3, r3, #6
 800a060:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a062:	793b      	ldrb	r3, [r7, #4]
 800a064:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a06c:	b25b      	sxtb	r3, r3
 800a06e:	4313      	orrs	r3, r2
 800a070:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a072:	793b      	ldrb	r3, [r7, #4]
 800a074:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a07c:	b25b      	sxtb	r3, r3
 800a07e:	4313      	orrs	r3, r2
 800a080:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a082:	793b      	ldrb	r3, [r7, #4]
 800a084:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a08c:	b25b      	sxtb	r3, r3
 800a08e:	4313      	orrs	r3, r2
 800a090:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a092:	793b      	ldrb	r3, [r7, #4]
 800a094:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a09c:	b25b      	sxtb	r3, r3
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a0a2:	793b      	ldrb	r3, [r7, #4]
 800a0a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a0ac:	b25b      	sxtb	r3, r3
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a0b2:	793b      	ldrb	r3, [r7, #4]
 800a0b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	b25b      	sxtb	r3, r3
 800a0c0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a0c2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a0c4:	f107 030f 	add.w	r3, r7, #15
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	2089      	movs	r0, #137	; 0x89
 800a0ce:	f000 fcd1 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a0d2:	bf00      	nop
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a1d      	ldr	r2, [pc, #116]	; (800a15c <SUBGRF_CalibrateImage+0x80>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d904      	bls.n	800a0f6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a0ec:	23e1      	movs	r3, #225	; 0xe1
 800a0ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a0f0:	23e9      	movs	r3, #233	; 0xe9
 800a0f2:	737b      	strb	r3, [r7, #13]
 800a0f4:	e027      	b.n	800a146 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a19      	ldr	r2, [pc, #100]	; (800a160 <SUBGRF_CalibrateImage+0x84>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d904      	bls.n	800a108 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a0fe:	23d7      	movs	r3, #215	; 0xd7
 800a100:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a102:	23db      	movs	r3, #219	; 0xdb
 800a104:	737b      	strb	r3, [r7, #13]
 800a106:	e01e      	b.n	800a146 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a16      	ldr	r2, [pc, #88]	; (800a164 <SUBGRF_CalibrateImage+0x88>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d904      	bls.n	800a11a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a110:	23c1      	movs	r3, #193	; 0xc1
 800a112:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a114:	23c5      	movs	r3, #197	; 0xc5
 800a116:	737b      	strb	r3, [r7, #13]
 800a118:	e015      	b.n	800a146 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a12      	ldr	r2, [pc, #72]	; (800a168 <SUBGRF_CalibrateImage+0x8c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d904      	bls.n	800a12c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a122:	2375      	movs	r3, #117	; 0x75
 800a124:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a126:	2381      	movs	r3, #129	; 0x81
 800a128:	737b      	strb	r3, [r7, #13]
 800a12a:	e00c      	b.n	800a146 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a0f      	ldr	r2, [pc, #60]	; (800a16c <SUBGRF_CalibrateImage+0x90>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d904      	bls.n	800a13e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a134:	236b      	movs	r3, #107	; 0x6b
 800a136:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a138:	236f      	movs	r3, #111	; 0x6f
 800a13a:	737b      	strb	r3, [r7, #13]
 800a13c:	e003      	b.n	800a146 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a13e:	2329      	movs	r3, #41	; 0x29
 800a140:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a142:	232b      	movs	r3, #43	; 0x2b
 800a144:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a146:	f107 030c 	add.w	r3, r7, #12
 800a14a:	2202      	movs	r2, #2
 800a14c:	4619      	mov	r1, r3
 800a14e:	2098      	movs	r0, #152	; 0x98
 800a150:	f000 fc90 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a154:	bf00      	nop
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	35a4e900 	.word	0x35a4e900
 800a160:	32a9f880 	.word	0x32a9f880
 800a164:	2de54480 	.word	0x2de54480
 800a168:	1b6b0b00 	.word	0x1b6b0b00
 800a16c:	1954fc40 	.word	0x1954fc40

0800a170 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a170:	b590      	push	{r4, r7, lr}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	461a      	mov	r2, r3
 800a17e:	4623      	mov	r3, r4
 800a180:	71fb      	strb	r3, [r7, #7]
 800a182:	4603      	mov	r3, r0
 800a184:	71bb      	strb	r3, [r7, #6]
 800a186:	460b      	mov	r3, r1
 800a188:	717b      	strb	r3, [r7, #5]
 800a18a:	4613      	mov	r3, r2
 800a18c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a192:	79bb      	ldrb	r3, [r7, #6]
 800a194:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a196:	797b      	ldrb	r3, [r7, #5]
 800a198:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a19a:	793b      	ldrb	r3, [r7, #4]
 800a19c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a19e:	f107 030c 	add.w	r3, r7, #12
 800a1a2:	2204      	movs	r2, #4
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	2095      	movs	r0, #149	; 0x95
 800a1a8:	f000 fc64 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a1ac:	bf00      	nop
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd90      	pop	{r4, r7, pc}

0800a1b4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a1b4:	b590      	push	{r4, r7, lr}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4623      	mov	r3, r4
 800a1c4:	80fb      	strh	r3, [r7, #6]
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	80bb      	strh	r3, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	807b      	strh	r3, [r7, #2]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a1d2:	88fb      	ldrh	r3, [r7, #6]
 800a1d4:	0a1b      	lsrs	r3, r3, #8
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a1dc:	88fb      	ldrh	r3, [r7, #6]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a1e2:	88bb      	ldrh	r3, [r7, #4]
 800a1e4:	0a1b      	lsrs	r3, r3, #8
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a1ec:	88bb      	ldrh	r3, [r7, #4]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a1f2:	887b      	ldrh	r3, [r7, #2]
 800a1f4:	0a1b      	lsrs	r3, r3, #8
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a1fc:	887b      	ldrh	r3, [r7, #2]
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a202:	883b      	ldrh	r3, [r7, #0]
 800a204:	0a1b      	lsrs	r3, r3, #8
 800a206:	b29b      	uxth	r3, r3
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a20c:	883b      	ldrh	r3, [r7, #0]
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	2208      	movs	r2, #8
 800a218:	4619      	mov	r1, r3
 800a21a:	2008      	movs	r0, #8
 800a21c:	f000 fc2a 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a220:	bf00      	nop
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	bd90      	pop	{r4, r7, pc}

0800a228 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	6039      	str	r1, [r7, #0]
 800a232:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a234:	79fb      	ldrb	r3, [r7, #7]
 800a236:	f003 0307 	and.w	r3, r3, #7
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	0c1b      	lsrs	r3, r3, #16
 800a242:	b2db      	uxtb	r3, r3
 800a244:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	0a1b      	lsrs	r3, r3, #8
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	b2db      	uxtb	r3, r3
 800a252:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a254:	f107 030c 	add.w	r3, r7, #12
 800a258:	2204      	movs	r2, #4
 800a25a:	4619      	mov	r1, r3
 800a25c:	2097      	movs	r0, #151	; 0x97
 800a25e:	f000 fc09 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a262:	bf00      	nop
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
	...

0800a26c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a26c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a27a:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <SUBGRF_SetRfFrequency+0x84>)
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	f083 0301 	eor.w	r3, r3, #1
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff ff27 	bl	800a0dc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a28e:	4b18      	ldr	r3, [pc, #96]	; (800a2f0 <SUBGRF_SetRfFrequency+0x84>)
 800a290:	2201      	movs	r2, #1
 800a292:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	461c      	mov	r4, r3
 800a29a:	4615      	mov	r5, r2
 800a29c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a2a0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a2a4:	4a13      	ldr	r2, [pc, #76]	; (800a2f4 <SUBGRF_SetRfFrequency+0x88>)
 800a2a6:	f04f 0300 	mov.w	r3, #0
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	f7f5 ff67 	bl	8000180 <__aeabi_uldivmod>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	0e1b      	lsrs	r3, r3, #24
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	0c1b      	lsrs	r3, r3, #16
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	0a1b      	lsrs	r3, r3, #8
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a2d8:	f107 0308 	add.w	r3, r7, #8
 800a2dc:	2204      	movs	r2, #4
 800a2de:	4619      	mov	r1, r3
 800a2e0:	2086      	movs	r0, #134	; 0x86
 800a2e2:	f000 fbc7 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a2e6:	bf00      	nop
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a2f0:	20001d08 	.word	0x20001d08
 800a2f4:	01e84800 	.word	0x01e84800

0800a2f8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a302:	79fa      	ldrb	r2, [r7, #7]
 800a304:	4b09      	ldr	r3, [pc, #36]	; (800a32c <SUBGRF_SetPacketType+0x34>)
 800a306:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d104      	bne.n	800a318 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a30e:	2100      	movs	r1, #0
 800a310:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a314:	f000 fafe 	bl	800a914 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a318:	1dfb      	adds	r3, r7, #7
 800a31a:	2201      	movs	r2, #1
 800a31c:	4619      	mov	r1, r3
 800a31e:	208a      	movs	r0, #138	; 0x8a
 800a320:	f000 fba8 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a324:	bf00      	nop
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20001d01 	.word	0x20001d01

0800a330 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
    return PacketType;
 800a334:	4b02      	ldr	r3, [pc, #8]	; (800a340 <SUBGRF_GetPacketType+0x10>)
 800a336:	781b      	ldrb	r3, [r3, #0]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr
 800a340:	20001d01 	.word	0x20001d01

0800a344 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	71fb      	strb	r3, [r7, #7]
 800a34e:	460b      	mov	r3, r1
 800a350:	71bb      	strb	r3, [r7, #6]
 800a352:	4613      	mov	r3, r2
 800a354:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a356:	79fb      	ldrb	r3, [r7, #7]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d149      	bne.n	800a3f0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a35c:	2000      	movs	r0, #0
 800a35e:	f000 ff74 	bl	800b24a <RBI_GetRFOMaxPowerConfig>
 800a362:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a364:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	da01      	bge.n	800a372 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b0e      	cmp	r3, #14
 800a376:	d10e      	bne.n	800a396 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a378:	2301      	movs	r3, #1
 800a37a:	2201      	movs	r2, #1
 800a37c:	2100      	movs	r1, #0
 800a37e:	2004      	movs	r0, #4
 800a380:	f7ff fef6 	bl	800a170 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a384:	79ba      	ldrb	r2, [r7, #6]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	330e      	adds	r3, #14
 800a390:	b2db      	uxtb	r3, r3
 800a392:	71bb      	strb	r3, [r7, #6]
 800a394:	e01f      	b.n	800a3d6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b0a      	cmp	r3, #10
 800a39a:	d10e      	bne.n	800a3ba <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a39c:	2301      	movs	r3, #1
 800a39e:	2201      	movs	r2, #1
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	f7ff fee4 	bl	800a170 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a3a8:	79ba      	ldrb	r2, [r7, #6]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	330d      	adds	r3, #13
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	71bb      	strb	r3, [r7, #6]
 800a3b8:	e00d      	b.n	800a3d6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	2201      	movs	r2, #1
 800a3be:	2100      	movs	r1, #0
 800a3c0:	2007      	movs	r0, #7
 800a3c2:	f7ff fed5 	bl	800a170 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a3c6:	79ba      	ldrb	r2, [r7, #6]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	330e      	adds	r3, #14
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a3d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a3da:	f113 0f11 	cmn.w	r3, #17
 800a3de:	da01      	bge.n	800a3e4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a3e0:	23ef      	movs	r3, #239	; 0xef
 800a3e2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a3e4:	2118      	movs	r1, #24
 800a3e6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a3ea:	f000 fa93 	bl	800a914 <SUBGRF_WriteRegister>
 800a3ee:	e067      	b.n	800a4c0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a3f0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a3f4:	f000 faa2 	bl	800a93c <SUBGRF_ReadRegister>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f043 031e 	orr.w	r3, r3, #30
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	4619      	mov	r1, r3
 800a402:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a406:	f000 fa85 	bl	800a914 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a40a:	2001      	movs	r0, #1
 800a40c:	f000 ff1d 	bl	800b24a <RBI_GetRFOMaxPowerConfig>
 800a410:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a412:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	429a      	cmp	r2, r3
 800a41a:	da01      	bge.n	800a420 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2b14      	cmp	r3, #20
 800a424:	d10e      	bne.n	800a444 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a426:	2301      	movs	r3, #1
 800a428:	2200      	movs	r2, #0
 800a42a:	2105      	movs	r1, #5
 800a42c:	2003      	movs	r0, #3
 800a42e:	f7ff fe9f 	bl	800a170 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a432:	79ba      	ldrb	r2, [r7, #6]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	b2db      	uxtb	r3, r3
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	3316      	adds	r3, #22
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	71bb      	strb	r3, [r7, #6]
 800a442:	e031      	b.n	800a4a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b11      	cmp	r3, #17
 800a448:	d10e      	bne.n	800a468 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a44a:	2301      	movs	r3, #1
 800a44c:	2200      	movs	r2, #0
 800a44e:	2103      	movs	r1, #3
 800a450:	2002      	movs	r0, #2
 800a452:	f7ff fe8d 	bl	800a170 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a456:	79ba      	ldrb	r2, [r7, #6]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	3316      	adds	r3, #22
 800a462:	b2db      	uxtb	r3, r3
 800a464:	71bb      	strb	r3, [r7, #6]
 800a466:	e01f      	b.n	800a4a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b0e      	cmp	r3, #14
 800a46c:	d10e      	bne.n	800a48c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a46e:	2301      	movs	r3, #1
 800a470:	2200      	movs	r2, #0
 800a472:	2102      	movs	r1, #2
 800a474:	2002      	movs	r0, #2
 800a476:	f7ff fe7b 	bl	800a170 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a47a:	79ba      	ldrb	r2, [r7, #6]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	b2db      	uxtb	r3, r3
 800a484:	330e      	adds	r3, #14
 800a486:	b2db      	uxtb	r3, r3
 800a488:	71bb      	strb	r3, [r7, #6]
 800a48a:	e00d      	b.n	800a4a8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a48c:	2301      	movs	r3, #1
 800a48e:	2200      	movs	r2, #0
 800a490:	2107      	movs	r1, #7
 800a492:	2004      	movs	r0, #4
 800a494:	f7ff fe6c 	bl	800a170 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a498:	79ba      	ldrb	r2, [r7, #6]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	3316      	adds	r3, #22
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a4a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a4ac:	f113 0f09 	cmn.w	r3, #9
 800a4b0:	da01      	bge.n	800a4b6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a4b2:	23f7      	movs	r3, #247	; 0xf7
 800a4b4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a4b6:	2138      	movs	r1, #56	; 0x38
 800a4b8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a4bc:	f000 fa2a 	bl	800a914 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a4c0:	79bb      	ldrb	r3, [r7, #6]
 800a4c2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a4c4:	797b      	ldrb	r3, [r7, #5]
 800a4c6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a4c8:	f107 0308 	add.w	r3, r7, #8
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	208e      	movs	r0, #142	; 0x8e
 800a4d2:	f000 facf 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a4d6:	bf00      	nop
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a4e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a4ee:	4a61      	ldr	r2, [pc, #388]	; (800a674 <SUBGRF_SetModulationParams+0x194>)
 800a4f0:	f107 0308 	add.w	r3, r7, #8
 800a4f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a4f8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	781a      	ldrb	r2, [r3, #0]
 800a500:	4b5d      	ldr	r3, [pc, #372]	; (800a678 <SUBGRF_SetModulationParams+0x198>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d004      	beq.n	800a512 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fef3 	bl	800a2f8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b03      	cmp	r3, #3
 800a518:	f200 80a5 	bhi.w	800a666 <SUBGRF_SetModulationParams+0x186>
 800a51c:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <SUBGRF_SetModulationParams+0x44>)
 800a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a522:	bf00      	nop
 800a524:	0800a535 	.word	0x0800a535
 800a528:	0800a5f5 	.word	0x0800a5f5
 800a52c:	0800a5b7 	.word	0x0800a5b7
 800a530:	0800a623 	.word	0x0800a623
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a534:	2308      	movs	r3, #8
 800a536:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	4a4f      	ldr	r2, [pc, #316]	; (800a67c <SUBGRF_SetModulationParams+0x19c>)
 800a53e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a542:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	0c1b      	lsrs	r3, r3, #16
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	0a1b      	lsrs	r3, r3, #8
 800a550:	b2db      	uxtb	r3, r3
 800a552:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	7b1b      	ldrb	r3, [r3, #12]
 800a55e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	7b5b      	ldrb	r3, [r3, #13]
 800a564:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	2200      	movs	r2, #0
 800a56c:	461c      	mov	r4, r3
 800a56e:	4615      	mov	r5, r2
 800a570:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a574:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a578:	4a41      	ldr	r2, [pc, #260]	; (800a680 <SUBGRF_SetModulationParams+0x1a0>)
 800a57a:	f04f 0300 	mov.w	r3, #0
 800a57e:	4640      	mov	r0, r8
 800a580:	4649      	mov	r1, r9
 800a582:	f7f5 fdfd 	bl	8000180 <__aeabi_uldivmod>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4613      	mov	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	0c1b      	lsrs	r3, r3, #16
 800a592:	b2db      	uxtb	r3, r3
 800a594:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a5a4:	7cfb      	ldrb	r3, [r7, #19]
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	f107 0308 	add.w	r3, r7, #8
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	208b      	movs	r0, #139	; 0x8b
 800a5b0:	f000 fa60 	bl	800aa74 <SUBGRF_WriteCommand>
        break;
 800a5b4:	e058      	b.n	800a668 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a5b6:	2304      	movs	r3, #4
 800a5b8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	4a2f      	ldr	r2, [pc, #188]	; (800a67c <SUBGRF_SetModulationParams+0x19c>)
 800a5c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	0c1b      	lsrs	r3, r3, #16
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	0a1b      	lsrs	r3, r3, #8
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	7d1b      	ldrb	r3, [r3, #20]
 800a5e0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a5e2:	7cfb      	ldrb	r3, [r7, #19]
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	f107 0308 	add.w	r3, r7, #8
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	208b      	movs	r0, #139	; 0x8b
 800a5ee:	f000 fa41 	bl	800aa74 <SUBGRF_WriteCommand>
        break;
 800a5f2:	e039      	b.n	800a668 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a5f4:	2304      	movs	r3, #4
 800a5f6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7e1b      	ldrb	r3, [r3, #24]
 800a5fc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	7e5b      	ldrb	r3, [r3, #25]
 800a602:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	7e9b      	ldrb	r3, [r3, #26]
 800a608:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7edb      	ldrb	r3, [r3, #27]
 800a60e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a610:	7cfb      	ldrb	r3, [r7, #19]
 800a612:	b29a      	uxth	r2, r3
 800a614:	f107 0308 	add.w	r3, r7, #8
 800a618:	4619      	mov	r1, r3
 800a61a:	208b      	movs	r0, #139	; 0x8b
 800a61c:	f000 fa2a 	bl	800aa74 <SUBGRF_WriteCommand>

        break;
 800a620:	e022      	b.n	800a668 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a622:	2305      	movs	r3, #5
 800a624:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	4a14      	ldr	r2, [pc, #80]	; (800a67c <SUBGRF_SetModulationParams+0x19c>)
 800a62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a630:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	0c1b      	lsrs	r3, r3, #16
 800a636:	b2db      	uxtb	r3, r3
 800a638:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	0a1b      	lsrs	r3, r3, #8
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	7b1b      	ldrb	r3, [r3, #12]
 800a64c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	7b5b      	ldrb	r3, [r3, #13]
 800a652:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a654:	7cfb      	ldrb	r3, [r7, #19]
 800a656:	b29a      	uxth	r2, r3
 800a658:	f107 0308 	add.w	r3, r7, #8
 800a65c:	4619      	mov	r1, r3
 800a65e:	208b      	movs	r0, #139	; 0x8b
 800a660:	f000 fa08 	bl	800aa74 <SUBGRF_WriteCommand>
        break;
 800a664:	e000      	b.n	800a668 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800a666:	bf00      	nop
    }
}
 800a668:	bf00      	nop
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a672:	bf00      	nop
 800a674:	0800ba88 	.word	0x0800ba88
 800a678:	20001d01 	.word	0x20001d01
 800a67c:	3d090000 	.word	0x3d090000
 800a680:	01e84800 	.word	0x01e84800

0800a684 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a690:	4a48      	ldr	r2, [pc, #288]	; (800a7b4 <SUBGRF_SetPacketParams+0x130>)
 800a692:	f107 030c 	add.w	r3, r7, #12
 800a696:	ca07      	ldmia	r2, {r0, r1, r2}
 800a698:	c303      	stmia	r3!, {r0, r1}
 800a69a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	781a      	ldrb	r2, [r3, #0]
 800a6a0:	4b45      	ldr	r3, [pc, #276]	; (800a7b8 <SUBGRF_SetPacketParams+0x134>)
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d004      	beq.n	800a6b2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff fe23 	bl	800a2f8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d878      	bhi.n	800a7ac <SUBGRF_SetPacketParams+0x128>
 800a6ba:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <SUBGRF_SetPacketParams+0x3c>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6d1 	.word	0x0800a6d1
 800a6c4:	0800a761 	.word	0x0800a761
 800a6c8:	0800a755 	.word	0x0800a755
 800a6cc:	0800a6d1 	.word	0x0800a6d1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	7a5b      	ldrb	r3, [r3, #9]
 800a6d4:	2bf1      	cmp	r3, #241	; 0xf1
 800a6d6:	d10a      	bne.n	800a6ee <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800a6d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a6dc:	f7ff faaa 	bl	8009c34 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800a6e0:	f248 0005 	movw	r0, #32773	; 0x8005
 800a6e4:	f7ff fac6 	bl	8009c74 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	75bb      	strb	r3, [r7, #22]
 800a6ec:	e011      	b.n	800a712 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	7a5b      	ldrb	r3, [r3, #9]
 800a6f2:	2bf2      	cmp	r3, #242	; 0xf2
 800a6f4:	d10a      	bne.n	800a70c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800a6f6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800a6fa:	f7ff fa9b 	bl	8009c34 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800a6fe:	f241 0021 	movw	r0, #4129	; 0x1021
 800a702:	f7ff fab7 	bl	8009c74 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800a706:	2306      	movs	r3, #6
 800a708:	75bb      	strb	r3, [r7, #22]
 800a70a:	e002      	b.n	800a712 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	7a5b      	ldrb	r3, [r3, #9]
 800a710:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800a712:	2309      	movs	r3, #9
 800a714:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	885b      	ldrh	r3, [r3, #2]
 800a71a:	0a1b      	lsrs	r3, r3, #8
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	885b      	ldrh	r3, [r3, #2]
 800a726:	b2db      	uxtb	r3, r3
 800a728:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	791b      	ldrb	r3, [r3, #4]
 800a72e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	795b      	ldrb	r3, [r3, #5]
 800a734:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	799b      	ldrb	r3, [r3, #6]
 800a73a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	79db      	ldrb	r3, [r3, #7]
 800a740:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	7a1b      	ldrb	r3, [r3, #8]
 800a746:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800a748:	7dbb      	ldrb	r3, [r7, #22]
 800a74a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7a9b      	ldrb	r3, [r3, #10]
 800a750:	753b      	strb	r3, [r7, #20]
        break;
 800a752:	e022      	b.n	800a79a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800a754:	2301      	movs	r3, #1
 800a756:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	7b1b      	ldrb	r3, [r3, #12]
 800a75c:	733b      	strb	r3, [r7, #12]
        break;
 800a75e:	e01c      	b.n	800a79a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800a760:	2306      	movs	r3, #6
 800a762:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	89db      	ldrh	r3, [r3, #14]
 800a768:	0a1b      	lsrs	r3, r3, #8
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	89db      	ldrh	r3, [r3, #14]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	7c1a      	ldrb	r2, [r3, #16]
 800a77c:	4b0f      	ldr	r3, [pc, #60]	; (800a7bc <SUBGRF_SetPacketParams+0x138>)
 800a77e:	4611      	mov	r1, r2
 800a780:	7019      	strb	r1, [r3, #0]
 800a782:	4613      	mov	r3, r2
 800a784:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7c5b      	ldrb	r3, [r3, #17]
 800a78a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7c9b      	ldrb	r3, [r3, #18]
 800a790:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	7cdb      	ldrb	r3, [r3, #19]
 800a796:	747b      	strb	r3, [r7, #17]
        break;
 800a798:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a79a:	7dfb      	ldrb	r3, [r7, #23]
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	f107 030c 	add.w	r3, r7, #12
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	208c      	movs	r0, #140	; 0x8c
 800a7a6:	f000 f965 	bl	800aa74 <SUBGRF_WriteCommand>
 800a7aa:	e000      	b.n	800a7ae <SUBGRF_SetPacketParams+0x12a>
        return;
 800a7ac:	bf00      	nop
}
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	0800ba90 	.word	0x0800ba90
 800a7b8:	20001d01 	.word	0x20001d01
 800a7bc:	20001d02 	.word	0x20001d02

0800a7c0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	460a      	mov	r2, r1
 800a7ca:	71fb      	strb	r3, [r7, #7]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a7d0:	79fb      	ldrb	r3, [r7, #7]
 800a7d2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a7d4:	79bb      	ldrb	r3, [r7, #6]
 800a7d6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a7d8:	f107 030c 	add.w	r3, r7, #12
 800a7dc:	2202      	movs	r2, #2
 800a7de:	4619      	mov	r1, r3
 800a7e0:	208f      	movs	r0, #143	; 0x8f
 800a7e2:	f000 f947 	bl	800aa74 <SUBGRF_WriteCommand>
}
 800a7e6:	bf00      	nop
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a7f8:	1d3b      	adds	r3, r7, #4
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	2015      	movs	r0, #21
 800a800:	f000 f95a 	bl	800aab8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a804:	793b      	ldrb	r3, [r7, #4]
 800a806:	425b      	negs	r3, r3
 800a808:	105b      	asrs	r3, r3, #1
 800a80a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a80c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a822:	f107 030c 	add.w	r3, r7, #12
 800a826:	2202      	movs	r2, #2
 800a828:	4619      	mov	r1, r3
 800a82a:	2013      	movs	r0, #19
 800a82c:	f000 f944 	bl	800aab8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a830:	f7ff fd7e 	bl	800a330 <SUBGRF_GetPacketType>
 800a834:	4603      	mov	r3, r0
 800a836:	2b01      	cmp	r3, #1
 800a838:	d10d      	bne.n	800a856 <SUBGRF_GetRxBufferStatus+0x3e>
 800a83a:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <SUBGRF_GetRxBufferStatus+0x54>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b01      	cmp	r3, #1
 800a842:	d108      	bne.n	800a856 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a844:	f240 7002 	movw	r0, #1794	; 0x702
 800a848:	f000 f878 	bl	800a93c <SUBGRF_ReadRegister>
 800a84c:	4603      	mov	r3, r0
 800a84e:	461a      	mov	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	701a      	strb	r2, [r3, #0]
 800a854:	e002      	b.n	800a85c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a856:	7b3a      	ldrb	r2, [r7, #12]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a85c:	7b7a      	ldrb	r2, [r7, #13]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	701a      	strb	r2, [r3, #0]
}
 800a862:	bf00      	nop
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	20001d02 	.word	0x20001d02

0800a870 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a878:	f107 030c 	add.w	r3, r7, #12
 800a87c:	2203      	movs	r2, #3
 800a87e:	4619      	mov	r1, r3
 800a880:	2014      	movs	r0, #20
 800a882:	f000 f919 	bl	800aab8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a886:	f7ff fd53 	bl	800a330 <SUBGRF_GetPacketType>
 800a88a:	4603      	mov	r3, r0
 800a88c:	461a      	mov	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <SUBGRF_GetPacketStatus+0x30>
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d013      	beq.n	800a8c6 <SUBGRF_GetPacketStatus+0x56>
 800a89e:	e02a      	b.n	800a8f6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a8a0:	7b3a      	ldrb	r2, [r7, #12]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a8a6:	7b7b      	ldrb	r3, [r7, #13]
 800a8a8:	425b      	negs	r3, r3
 800a8aa:	105b      	asrs	r3, r3, #1
 800a8ac:	b25a      	sxtb	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
 800a8b4:	425b      	negs	r3, r3
 800a8b6:	105b      	asrs	r3, r3, #1
 800a8b8:	b25a      	sxtb	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	609a      	str	r2, [r3, #8]
            break;
 800a8c4:	e020      	b.n	800a908 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a8c6:	7b3b      	ldrb	r3, [r7, #12]
 800a8c8:	425b      	negs	r3, r3
 800a8ca:	105b      	asrs	r3, r3, #1
 800a8cc:	b25a      	sxtb	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a8d2:	7b7b      	ldrb	r3, [r7, #13]
 800a8d4:	b25b      	sxtb	r3, r3
 800a8d6:	3302      	adds	r3, #2
 800a8d8:	109b      	asrs	r3, r3, #2
 800a8da:	b25a      	sxtb	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	425b      	negs	r3, r3
 800a8e4:	105b      	asrs	r3, r3, #1
 800a8e6:	b25a      	sxtb	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a8ec:	4b08      	ldr	r3, [pc, #32]	; (800a910 <SUBGRF_GetPacketStatus+0xa0>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	611a      	str	r2, [r3, #16]
            break;
 800a8f4:	e008      	b.n	800a908 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a8f6:	2214      	movs	r2, #20
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fcd9 	bl	800b2b2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	220f      	movs	r2, #15
 800a904:	701a      	strb	r2, [r3, #0]
            break;
 800a906:	bf00      	nop
    }
}
 800a908:	bf00      	nop
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	20001d04 	.word	0x20001d04

0800a914 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	460a      	mov	r2, r1
 800a91e:	80fb      	strh	r3, [r7, #6]
 800a920:	4613      	mov	r3, r2
 800a922:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a924:	1d7a      	adds	r2, r7, #5
 800a926:	88f9      	ldrh	r1, [r7, #6]
 800a928:	2301      	movs	r3, #1
 800a92a:	4803      	ldr	r0, [pc, #12]	; (800a938 <SUBGRF_WriteRegister+0x24>)
 800a92c:	f7f8 fa04 	bl	8002d38 <HAL_SUBGHZ_WriteRegisters>
}
 800a930:	bf00      	nop
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20000080 	.word	0x20000080

0800a93c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a946:	f107 020f 	add.w	r2, r7, #15
 800a94a:	88f9      	ldrh	r1, [r7, #6]
 800a94c:	2301      	movs	r3, #1
 800a94e:	4804      	ldr	r0, [pc, #16]	; (800a960 <SUBGRF_ReadRegister+0x24>)
 800a950:	f7f8 fa51 	bl	8002df6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800a954:	7bfb      	ldrb	r3, [r7, #15]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20000080 	.word	0x20000080

0800a964 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	4603      	mov	r3, r0
 800a96c:	6039      	str	r1, [r7, #0]
 800a96e:	80fb      	strh	r3, [r7, #6]
 800a970:	4613      	mov	r3, r2
 800a972:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a974:	f3ef 8310 	mrs	r3, PRIMASK
 800a978:	60fb      	str	r3, [r7, #12]
  return(result);
 800a97a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a97c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a97e:	b672      	cpsid	i
}
 800a980:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a982:	88bb      	ldrh	r3, [r7, #4]
 800a984:	88f9      	ldrh	r1, [r7, #6]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	4806      	ldr	r0, [pc, #24]	; (800a9a4 <SUBGRF_WriteRegisters+0x40>)
 800a98a:	f7f8 f9d5 	bl	8002d38 <HAL_SUBGHZ_WriteRegisters>
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f383 8810 	msr	PRIMASK, r3
}
 800a998:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a99a:	bf00      	nop
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	20000080 	.word	0x20000080

0800a9a8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	6039      	str	r1, [r7, #0]
 800a9b2:	80fb      	strh	r3, [r7, #6]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a9c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9c2:	b672      	cpsid	i
}
 800a9c4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a9c6:	88bb      	ldrh	r3, [r7, #4]
 800a9c8:	88f9      	ldrh	r1, [r7, #6]
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	4806      	ldr	r0, [pc, #24]	; (800a9e8 <SUBGRF_ReadRegisters+0x40>)
 800a9ce:	f7f8 fa12 	bl	8002df6 <HAL_SUBGHZ_ReadRegisters>
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f383 8810 	msr	PRIMASK, r3
}
 800a9dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a9de:	bf00      	nop
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20000080 	.word	0x20000080

0800a9ec <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	6039      	str	r1, [r7, #0]
 800a9f6:	71fb      	strb	r3, [r7, #7]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9fc:	f3ef 8310 	mrs	r3, PRIMASK
 800aa00:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aa04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa06:	b672      	cpsid	i
}
 800aa08:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800aa0a:	79bb      	ldrb	r3, [r7, #6]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	79f9      	ldrb	r1, [r7, #7]
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	4806      	ldr	r0, [pc, #24]	; (800aa2c <SUBGRF_WriteBuffer+0x40>)
 800aa14:	f7f8 fb03 	bl	800301e <HAL_SUBGHZ_WriteBuffer>
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f383 8810 	msr	PRIMASK, r3
}
 800aa22:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aa24:	bf00      	nop
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	20000080 	.word	0x20000080

0800aa30 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	6039      	str	r1, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa40:	f3ef 8310 	mrs	r3, PRIMASK
 800aa44:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa46:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aa48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa4a:	b672      	cpsid	i
}
 800aa4c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800aa4e:	79bb      	ldrb	r3, [r7, #6]
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	79f9      	ldrb	r1, [r7, #7]
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	4806      	ldr	r0, [pc, #24]	; (800aa70 <SUBGRF_ReadBuffer+0x40>)
 800aa58:	f7f8 fb34 	bl	80030c4 <HAL_SUBGHZ_ReadBuffer>
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f383 8810 	msr	PRIMASK, r3
}
 800aa66:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aa68:	bf00      	nop
 800aa6a:	3718      	adds	r7, #24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	20000080 	.word	0x20000080

0800aa74 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	6039      	str	r1, [r7, #0]
 800aa7e:	71fb      	strb	r3, [r7, #7]
 800aa80:	4613      	mov	r3, r2
 800aa82:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa84:	f3ef 8310 	mrs	r3, PRIMASK
 800aa88:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aa8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa8e:	b672      	cpsid	i
}
 800aa90:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800aa92:	88bb      	ldrh	r3, [r7, #4]
 800aa94:	79f9      	ldrb	r1, [r7, #7]
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	4806      	ldr	r0, [pc, #24]	; (800aab4 <SUBGRF_WriteCommand+0x40>)
 800aa9a:	f7f8 fa0d 	bl	8002eb8 <HAL_SUBGHZ_ExecSetCmd>
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	f383 8810 	msr	PRIMASK, r3
}
 800aaa8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aaaa:	bf00      	nop
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20000080 	.word	0x20000080

0800aab8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	71fb      	strb	r3, [r7, #7]
 800aac4:	4613      	mov	r3, r2
 800aac6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aac8:	f3ef 8310 	mrs	r3, PRIMASK
 800aacc:	60fb      	str	r3, [r7, #12]
  return(result);
 800aace:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aad0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aad2:	b672      	cpsid	i
}
 800aad4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800aad6:	88bb      	ldrh	r3, [r7, #4]
 800aad8:	79f9      	ldrb	r1, [r7, #7]
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	4806      	ldr	r0, [pc, #24]	; (800aaf8 <SUBGRF_ReadCommand+0x40>)
 800aade:	f7f8 fa4a 	bl	8002f76 <HAL_SUBGHZ_ExecGetCmd>
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	f383 8810 	msr	PRIMASK, r3
}
 800aaec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aaee:	bf00      	nop
 800aaf0:	3718      	adds	r7, #24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20000080 	.word	0x20000080

0800aafc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	460a      	mov	r2, r1
 800ab06:	71fb      	strb	r3, [r7, #7]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800ab10:	79bb      	ldrb	r3, [r7, #6]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d10d      	bne.n	800ab32 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d104      	bne.n	800ab26 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800ab20:	2004      	movs	r0, #4
 800ab22:	f000 f8ef 	bl	800ad04 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800ab26:	79fb      	ldrb	r3, [r7, #7]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d107      	bne.n	800ab3c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	73fb      	strb	r3, [r7, #15]
 800ab30:	e004      	b.n	800ab3c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800ab32:	79bb      	ldrb	r3, [r7, #6]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 fb55 	bl	800b1ee <RBI_ConfigRFSwitch>
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800ab56:	2301      	movs	r3, #1
 800ab58:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800ab5a:	f000 fb55 	bl	800b208 <RBI_GetTxConfig>
 800ab5e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d016      	beq.n	800ab94 <SUBGRF_SetRfTxPower+0x48>
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	dc16      	bgt.n	800ab9a <SUBGRF_SetRfTxPower+0x4e>
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <SUBGRF_SetRfTxPower+0x2e>
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d00a      	beq.n	800ab8e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800ab78:	e00f      	b.n	800ab9a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800ab7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab7e:	2b0f      	cmp	r3, #15
 800ab80:	dd02      	ble.n	800ab88 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800ab82:	2302      	movs	r3, #2
 800ab84:	73fb      	strb	r3, [r7, #15]
            break;
 800ab86:	e009      	b.n	800ab9c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	73fb      	strb	r3, [r7, #15]
            break;
 800ab8c:	e006      	b.n	800ab9c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	73fb      	strb	r3, [r7, #15]
            break;
 800ab92:	e003      	b.n	800ab9c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800ab94:	2302      	movs	r3, #2
 800ab96:	73fb      	strb	r3, [r7, #15]
            break;
 800ab98:	e000      	b.n	800ab9c <SUBGRF_SetRfTxPower+0x50>
            break;
 800ab9a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800ab9c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	2202      	movs	r2, #2
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff fbcd 	bl	800a344 <SUBGRF_SetTxParams>

    return paSelect;
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800abb4:	b480      	push	{r7}
 800abb6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800abb8:	2301      	movs	r3, #1
}
 800abba:	4618      	mov	r0, r3
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bc80      	pop	{r7}
 800abc0:	4770      	bx	lr
	...

0800abc4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800abcc:	4b03      	ldr	r3, [pc, #12]	; (800abdc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2001      	movs	r0, #1
 800abd2:	4798      	blx	r3
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	20001d0c 	.word	0x20001d0c

0800abe0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800abe8:	4b03      	ldr	r3, [pc, #12]	; (800abf8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2002      	movs	r0, #2
 800abee:	4798      	blx	r3
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	20001d0c 	.word	0x20001d0c

0800abfc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800ac04:	4b03      	ldr	r3, [pc, #12]	; (800ac14 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2040      	movs	r0, #64	; 0x40
 800ac0a:	4798      	blx	r3
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20001d0c 	.word	0x20001d0c

0800ac18 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d002      	beq.n	800ac30 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d005      	beq.n	800ac3a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800ac2e:	e00a      	b.n	800ac46 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800ac30:	4b07      	ldr	r3, [pc, #28]	; (800ac50 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2080      	movs	r0, #128	; 0x80
 800ac36:	4798      	blx	r3
            break;
 800ac38:	e005      	b.n	800ac46 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ac42:	4798      	blx	r3
            break;
 800ac44:	bf00      	nop
    }
}
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	20001d0c 	.word	0x20001d0c

0800ac54 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800ac5c:	4b04      	ldr	r3, [pc, #16]	; (800ac70 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ac64:	4798      	blx	r3
}
 800ac66:	bf00      	nop
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20001d0c 	.word	0x20001d0c

0800ac74 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800ac7c:	4b03      	ldr	r3, [pc, #12]	; (800ac8c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2020      	movs	r0, #32
 800ac82:	4798      	blx	r3
}
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	20001d0c 	.word	0x20001d0c

0800ac90 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800ac98:	4b03      	ldr	r3, [pc, #12]	; (800aca8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2004      	movs	r0, #4
 800ac9e:	4798      	blx	r3
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	20001d0c 	.word	0x20001d0c

0800acac <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800acb4:	4b03      	ldr	r3, [pc, #12]	; (800acc4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2008      	movs	r0, #8
 800acba:	4798      	blx	r3
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20001d0c 	.word	0x20001d0c

0800acc8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800acd0:	4b03      	ldr	r3, [pc, #12]	; (800ace0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2010      	movs	r0, #16
 800acd6:	4798      	blx	r3
}
 800acd8:	bf00      	nop
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20001d0c 	.word	0x20001d0c

0800ace4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800acec:	4b04      	ldr	r3, [pc, #16]	; (800ad00 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800acf4:	4798      	blx	r3
}
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20001d0c 	.word	0x20001d0c

0800ad04 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800ad0e:	f000 fa91 	bl	800b234 <RBI_IsDCDC>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d112      	bne.n	800ad3e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800ad18:	f640 1023 	movw	r0, #2339	; 0x923
 800ad1c:	f7ff fe0e 	bl	800a93c <SUBGRF_ReadRegister>
 800ad20:	4603      	mov	r3, r0
 800ad22:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	f023 0306 	bic.w	r3, r3, #6
 800ad2a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800ad2c:	7bfa      	ldrb	r2, [r7, #15]
 800ad2e:	79fb      	ldrb	r3, [r7, #7]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	4619      	mov	r1, r3
 800ad36:	f640 1023 	movw	r0, #2339	; 0x923
 800ad3a:	f7ff fdeb 	bl	800a914 <SUBGRF_WriteRegister>
  }
}
 800ad3e:	bf00      	nop
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
	...

0800ad48 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800ad56:	231f      	movs	r3, #31
 800ad58:	e016      	b.n	800ad88 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73fb      	strb	r3, [r7, #15]
 800ad5e:	e00f      	b.n	800ad80 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	4a0c      	ldr	r2, [pc, #48]	; (800ad94 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ad64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d205      	bcs.n	800ad7a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
 800ad70:	4a08      	ldr	r2, [pc, #32]	; (800ad94 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	4413      	add	r3, r2
 800ad76:	791b      	ldrb	r3, [r3, #4]
 800ad78:	e006      	b.n	800ad88 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	73fb      	strb	r3, [r7, #15]
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	2b15      	cmp	r3, #21
 800ad84:	d9ec      	bls.n	800ad60 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800ad86:	e7fe      	b.n	800ad86 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bc80      	pop	{r7}
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	0800bcc8 	.word	0x0800bcc8

0800ad98 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08a      	sub	sp, #40	; 0x28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800ada2:	4b35      	ldr	r3, [pc, #212]	; (800ae78 <SUBGRF_GetCFO+0xe0>)
 800ada4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800ada6:	f640 0007 	movw	r0, #2055	; 0x807
 800adaa:	f7ff fdc7 	bl	800a93c <SUBGRF_ReadRegister>
 800adae:	4603      	mov	r3, r0
 800adb0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800adb2:	7ffb      	ldrb	r3, [r7, #31]
 800adb4:	08db      	lsrs	r3, r3, #3
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f003 0303 	and.w	r3, r3, #3
 800adbc:	3328      	adds	r3, #40	; 0x28
 800adbe:	443b      	add	r3, r7
 800adc0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800adc4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800adc6:	7ffb      	ldrb	r3, [r7, #31]
 800adc8:	f003 0307 	and.w	r3, r3, #7
 800adcc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800adce:	7fba      	ldrb	r2, [r7, #30]
 800add0:	7f7b      	ldrb	r3, [r7, #29]
 800add2:	3301      	adds	r3, #1
 800add4:	fa02 f303 	lsl.w	r3, r2, r3
 800add8:	461a      	mov	r2, r3
 800adda:	4b28      	ldr	r3, [pc, #160]	; (800ae7c <SUBGRF_GetCFO+0xe4>)
 800addc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ade0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800ade2:	69ba      	ldr	r2, [r7, #24]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adea:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800adec:	2301      	movs	r3, #1
 800adee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800adf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	fb02 f303 	mul.w	r3, r2, r3
 800adfc:	2b07      	cmp	r3, #7
 800adfe:	d802      	bhi.n	800ae06 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800ae00:	2302      	movs	r3, #2
 800ae02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800ae06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	fb02 f303 	mul.w	r3, r2, r3
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d802      	bhi.n	800ae1a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800ae14:	2304      	movs	r3, #4
 800ae16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800ae1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	fb02 f303 	mul.w	r3, r2, r3
 800ae24:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800ae26:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800ae2a:	f7ff fd87 	bl	800a93c <SUBGRF_ReadRegister>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	021b      	lsls	r3, r3, #8
 800ae32:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ae36:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800ae38:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800ae3c:	f7ff fd7e 	bl	800a93c <SUBGRF_ReadRegister>
 800ae40:	4603      	mov	r3, r0
 800ae42:	461a      	mov	r2, r3
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800ae5a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800ae5e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	095b      	lsrs	r3, r3, #5
 800ae64:	6a3a      	ldr	r2, [r7, #32]
 800ae66:	fb02 f303 	mul.w	r3, r2, r3
 800ae6a:	11da      	asrs	r2, r3, #7
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	601a      	str	r2, [r3, #0]
}
 800ae70:	bf00      	nop
 800ae72:	3728      	adds	r7, #40	; 0x28
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	0c0a0804 	.word	0x0c0a0804
 800ae7c:	01e84800 	.word	0x01e84800

0800ae80 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800ae80:	b480      	push	{r7}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	4603      	mov	r3, r0
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800ae92:	f04f 33ff 	mov.w	r3, #4294967295
 800ae96:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800ae98:	697b      	ldr	r3, [r7, #20]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	371c      	adds	r7, #28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bc80      	pop	{r7}
 800aea2:	4770      	bx	lr

0800aea4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	4603      	mov	r3, r0
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800aeb6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeba:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800aebc:	697b      	ldr	r3, [r7, #20]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	371c      	adds	r7, #28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bc80      	pop	{r7}
 800aec6:	4770      	bx	lr

0800aec8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	bc80      	pop	{r7}
 800aee0:	4770      	bx	lr

0800aee2 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800aee2:	b480      	push	{r7}
 800aee4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800aee6:	bf00      	nop
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bc80      	pop	{r7}
 800aeec:	4770      	bx	lr

0800aeee <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800aeee:	b480      	push	{r7}
 800aef0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800aef2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bc80      	pop	{r7}
 800aefa:	4770      	bx	lr

0800aefc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800af00:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800af02:	4618      	mov	r0, r3
 800af04:	46bd      	mov	sp, r7
 800af06:	bc80      	pop	{r7}
 800af08:	4770      	bx	lr

0800af0a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800af0a:	b480      	push	{r7}
 800af0c:	b083      	sub	sp, #12
 800af0e:	af00      	add	r7, sp, #0
 800af10:	4603      	mov	r3, r0
 800af12:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	bc80      	pop	{r7}
 800af1c:	4770      	bx	lr

0800af1e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800af1e:	b480      	push	{r7}
 800af20:	b087      	sub	sp, #28
 800af22:	af00      	add	r7, sp, #0
 800af24:	60f8      	str	r0, [r7, #12]
 800af26:	460b      	mov	r3, r1
 800af28:	607a      	str	r2, [r7, #4]
 800af2a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800af2c:	f04f 33ff 	mov.w	r3, #4294967295
 800af30:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800af32:	697b      	ldr	r3, [r7, #20]
}
 800af34:	4618      	mov	r0, r3
 800af36:	371c      	adds	r7, #28
 800af38:	46bd      	mov	sp, r7
 800af3a:	bc80      	pop	{r7}
 800af3c:	4770      	bx	lr

0800af3e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800af3e:	b480      	push	{r7}
 800af40:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800af42:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800af46:	4618      	mov	r0, r3
 800af48:	46bd      	mov	sp, r7
 800af4a:	bc80      	pop	{r7}
 800af4c:	4770      	bx	lr

0800af4e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800af4e:	b480      	push	{r7}
 800af50:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800af52:	bf00      	nop
 800af54:	46bd      	mov	sp, r7
 800af56:	bc80      	pop	{r7}
 800af58:	4770      	bx	lr

0800af5a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800af5a:	b480      	push	{r7}
 800af5c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800af5e:	bf00      	nop
 800af60:	46bd      	mov	sp, r7
 800af62:	bc80      	pop	{r7}
 800af64:	4770      	bx	lr

0800af66 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800af66:	b480      	push	{r7}
 800af68:	b083      	sub	sp, #12
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	4603      	mov	r3, r0
 800af6e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	bc80      	pop	{r7}
 800af78:	4770      	bx	lr
	...

0800af7c <SubghzApp_Init>:
void Transmit(char* message);
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800af7c:	b590      	push	{r4, r7, lr}
 800af7e:	b08b      	sub	sp, #44	; 0x2c
 800af80:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800af82:	4b2f      	ldr	r3, [pc, #188]	; (800b040 <SubghzApp_Init+0xc4>)
 800af84:	4a2f      	ldr	r2, [pc, #188]	; (800b044 <SubghzApp_Init+0xc8>)
 800af86:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800af88:	4b2d      	ldr	r3, [pc, #180]	; (800b040 <SubghzApp_Init+0xc4>)
 800af8a:	4a2f      	ldr	r2, [pc, #188]	; (800b048 <SubghzApp_Init+0xcc>)
 800af8c:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800af8e:	4b2c      	ldr	r3, [pc, #176]	; (800b040 <SubghzApp_Init+0xc4>)
 800af90:	4a2e      	ldr	r2, [pc, #184]	; (800b04c <SubghzApp_Init+0xd0>)
 800af92:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800af94:	4b2a      	ldr	r3, [pc, #168]	; (800b040 <SubghzApp_Init+0xc4>)
 800af96:	4a2e      	ldr	r2, [pc, #184]	; (800b050 <SubghzApp_Init+0xd4>)
 800af98:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800af9a:	4b29      	ldr	r3, [pc, #164]	; (800b040 <SubghzApp_Init+0xc4>)
 800af9c:	4a2d      	ldr	r2, [pc, #180]	; (800b054 <SubghzApp_Init+0xd8>)
 800af9e:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800afa0:	4b2d      	ldr	r3, [pc, #180]	; (800b058 <SubghzApp_Init+0xdc>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4826      	ldr	r0, [pc, #152]	; (800b040 <SubghzApp_Init+0xc4>)
 800afa6:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  Radio.SetChannel(868000000);
 800afa8:	4b2b      	ldr	r3, [pc, #172]	; (800b058 <SubghzApp_Init+0xdc>)
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	482b      	ldr	r0, [pc, #172]	; (800b05c <SubghzApp_Init+0xe0>)
 800afae:	4798      	blx	r3
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800afb0:	4b29      	ldr	r3, [pc, #164]	; (800b058 <SubghzApp_Init+0xdc>)
 800afb2:	69dc      	ldr	r4, [r3, #28]
 800afb4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800afb8:	9308      	str	r3, [sp, #32]
 800afba:	2300      	movs	r3, #0
 800afbc:	9307      	str	r3, [sp, #28]
 800afbe:	2300      	movs	r3, #0
 800afc0:	9306      	str	r3, [sp, #24]
 800afc2:	2300      	movs	r3, #0
 800afc4:	9305      	str	r3, [sp, #20]
 800afc6:	2301      	movs	r3, #1
 800afc8:	9304      	str	r3, [sp, #16]
 800afca:	2300      	movs	r3, #0
 800afcc:	9303      	str	r3, [sp, #12]
 800afce:	2308      	movs	r3, #8
 800afd0:	9302      	str	r3, [sp, #8]
 800afd2:	2301      	movs	r3, #1
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	2307      	movs	r3, #7
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	2300      	movs	r3, #0
 800afdc:	2200      	movs	r2, #0
 800afde:	210e      	movs	r1, #14
 800afe0:	2001      	movs	r0, #1
 800afe2:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800afe4:	4b1c      	ldr	r3, [pc, #112]	; (800b058 <SubghzApp_Init+0xdc>)
 800afe6:	699c      	ldr	r4, [r3, #24]
 800afe8:	2301      	movs	r3, #1
 800afea:	9309      	str	r3, [sp, #36]	; 0x24
 800afec:	2300      	movs	r3, #0
 800afee:	9308      	str	r3, [sp, #32]
 800aff0:	2300      	movs	r3, #0
 800aff2:	9307      	str	r3, [sp, #28]
 800aff4:	2300      	movs	r3, #0
 800aff6:	9306      	str	r3, [sp, #24]
 800aff8:	2301      	movs	r3, #1
 800affa:	9305      	str	r3, [sp, #20]
 800affc:	2300      	movs	r3, #0
 800affe:	9304      	str	r3, [sp, #16]
 800b000:	2300      	movs	r3, #0
 800b002:	9303      	str	r3, [sp, #12]
 800b004:	2305      	movs	r3, #5
 800b006:	9302      	str	r3, [sp, #8]
 800b008:	2308      	movs	r3, #8
 800b00a:	9301      	str	r3, [sp, #4]
 800b00c:	2300      	movs	r3, #0
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	2301      	movs	r3, #1
 800b012:	2207      	movs	r2, #7
 800b014:	2100      	movs	r1, #0
 800b016:	2001      	movs	r0, #1
 800b018:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800b01a:	4b0f      	ldr	r3, [pc, #60]	; (800b058 <SubghzApp_Init+0xdc>)
 800b01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01e:	21ff      	movs	r1, #255	; 0xff
 800b020:	2001      	movs	r0, #1
 800b022:	4798      	blx	r3

  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800b024:	22ff      	movs	r2, #255	; 0xff
 800b026:	2100      	movs	r1, #0
 800b028:	480d      	ldr	r0, [pc, #52]	; (800b060 <SubghzApp_Init+0xe4>)
 800b02a:	f000 fbe9 	bl	800b800 <memset>
  Radio.Rx(0);
 800b02e:	4b0a      	ldr	r3, [pc, #40]	; (800b058 <SubghzApp_Init+0xdc>)
 800b030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b032:	2000      	movs	r0, #0
 800b034:	4798      	blx	r3
  /* USER CODE END SubghzApp_Init_2 */
}
 800b036:	bf00      	nop
 800b038:	3704      	adds	r7, #4
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd90      	pop	{r4, r7, pc}
 800b03e:	bf00      	nop
 800b040:	20001d10 	.word	0x20001d10
 800b044:	0800b065 	.word	0x0800b065
 800b048:	0800b079 	.word	0x0800b079
 800b04c:	0800b0e9 	.word	0x0800b0e9
 800b050:	0800b0fd 	.word	0x0800b0fd
 800b054:	0800b111 	.word	0x0800b111
 800b058:	0800bc38 	.word	0x0800bc38
 800b05c:	33bca100 	.word	0x33bca100
 800b060:	20001e2c 	.word	0x20001e2c

0800b064 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	Radio.Rx(0);
 800b068:	4b02      	ldr	r3, [pc, #8]	; (800b074 <OnTxDone+0x10>)
 800b06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06c:	2000      	movs	r0, #0
 800b06e:	4798      	blx	r3
  /* USER CODE END OnTxDone */
}
 800b070:	bf00      	nop
 800b072:	bd80      	pop	{r7, pc}
 800b074:	0800bc38 	.word	0x0800bc38

0800b078 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	4608      	mov	r0, r1
 800b082:	4611      	mov	r1, r2
 800b084:	461a      	mov	r2, r3
 800b086:	4603      	mov	r3, r0
 800b088:	817b      	strh	r3, [r7, #10]
 800b08a:	460b      	mov	r3, r1
 800b08c:	813b      	strh	r3, [r7, #8]
 800b08e:	4613      	mov	r3, r2
 800b090:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
	SnrValue = LoraSnr_FskCfo;
 800b092:	4a10      	ldr	r2, [pc, #64]	; (800b0d4 <OnRxDone+0x5c>)
 800b094:	79fb      	ldrb	r3, [r7, #7]
 800b096:	7013      	strb	r3, [r2, #0]
	/* Clear BufferRx*/
	memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800b098:	22ff      	movs	r2, #255	; 0xff
 800b09a:	2100      	movs	r1, #0
 800b09c:	480e      	ldr	r0, [pc, #56]	; (800b0d8 <OnRxDone+0x60>)
 800b09e:	f000 fbaf 	bl	800b800 <memset>
	/* Record payload size*/
	RxBufferSize = size;
 800b0a2:	4a0e      	ldr	r2, [pc, #56]	; (800b0dc <OnRxDone+0x64>)
 800b0a4:	897b      	ldrh	r3, [r7, #10]
 800b0a6:	8013      	strh	r3, [r2, #0]
	if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800b0a8:	4b0c      	ldr	r3, [pc, #48]	; (800b0dc <OnRxDone+0x64>)
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	2bff      	cmp	r3, #255	; 0xff
 800b0ae:	d806      	bhi.n	800b0be <OnRxDone+0x46>
	{
	  memcpy(BufferRx, payload, RxBufferSize);
 800b0b0:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <OnRxDone+0x64>)
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	68f9      	ldr	r1, [r7, #12]
 800b0b8:	4807      	ldr	r0, [pc, #28]	; (800b0d8 <OnRxDone+0x60>)
 800b0ba:	f000 fc2b 	bl	800b914 <memcpy>
	}
	/* Record Received Signal Strength*/
	RssiValue = rssi;
 800b0be:	893b      	ldrh	r3, [r7, #8]
 800b0c0:	b25a      	sxtb	r2, r3
 800b0c2:	4b07      	ldr	r3, [pc, #28]	; (800b0e0 <OnRxDone+0x68>)
 800b0c4:	701a      	strb	r2, [r3, #0]
	data_received = true;
 800b0c6:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <OnRxDone+0x6c>)
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	701a      	strb	r2, [r3, #0]
	//printf("Received: %s\n\r",BufferRx);
  /* USER CODE END OnRxDone */
}
 800b0cc:	bf00      	nop
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	20001f2f 	.word	0x20001f2f
 800b0d8:	20001d2c 	.word	0x20001d2c
 800b0dc:	20001f2c 	.word	0x20001f2c
 800b0e0:	20001f2e 	.word	0x20001f2e
 800b0e4:	20001f30 	.word	0x20001f30

0800b0e8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	//printf("TX Timed Out");
	Radio.Rx(0);
 800b0ec:	4b02      	ldr	r3, [pc, #8]	; (800b0f8 <OnTxTimeout+0x10>)
 800b0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	4798      	blx	r3
  /* USER CODE END OnTxTimeout */
}
 800b0f4:	bf00      	nop
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	0800bc38 	.word	0x0800bc38

0800b0fc <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	//printf("RX Timed Out");
	Radio.Rx(0);
 800b100:	4b02      	ldr	r3, [pc, #8]	; (800b10c <OnRxTimeout+0x10>)
 800b102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b104:	2000      	movs	r0, #0
 800b106:	4798      	blx	r3
  /* USER CODE END OnRxTimeout */
}
 800b108:	bf00      	nop
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	0800bc38 	.word	0x0800bc38

0800b110 <OnRxError>:

static void OnRxError(void)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	//printf("RX Error");
	Radio.Rx(0);
 800b114:	4b02      	ldr	r3, [pc, #8]	; (800b120 <OnRxError+0x10>)
 800b116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b118:	2000      	movs	r0, #0
 800b11a:	4798      	blx	r3
  /* USER CODE END OnRxError */
}
 800b11c:	bf00      	nop
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	0800bc38 	.word	0x0800bc38

0800b124 <Handler>:

/* USER CODE BEGIN PrFD */
void Handler(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
	if(data_received && Radio.GetStatus() != RF_TX_RUNNING)
 800b128:	4b17      	ldr	r3, [pc, #92]	; (800b188 <Handler+0x64>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d028      	beq.n	800b182 <Handler+0x5e>
 800b130:	4b16      	ldr	r3, [pc, #88]	; (800b18c <Handler+0x68>)
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	4798      	blx	r3
 800b136:	4603      	mov	r3, r0
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d022      	beq.n	800b182 <Handler+0x5e>
	{
		Radio.Sleep();
 800b13c:	4b13      	ldr	r3, [pc, #76]	; (800b18c <Handler+0x68>)
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	4798      	blx	r3
		if (atoi((const char *)BufferRx)==1)
 800b142:	4813      	ldr	r0, [pc, #76]	; (800b190 <Handler+0x6c>)
 800b144:	f000 fad0 	bl	800b6e8 <atoi>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d106      	bne.n	800b15c <Handler+0x38>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800b14e:	2201      	movs	r2, #1
 800b150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b154:	480f      	ldr	r0, [pc, #60]	; (800b194 <Handler+0x70>)
 800b156:	f7f6 f94b 	bl	80013f0 <HAL_GPIO_WritePin>
 800b15a:	e00b      	b.n	800b174 <Handler+0x50>
		}
		else if (atoi((const char *)BufferRx)==0)
 800b15c:	480c      	ldr	r0, [pc, #48]	; (800b190 <Handler+0x6c>)
 800b15e:	f000 fac3 	bl	800b6e8 <atoi>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d105      	bne.n	800b174 <Handler+0x50>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800b168:	2200      	movs	r2, #0
 800b16a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b16e:	4809      	ldr	r0, [pc, #36]	; (800b194 <Handler+0x70>)
 800b170:	f7f6 f93e 	bl	80013f0 <HAL_GPIO_WritePin>
		}
		data_received = false;
 800b174:	4b04      	ldr	r3, [pc, #16]	; (800b188 <Handler+0x64>)
 800b176:	2200      	movs	r2, #0
 800b178:	701a      	strb	r2, [r3, #0]
		Radio.Rx(0);
 800b17a:	4b04      	ldr	r3, [pc, #16]	; (800b18c <Handler+0x68>)
 800b17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17e:	2000      	movs	r0, #0
 800b180:	4798      	blx	r3
	}


}
 800b182:	bf00      	nop
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20001f30 	.word	0x20001f30
 800b18c:	0800bc38 	.word	0x0800bc38
 800b190:	20001d2c 	.word	0x20001d2c
 800b194:	48000400 	.word	0x48000400

0800b198 <Transmit>:

void Transmit(char* message)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
	if (!data_received)
 800b1a0:	4b0a      	ldr	r3, [pc, #40]	; (800b1cc <Transmit+0x34>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	f083 0301 	eor.w	r3, r3, #1
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d009      	beq.n	800b1c2 <Transmit+0x2a>
	{
		memcpy(BufferTx, message, sizeof(message) - 1);
 800b1ae:	2203      	movs	r2, #3
 800b1b0:	6879      	ldr	r1, [r7, #4]
 800b1b2:	4807      	ldr	r0, [pc, #28]	; (800b1d0 <Transmit+0x38>)
 800b1b4:	f000 fbae 	bl	800b914 <memcpy>
		Radio.Send(BufferTx, PAYLOAD_LEN);
 800b1b8:	4b06      	ldr	r3, [pc, #24]	; (800b1d4 <Transmit+0x3c>)
 800b1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1bc:	2140      	movs	r1, #64	; 0x40
 800b1be:	4804      	ldr	r0, [pc, #16]	; (800b1d0 <Transmit+0x38>)
 800b1c0:	4798      	blx	r3
		////printf("Transmitted: %s\n\r",message);
	}

}
 800b1c2:	bf00      	nop
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20001f30 	.word	0x20001f30
 800b1d0:	20001e2c 	.word	0x20001e2c
 800b1d4:	0800bc38 	.word	0x0800bc38

0800b1d8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b1e2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bc80      	pop	{r7}
 800b1ec:	4770      	bx	lr

0800b1ee <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b085      	sub	sp, #20
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	bc80      	pop	{r7}
 800b206:	4770      	bx	lr

0800b208 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b20e:	2300      	movs	r3, #0
 800b210:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800b212:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	bc80      	pop	{r7}
 800b21c:	4770      	bx	lr

0800b21e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b224:	2301      	movs	r3, #1
 800b226:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800b228:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	bc80      	pop	{r7}
 800b232:	4770      	bx	lr

0800b234 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b23a:	2301      	movs	r3, #1
 800b23c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800b23e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	bc80      	pop	{r7}
 800b248:	4770      	bx	lr

0800b24a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b24a:	b480      	push	{r7}
 800b24c:	b085      	sub	sp, #20
 800b24e:	af00      	add	r7, sp, #0
 800b250:	4603      	mov	r3, r0
 800b252:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800b258:	79fb      	ldrb	r3, [r7, #7]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d102      	bne.n	800b264 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800b25e:	230f      	movs	r3, #15
 800b260:	60fb      	str	r3, [r7, #12]
 800b262:	e001      	b.n	800b268 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800b264:	2316      	movs	r3, #22
 800b266:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b268:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3714      	adds	r7, #20
 800b26e:	46bd      	mov	sp, r7
 800b270:	bc80      	pop	{r7}
 800b272:	4770      	bx	lr

0800b274 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b274:	b480      	push	{r7}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	4613      	mov	r3, r2
 800b280:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b28a:	e007      	b.n	800b29c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	1c53      	adds	r3, r2, #1
 800b290:	613b      	str	r3, [r7, #16]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	1c59      	adds	r1, r3, #1
 800b296:	6179      	str	r1, [r7, #20]
 800b298:	7812      	ldrb	r2, [r2, #0]
 800b29a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b29c:	88fb      	ldrh	r3, [r7, #6]
 800b29e:	1e5a      	subs	r2, r3, #1
 800b2a0:	80fa      	strh	r2, [r7, #6]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1f2      	bne.n	800b28c <UTIL_MEM_cpy_8+0x18>
    }
}
 800b2a6:	bf00      	nop
 800b2a8:	bf00      	nop
 800b2aa:	371c      	adds	r7, #28
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr

0800b2b2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b085      	sub	sp, #20
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	70fb      	strb	r3, [r7, #3]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b2c6:	e004      	b.n	800b2d2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	60fa      	str	r2, [r7, #12]
 800b2ce:	78fa      	ldrb	r2, [r7, #3]
 800b2d0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b2d2:	883b      	ldrh	r3, [r7, #0]
 800b2d4:	1e5a      	subs	r2, r3, #1
 800b2d6:	803a      	strh	r2, [r7, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1f5      	bne.n	800b2c8 <UTIL_MEM_set_8+0x16>
  }
}
 800b2dc:	bf00      	nop
 800b2de:	bf00      	nop
 800b2e0:	3714      	adds	r7, #20
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bc80      	pop	{r7}
 800b2e6:	4770      	bx	lr

0800b2e8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	603b      	str	r3, [r7, #0]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d023      	beq.n	800b346 <UTIL_TIMER_Create+0x5e>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d020      	beq.n	800b346 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b30a:	4b11      	ldr	r3, [pc, #68]	; (800b350 <UTIL_TIMER_Create+0x68>)
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	68b8      	ldr	r0, [r7, #8]
 800b310:	4798      	blx	r3
 800b312:	4602      	mov	r2, r0
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	79fa      	ldrb	r2, [r7, #7]
 800b33a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	e000      	b.n	800b348 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b346:	2301      	movs	r3, #1
  }
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	0800bbe4 	.word	0x0800bbe4

0800b354 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08a      	sub	sp, #40	; 0x28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d056      	beq.n	800b416 <UTIL_TIMER_Start+0xc2>
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f929 	bl	800b5c0 <TimerExists>
 800b36e:	4603      	mov	r3, r0
 800b370:	f083 0301 	eor.w	r3, r3, #1
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d04d      	beq.n	800b416 <UTIL_TIMER_Start+0xc2>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	7a5b      	ldrb	r3, [r3, #9]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d149      	bne.n	800b416 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b382:	f3ef 8310 	mrs	r3, PRIMASK
 800b386:	613b      	str	r3, [r7, #16]
  return(result);
 800b388:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b38a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b38c:	b672      	cpsid	i
}
 800b38e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <UTIL_TIMER_Start+0xd4>)
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	4798      	blx	r3
 800b39c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b39e:	6a3a      	ldr	r2, [r7, #32]
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d201      	bcs.n	800b3aa <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a3a      	ldr	r2, [r7, #32]
 800b3ae:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b3c2:	4b1a      	ldr	r3, [pc, #104]	; (800b42c <UTIL_TIMER_Start+0xd8>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d106      	bne.n	800b3d8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b3ca:	4b17      	ldr	r3, [pc, #92]	; (800b428 <UTIL_TIMER_Start+0xd4>)
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f96b 	bl	800b6ac <TimerInsertNewHeadTimer>
 800b3d6:	e017      	b.n	800b408 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b3d8:	4b13      	ldr	r3, [pc, #76]	; (800b428 <UTIL_TIMER_Start+0xd4>)
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	4798      	blx	r3
 800b3de:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	441a      	add	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	4b0e      	ldr	r3, [pc, #56]	; (800b42c <UTIL_TIMER_Start+0xd8>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d203      	bcs.n	800b402 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f956 	bl	800b6ac <TimerInsertNewHeadTimer>
 800b400:	e002      	b.n	800b408 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f922 	bl	800b64c <TimerInsertTimer>
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f383 8810 	msr	PRIMASK, r3
}
 800b412:	bf00      	nop
  {
 800b414:	e002      	b.n	800b41c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b416:	2301      	movs	r3, #1
 800b418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b420:	4618      	mov	r0, r3
 800b422:	3728      	adds	r7, #40	; 0x28
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	0800bbe4 	.word	0x0800bbe4
 800b42c:	20001f34 	.word	0x20001f34

0800b430 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d05b      	beq.n	800b4fa <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b442:	f3ef 8310 	mrs	r3, PRIMASK
 800b446:	60fb      	str	r3, [r7, #12]
  return(result);
 800b448:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b44a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b44c:	b672      	cpsid	i
}
 800b44e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b450:	4b2d      	ldr	r3, [pc, #180]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b456:	4b2c      	ldr	r3, [pc, #176]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b462:	4b29      	ldr	r3, [pc, #164]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d041      	beq.n	800b4ee <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b470:	4b25      	ldr	r3, [pc, #148]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	429a      	cmp	r2, r3
 800b478:	d134      	bne.n	800b4e4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b47a:	4b23      	ldr	r3, [pc, #140]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2200      	movs	r2, #0
 800b480:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b482:	4b21      	ldr	r3, [pc, #132]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00a      	beq.n	800b4a2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b48c:	4b1e      	ldr	r3, [pc, #120]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	4a1d      	ldr	r2, [pc, #116]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b494:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b496:	4b1c      	ldr	r3, [pc, #112]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f8ac 	bl	800b5f8 <TimerSetTimeout>
 800b4a0:	e023      	b.n	800b4ea <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b4a2:	4b1a      	ldr	r3, [pc, #104]	; (800b50c <UTIL_TIMER_Stop+0xdc>)
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	4798      	blx	r3
            TimerListHead = NULL;
 800b4a8:	4b17      	ldr	r3, [pc, #92]	; (800b508 <UTIL_TIMER_Stop+0xd8>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	e01c      	b.n	800b4ea <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d110      	bne.n	800b4da <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d006      	beq.n	800b4ce <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	695b      	ldr	r3, [r3, #20]
 800b4c4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b4cc:	e00d      	b.n	800b4ea <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	615a      	str	r2, [r3, #20]
            break;
 800b4d8:	e007      	b.n	800b4ea <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1e2      	bne.n	800b4b0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	77fb      	strb	r3, [r7, #31]
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	f383 8810 	msr	PRIMASK, r3
}
 800b4f8:	e001      	b.n	800b4fe <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b4fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	20001f34 	.word	0x20001f34
 800b50c:	0800bbe4 	.word	0x0800bbe4

0800b510 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d102      	bne.n	800b52a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b524:	2301      	movs	r3, #1
 800b526:	73fb      	strb	r3, [r7, #15]
 800b528:	e014      	b.n	800b554 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b52a:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <UTIL_TIMER_SetPeriod+0x50>)
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	6838      	ldr	r0, [r7, #0]
 800b530:	4798      	blx	r3
 800b532:	4602      	mov	r2, r0
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 f841 	bl	800b5c0 <TimerExists>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d007      	beq.n	800b554 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff ff73 	bl	800b430 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff ff02 	bl	800b354 <UTIL_TIMER_Start>
 800b550:	4603      	mov	r3, r0
 800b552:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b554:	7bfb      	ldrb	r3, [r7, #15]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	0800bbe4 	.word	0x0800bbe4

0800b564 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b56a:	4b06      	ldr	r3, [pc, #24]	; (800b584 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	4798      	blx	r3
 800b570:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b572:	4b04      	ldr	r3, [pc, #16]	; (800b584 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	4798      	blx	r3
 800b57a:	4603      	mov	r3, r0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	0800bbe4 	.word	0x0800bbe4

0800b588 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b590:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <UTIL_TIMER_GetElapsedTime+0x34>)
 800b592:	69db      	ldr	r3, [r3, #28]
 800b594:	4798      	blx	r3
 800b596:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b598:	4b08      	ldr	r3, [pc, #32]	; (800b5bc <UTIL_TIMER_GetElapsedTime+0x34>)
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	4798      	blx	r3
 800b5a0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b5a2:	4b06      	ldr	r3, [pc, #24]	; (800b5bc <UTIL_TIMER_GetElapsedTime+0x34>)
 800b5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a6:	68f9      	ldr	r1, [r7, #12]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	1a8a      	subs	r2, r1, r2
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	4798      	blx	r3
 800b5b0:	4603      	mov	r3, r0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	0800bbe4 	.word	0x0800bbe4

0800b5c0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b5c8:	4b0a      	ldr	r3, [pc, #40]	; (800b5f4 <TimerExists+0x34>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b5ce:	e008      	b.n	800b5e2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d101      	bne.n	800b5dc <TimerExists+0x1c>
    {
      return true;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e006      	b.n	800b5ea <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1f3      	bne.n	800b5d0 <TimerExists+0x10>
  }
  return false;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3714      	adds	r7, #20
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bc80      	pop	{r7}
 800b5f2:	4770      	bx	lr
 800b5f4:	20001f34 	.word	0x20001f34

0800b5f8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b5f8:	b590      	push	{r4, r7, lr}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b600:	4b11      	ldr	r3, [pc, #68]	; (800b648 <TimerSetTimeout+0x50>)
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	4798      	blx	r3
 800b606:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681c      	ldr	r4, [r3, #0]
 800b612:	4b0d      	ldr	r3, [pc, #52]	; (800b648 <TimerSetTimeout+0x50>)
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	4798      	blx	r3
 800b618:	4602      	mov	r2, r0
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	4413      	add	r3, r2
 800b61e:	429c      	cmp	r4, r3
 800b620:	d207      	bcs.n	800b632 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b622:	4b09      	ldr	r3, [pc, #36]	; (800b648 <TimerSetTimeout+0x50>)
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	4798      	blx	r3
 800b628:	4602      	mov	r2, r0
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	441a      	add	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b632:	4b05      	ldr	r3, [pc, #20]	; (800b648 <TimerSetTimeout+0x50>)
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	6812      	ldr	r2, [r2, #0]
 800b63a:	4610      	mov	r0, r2
 800b63c:	4798      	blx	r3
}
 800b63e:	bf00      	nop
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	bd90      	pop	{r4, r7, pc}
 800b646:	bf00      	nop
 800b648:	0800bbe4 	.word	0x0800bbe4

0800b64c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b654:	4b14      	ldr	r3, [pc, #80]	; (800b6a8 <TimerInsertTimer+0x5c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b65a:	4b13      	ldr	r3, [pc, #76]	; (800b6a8 <TimerInsertTimer+0x5c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b662:	e012      	b.n	800b68a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d905      	bls.n	800b67c <TimerInsertTimer+0x30>
    {
        cur = next;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	60bb      	str	r3, [r7, #8]
 800b67a:	e006      	b.n	800b68a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	615a      	str	r2, [r3, #20]
        return;
 800b688:	e009      	b.n	800b69e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1e8      	bne.n	800b664 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	615a      	str	r2, [r3, #20]
}
 800b69e:	3714      	adds	r7, #20
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bc80      	pop	{r7}
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	20001f34 	.word	0x20001f34

0800b6ac <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b6b4:	4b0b      	ldr	r3, [pc, #44]	; (800b6e4 <TimerInsertNewHeadTimer+0x38>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b6cc:	4a05      	ldr	r2, [pc, #20]	; (800b6e4 <TimerInsertNewHeadTimer+0x38>)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b6d2:	4b04      	ldr	r3, [pc, #16]	; (800b6e4 <TimerInsertNewHeadTimer+0x38>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff ff8e 	bl	800b5f8 <TimerSetTimeout>
}
 800b6dc:	bf00      	nop
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	20001f34 	.word	0x20001f34

0800b6e8 <atoi>:
 800b6e8:	220a      	movs	r2, #10
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	f000 b87e 	b.w	800b7ec <strtol>

0800b6f0 <_strtol_l.constprop.0>:
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f6:	4686      	mov	lr, r0
 800b6f8:	4690      	mov	r8, r2
 800b6fa:	d001      	beq.n	800b700 <_strtol_l.constprop.0+0x10>
 800b6fc:	2b24      	cmp	r3, #36	; 0x24
 800b6fe:	d906      	bls.n	800b70e <_strtol_l.constprop.0+0x1e>
 800b700:	f000 f8dc 	bl	800b8bc <__errno>
 800b704:	2316      	movs	r3, #22
 800b706:	6003      	str	r3, [r0, #0]
 800b708:	2000      	movs	r0, #0
 800b70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70e:	4836      	ldr	r0, [pc, #216]	; (800b7e8 <_strtol_l.constprop.0+0xf8>)
 800b710:	460d      	mov	r5, r1
 800b712:	462a      	mov	r2, r5
 800b714:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b718:	5d06      	ldrb	r6, [r0, r4]
 800b71a:	f016 0608 	ands.w	r6, r6, #8
 800b71e:	d1f8      	bne.n	800b712 <_strtol_l.constprop.0+0x22>
 800b720:	2c2d      	cmp	r4, #45	; 0x2d
 800b722:	d12e      	bne.n	800b782 <_strtol_l.constprop.0+0x92>
 800b724:	782c      	ldrb	r4, [r5, #0]
 800b726:	2601      	movs	r6, #1
 800b728:	1c95      	adds	r5, r2, #2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d057      	beq.n	800b7de <_strtol_l.constprop.0+0xee>
 800b72e:	2b10      	cmp	r3, #16
 800b730:	d109      	bne.n	800b746 <_strtol_l.constprop.0+0x56>
 800b732:	2c30      	cmp	r4, #48	; 0x30
 800b734:	d107      	bne.n	800b746 <_strtol_l.constprop.0+0x56>
 800b736:	782a      	ldrb	r2, [r5, #0]
 800b738:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b73c:	2a58      	cmp	r2, #88	; 0x58
 800b73e:	d149      	bne.n	800b7d4 <_strtol_l.constprop.0+0xe4>
 800b740:	786c      	ldrb	r4, [r5, #1]
 800b742:	2310      	movs	r3, #16
 800b744:	3502      	adds	r5, #2
 800b746:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b74a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b74e:	2200      	movs	r2, #0
 800b750:	fbbc f9f3 	udiv	r9, ip, r3
 800b754:	4610      	mov	r0, r2
 800b756:	fb03 ca19 	mls	sl, r3, r9, ip
 800b75a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b75e:	2f09      	cmp	r7, #9
 800b760:	d814      	bhi.n	800b78c <_strtol_l.constprop.0+0x9c>
 800b762:	463c      	mov	r4, r7
 800b764:	42a3      	cmp	r3, r4
 800b766:	dd20      	ble.n	800b7aa <_strtol_l.constprop.0+0xba>
 800b768:	1c57      	adds	r7, r2, #1
 800b76a:	d007      	beq.n	800b77c <_strtol_l.constprop.0+0x8c>
 800b76c:	4581      	cmp	r9, r0
 800b76e:	d319      	bcc.n	800b7a4 <_strtol_l.constprop.0+0xb4>
 800b770:	d101      	bne.n	800b776 <_strtol_l.constprop.0+0x86>
 800b772:	45a2      	cmp	sl, r4
 800b774:	db16      	blt.n	800b7a4 <_strtol_l.constprop.0+0xb4>
 800b776:	fb00 4003 	mla	r0, r0, r3, r4
 800b77a:	2201      	movs	r2, #1
 800b77c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b780:	e7eb      	b.n	800b75a <_strtol_l.constprop.0+0x6a>
 800b782:	2c2b      	cmp	r4, #43	; 0x2b
 800b784:	bf04      	itt	eq
 800b786:	782c      	ldrbeq	r4, [r5, #0]
 800b788:	1c95      	addeq	r5, r2, #2
 800b78a:	e7ce      	b.n	800b72a <_strtol_l.constprop.0+0x3a>
 800b78c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b790:	2f19      	cmp	r7, #25
 800b792:	d801      	bhi.n	800b798 <_strtol_l.constprop.0+0xa8>
 800b794:	3c37      	subs	r4, #55	; 0x37
 800b796:	e7e5      	b.n	800b764 <_strtol_l.constprop.0+0x74>
 800b798:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b79c:	2f19      	cmp	r7, #25
 800b79e:	d804      	bhi.n	800b7aa <_strtol_l.constprop.0+0xba>
 800b7a0:	3c57      	subs	r4, #87	; 0x57
 800b7a2:	e7df      	b.n	800b764 <_strtol_l.constprop.0+0x74>
 800b7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a8:	e7e8      	b.n	800b77c <_strtol_l.constprop.0+0x8c>
 800b7aa:	1c53      	adds	r3, r2, #1
 800b7ac:	d108      	bne.n	800b7c0 <_strtol_l.constprop.0+0xd0>
 800b7ae:	2322      	movs	r3, #34	; 0x22
 800b7b0:	f8ce 3000 	str.w	r3, [lr]
 800b7b4:	4660      	mov	r0, ip
 800b7b6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ba:	d0a6      	beq.n	800b70a <_strtol_l.constprop.0+0x1a>
 800b7bc:	1e69      	subs	r1, r5, #1
 800b7be:	e006      	b.n	800b7ce <_strtol_l.constprop.0+0xde>
 800b7c0:	b106      	cbz	r6, 800b7c4 <_strtol_l.constprop.0+0xd4>
 800b7c2:	4240      	negs	r0, r0
 800b7c4:	f1b8 0f00 	cmp.w	r8, #0
 800b7c8:	d09f      	beq.n	800b70a <_strtol_l.constprop.0+0x1a>
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	d1f6      	bne.n	800b7bc <_strtol_l.constprop.0+0xcc>
 800b7ce:	f8c8 1000 	str.w	r1, [r8]
 800b7d2:	e79a      	b.n	800b70a <_strtol_l.constprop.0+0x1a>
 800b7d4:	2430      	movs	r4, #48	; 0x30
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1b5      	bne.n	800b746 <_strtol_l.constprop.0+0x56>
 800b7da:	2308      	movs	r3, #8
 800b7dc:	e7b3      	b.n	800b746 <_strtol_l.constprop.0+0x56>
 800b7de:	2c30      	cmp	r4, #48	; 0x30
 800b7e0:	d0a9      	beq.n	800b736 <_strtol_l.constprop.0+0x46>
 800b7e2:	230a      	movs	r3, #10
 800b7e4:	e7af      	b.n	800b746 <_strtol_l.constprop.0+0x56>
 800b7e6:	bf00      	nop
 800b7e8:	0800bd79 	.word	0x0800bd79

0800b7ec <strtol>:
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	460a      	mov	r2, r1
 800b7f0:	4601      	mov	r1, r0
 800b7f2:	4802      	ldr	r0, [pc, #8]	; (800b7fc <strtol+0x10>)
 800b7f4:	6800      	ldr	r0, [r0, #0]
 800b7f6:	f7ff bf7b 	b.w	800b6f0 <_strtol_l.constprop.0>
 800b7fa:	bf00      	nop
 800b7fc:	20000060 	.word	0x20000060

0800b800 <memset>:
 800b800:	4402      	add	r2, r0
 800b802:	4603      	mov	r3, r0
 800b804:	4293      	cmp	r3, r2
 800b806:	d100      	bne.n	800b80a <memset+0xa>
 800b808:	4770      	bx	lr
 800b80a:	f803 1b01 	strb.w	r1, [r3], #1
 800b80e:	e7f9      	b.n	800b804 <memset+0x4>

0800b810 <_reclaim_reent>:
 800b810:	4b29      	ldr	r3, [pc, #164]	; (800b8b8 <_reclaim_reent+0xa8>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4283      	cmp	r3, r0
 800b816:	b570      	push	{r4, r5, r6, lr}
 800b818:	4604      	mov	r4, r0
 800b81a:	d04b      	beq.n	800b8b4 <_reclaim_reent+0xa4>
 800b81c:	69c3      	ldr	r3, [r0, #28]
 800b81e:	b143      	cbz	r3, 800b832 <_reclaim_reent+0x22>
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d144      	bne.n	800b8b0 <_reclaim_reent+0xa0>
 800b826:	69e3      	ldr	r3, [r4, #28]
 800b828:	6819      	ldr	r1, [r3, #0]
 800b82a:	b111      	cbz	r1, 800b832 <_reclaim_reent+0x22>
 800b82c:	4620      	mov	r0, r4
 800b82e:	f000 f87f 	bl	800b930 <_free_r>
 800b832:	6961      	ldr	r1, [r4, #20]
 800b834:	b111      	cbz	r1, 800b83c <_reclaim_reent+0x2c>
 800b836:	4620      	mov	r0, r4
 800b838:	f000 f87a 	bl	800b930 <_free_r>
 800b83c:	69e1      	ldr	r1, [r4, #28]
 800b83e:	b111      	cbz	r1, 800b846 <_reclaim_reent+0x36>
 800b840:	4620      	mov	r0, r4
 800b842:	f000 f875 	bl	800b930 <_free_r>
 800b846:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b848:	b111      	cbz	r1, 800b850 <_reclaim_reent+0x40>
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 f870 	bl	800b930 <_free_r>
 800b850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b852:	b111      	cbz	r1, 800b85a <_reclaim_reent+0x4a>
 800b854:	4620      	mov	r0, r4
 800b856:	f000 f86b 	bl	800b930 <_free_r>
 800b85a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b85c:	b111      	cbz	r1, 800b864 <_reclaim_reent+0x54>
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 f866 	bl	800b930 <_free_r>
 800b864:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b866:	b111      	cbz	r1, 800b86e <_reclaim_reent+0x5e>
 800b868:	4620      	mov	r0, r4
 800b86a:	f000 f861 	bl	800b930 <_free_r>
 800b86e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b870:	b111      	cbz	r1, 800b878 <_reclaim_reent+0x68>
 800b872:	4620      	mov	r0, r4
 800b874:	f000 f85c 	bl	800b930 <_free_r>
 800b878:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b87a:	b111      	cbz	r1, 800b882 <_reclaim_reent+0x72>
 800b87c:	4620      	mov	r0, r4
 800b87e:	f000 f857 	bl	800b930 <_free_r>
 800b882:	6a23      	ldr	r3, [r4, #32]
 800b884:	b1b3      	cbz	r3, 800b8b4 <_reclaim_reent+0xa4>
 800b886:	4620      	mov	r0, r4
 800b888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b88c:	4718      	bx	r3
 800b88e:	5949      	ldr	r1, [r1, r5]
 800b890:	b941      	cbnz	r1, 800b8a4 <_reclaim_reent+0x94>
 800b892:	3504      	adds	r5, #4
 800b894:	69e3      	ldr	r3, [r4, #28]
 800b896:	2d80      	cmp	r5, #128	; 0x80
 800b898:	68d9      	ldr	r1, [r3, #12]
 800b89a:	d1f8      	bne.n	800b88e <_reclaim_reent+0x7e>
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 f847 	bl	800b930 <_free_r>
 800b8a2:	e7c0      	b.n	800b826 <_reclaim_reent+0x16>
 800b8a4:	680e      	ldr	r6, [r1, #0]
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 f842 	bl	800b930 <_free_r>
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	e7ef      	b.n	800b890 <_reclaim_reent+0x80>
 800b8b0:	2500      	movs	r5, #0
 800b8b2:	e7ef      	b.n	800b894 <_reclaim_reent+0x84>
 800b8b4:	bd70      	pop	{r4, r5, r6, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000060 	.word	0x20000060

0800b8bc <__errno>:
 800b8bc:	4b01      	ldr	r3, [pc, #4]	; (800b8c4 <__errno+0x8>)
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20000060 	.word	0x20000060

0800b8c8 <__libc_init_array>:
 800b8c8:	b570      	push	{r4, r5, r6, lr}
 800b8ca:	4d0d      	ldr	r5, [pc, #52]	; (800b900 <__libc_init_array+0x38>)
 800b8cc:	4c0d      	ldr	r4, [pc, #52]	; (800b904 <__libc_init_array+0x3c>)
 800b8ce:	1b64      	subs	r4, r4, r5
 800b8d0:	10a4      	asrs	r4, r4, #2
 800b8d2:	2600      	movs	r6, #0
 800b8d4:	42a6      	cmp	r6, r4
 800b8d6:	d109      	bne.n	800b8ec <__libc_init_array+0x24>
 800b8d8:	4d0b      	ldr	r5, [pc, #44]	; (800b908 <__libc_init_array+0x40>)
 800b8da:	4c0c      	ldr	r4, [pc, #48]	; (800b90c <__libc_init_array+0x44>)
 800b8dc:	f000 f87e 	bl	800b9dc <_init>
 800b8e0:	1b64      	subs	r4, r4, r5
 800b8e2:	10a4      	asrs	r4, r4, #2
 800b8e4:	2600      	movs	r6, #0
 800b8e6:	42a6      	cmp	r6, r4
 800b8e8:	d105      	bne.n	800b8f6 <__libc_init_array+0x2e>
 800b8ea:	bd70      	pop	{r4, r5, r6, pc}
 800b8ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f0:	4798      	blx	r3
 800b8f2:	3601      	adds	r6, #1
 800b8f4:	e7ee      	b.n	800b8d4 <__libc_init_array+0xc>
 800b8f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8fa:	4798      	blx	r3
 800b8fc:	3601      	adds	r6, #1
 800b8fe:	e7f2      	b.n	800b8e6 <__libc_init_array+0x1e>
 800b900:	0800be84 	.word	0x0800be84
 800b904:	0800be84 	.word	0x0800be84
 800b908:	0800be84 	.word	0x0800be84
 800b90c:	0800be88 	.word	0x0800be88

0800b910 <__retarget_lock_acquire_recursive>:
 800b910:	4770      	bx	lr

0800b912 <__retarget_lock_release_recursive>:
 800b912:	4770      	bx	lr

0800b914 <memcpy>:
 800b914:	440a      	add	r2, r1
 800b916:	4291      	cmp	r1, r2
 800b918:	f100 33ff 	add.w	r3, r0, #4294967295
 800b91c:	d100      	bne.n	800b920 <memcpy+0xc>
 800b91e:	4770      	bx	lr
 800b920:	b510      	push	{r4, lr}
 800b922:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b92a:	4291      	cmp	r1, r2
 800b92c:	d1f9      	bne.n	800b922 <memcpy+0xe>
 800b92e:	bd10      	pop	{r4, pc}

0800b930 <_free_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4605      	mov	r5, r0
 800b934:	2900      	cmp	r1, #0
 800b936:	d041      	beq.n	800b9bc <_free_r+0x8c>
 800b938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b93c:	1f0c      	subs	r4, r1, #4
 800b93e:	2b00      	cmp	r3, #0
 800b940:	bfb8      	it	lt
 800b942:	18e4      	addlt	r4, r4, r3
 800b944:	f000 f83e 	bl	800b9c4 <__malloc_lock>
 800b948:	4a1d      	ldr	r2, [pc, #116]	; (800b9c0 <_free_r+0x90>)
 800b94a:	6813      	ldr	r3, [r2, #0]
 800b94c:	b933      	cbnz	r3, 800b95c <_free_r+0x2c>
 800b94e:	6063      	str	r3, [r4, #4]
 800b950:	6014      	str	r4, [r2, #0]
 800b952:	4628      	mov	r0, r5
 800b954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b958:	f000 b83a 	b.w	800b9d0 <__malloc_unlock>
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	d908      	bls.n	800b972 <_free_r+0x42>
 800b960:	6820      	ldr	r0, [r4, #0]
 800b962:	1821      	adds	r1, r4, r0
 800b964:	428b      	cmp	r3, r1
 800b966:	bf01      	itttt	eq
 800b968:	6819      	ldreq	r1, [r3, #0]
 800b96a:	685b      	ldreq	r3, [r3, #4]
 800b96c:	1809      	addeq	r1, r1, r0
 800b96e:	6021      	streq	r1, [r4, #0]
 800b970:	e7ed      	b.n	800b94e <_free_r+0x1e>
 800b972:	461a      	mov	r2, r3
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	b10b      	cbz	r3, 800b97c <_free_r+0x4c>
 800b978:	42a3      	cmp	r3, r4
 800b97a:	d9fa      	bls.n	800b972 <_free_r+0x42>
 800b97c:	6811      	ldr	r1, [r2, #0]
 800b97e:	1850      	adds	r0, r2, r1
 800b980:	42a0      	cmp	r0, r4
 800b982:	d10b      	bne.n	800b99c <_free_r+0x6c>
 800b984:	6820      	ldr	r0, [r4, #0]
 800b986:	4401      	add	r1, r0
 800b988:	1850      	adds	r0, r2, r1
 800b98a:	4283      	cmp	r3, r0
 800b98c:	6011      	str	r1, [r2, #0]
 800b98e:	d1e0      	bne.n	800b952 <_free_r+0x22>
 800b990:	6818      	ldr	r0, [r3, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	6053      	str	r3, [r2, #4]
 800b996:	4408      	add	r0, r1
 800b998:	6010      	str	r0, [r2, #0]
 800b99a:	e7da      	b.n	800b952 <_free_r+0x22>
 800b99c:	d902      	bls.n	800b9a4 <_free_r+0x74>
 800b99e:	230c      	movs	r3, #12
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	e7d6      	b.n	800b952 <_free_r+0x22>
 800b9a4:	6820      	ldr	r0, [r4, #0]
 800b9a6:	1821      	adds	r1, r4, r0
 800b9a8:	428b      	cmp	r3, r1
 800b9aa:	bf04      	itt	eq
 800b9ac:	6819      	ldreq	r1, [r3, #0]
 800b9ae:	685b      	ldreq	r3, [r3, #4]
 800b9b0:	6063      	str	r3, [r4, #4]
 800b9b2:	bf04      	itt	eq
 800b9b4:	1809      	addeq	r1, r1, r0
 800b9b6:	6021      	streq	r1, [r4, #0]
 800b9b8:	6054      	str	r4, [r2, #4]
 800b9ba:	e7ca      	b.n	800b952 <_free_r+0x22>
 800b9bc:	bd38      	pop	{r3, r4, r5, pc}
 800b9be:	bf00      	nop
 800b9c0:	20002074 	.word	0x20002074

0800b9c4 <__malloc_lock>:
 800b9c4:	4801      	ldr	r0, [pc, #4]	; (800b9cc <__malloc_lock+0x8>)
 800b9c6:	f7ff bfa3 	b.w	800b910 <__retarget_lock_acquire_recursive>
 800b9ca:	bf00      	nop
 800b9cc:	20002070 	.word	0x20002070

0800b9d0 <__malloc_unlock>:
 800b9d0:	4801      	ldr	r0, [pc, #4]	; (800b9d8 <__malloc_unlock+0x8>)
 800b9d2:	f7ff bf9e 	b.w	800b912 <__retarget_lock_release_recursive>
 800b9d6:	bf00      	nop
 800b9d8:	20002070 	.word	0x20002070

0800b9dc <_init>:
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9de:	bf00      	nop
 800b9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e2:	bc08      	pop	{r3}
 800b9e4:	469e      	mov	lr, r3
 800b9e6:	4770      	bx	lr

0800b9e8 <_fini>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	bf00      	nop
 800b9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ee:	bc08      	pop	{r3}
 800b9f0:	469e      	mov	lr, r3
 800b9f2:	4770      	bx	lr
